package server

import "encoding/base64"

var _assetcssapp2bb65642css, _ = base64.StdEncoding.DecodeString("Lmxpc3RbZGF0YS12LTZhODVjZTMxXXt3aWR0aDoxMDAlO3RleHQtYWxpZ246bGVmdDtmb250LXNpemU6Ljg3NXJlbX0ubGlzdCB0aFtkYXRhLXYtNmE4NWNlMzFdey13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZTtib3JkZXItYm90dG9tOjFweCBzb2xpZCAjZWZlZmVmO3BhZGRpbmc6MXJlbTtiYWNrZ3JvdW5kOiNmZmZ9Lmxpc3QgdGhbZGF0YS12LTZhODVjZTMxXTpob3ZlcntjdXJzb3I6cG9pbnRlcjtjb2xvcjojMTIxMjEyfS5saXN0IHRyW2RhdGEtdi02YTg1Y2UzMV06bnRoLWNoaWxkKG9kZCl7YmFja2dyb3VuZDojZjhmOGY4fS5saXN0IHRkW2RhdGEtdi02YTg1Y2UzMV17cGFkZGluZzouNXJlbSAxcmVtO292ZXJmbG93OmhpZGRlbjt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzO3doaXRlLXNwYWNlOm5vd3JhcH0ubGlzdCB0ZFtkYXRhLXYtNmE4NWNlMzFdOmhvdmVye2N1cnNvcjpwb2ludGVyO2NvbG9yOiMxMjEyMTJ9Lmxpc3QgdGRbZGF0YS12LTZhODVjZTMxXTpmaXJzdC1jaGlsZHttYXgtd2lkdGg6MjAwcHh9Lmxpc3RfX2l0ZW0tLWRpcmVjdG9yeSB0ZFtkYXRhLXYtNmE4NWNlMzFdOmZpcnN0LWNoaWxke2ZvbnQtd2VpZ2h0OjcwMH0ubGlzdF9faGVhZGVyW2RhdGEtdi02YTg1Y2UzMV17Zm9udC1zaXplOi42ODc1cmVtO2xldHRlci1zcGFjaW5nOjFweDtsaW5lLWhlaWdodDoxfS5saXN0X19oZWFkZXJfX3NpemVbZGF0YS12LTZhODVjZTMxXXt3aWR0aDoxMDBweH0ubGlzdF9faGVhZGVyX19tdGltZVtkYXRhLXYtNmE4NWNlMzFde3dpZHRoOjIyMHB4fS53cmFwcGVyW2RhdGEtdi00NzJmZDU3ZV17LXdlYmtpdC1ib3gtZmxleDoxOy1tcy1mbGV4OjEgMSBhdXRvO2ZsZXg6MSAxIGF1dG87ZGlzcGxheTpibG9jazt3aWR0aDpjYWxjKDEwMCUgLSAzMDBweCl9LmJyZWFkY3J1bWJbZGF0YS12LTQ3MmZkNTdlXXtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O2JhY2tncm91bmQ6I2Y4ZjhmOH0ucGF0aFtkYXRhLXYtNDcyZmQ1N2Vde2Rpc3BsYXk6aW5saW5lLWJsb2NrO21hcmdpbjowO3BhZGRpbmc6LjMzMzMzM3JlbSAxcmVtO2xpc3Qtc3R5bGU6bm9uZTtiYWNrZ3JvdW5kOiNmOGY4Zjg7Ym9yZGVyLXJhZGl1czozcHg7b3ZlcmZsb3c6aGlkZGVuO3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXM7d2hpdGUtc3BhY2U6bm93cmFwO2xpbmUtaGVpZ2h0OjI7Ym9yZGVyLXJhZGl1czowIDAgM3B4IDNweH0ucGF0aCBsaVtkYXRhLXYtNDcyZmQ1N2Vde2Rpc3BsYXk6aW5saW5lLWJsb2NrfS5wYXRoIGxpW2RhdGEtdi00NzJmZDU3ZV06YWZ0ZXJ7ZGlzcGxheTppbmxpbmUtYmxvY2s7Y29udGVudDoiXDIwM0EiO29wYWNpdHk6LjU7bWFyZ2luLWxlZnQ6LjVyZW07bWFyZ2luLXJpZ2h0Oi4yNXJlbX0ucGF0aCBsaVtkYXRhLXYtNDcyZmQ1N2VdOmxhc3QtY2hpbGQ6YWZ0ZXJ7Y29udGVudDoiIn0ucGF0aCBhW2RhdGEtdi00NzJmZDU3ZV17Y3Vyc29yOnBvaW50ZXJ9LnBhdGggYVtkYXRhLXYtNDcyZmQ1N2VdOmhvdmVye2NvbG9yOiMxMjEyMTJ9I2FwcHtwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O21hcmdpbjowIGF1dG87bWF4LXdpZHRoOjEwMDBweDttaW4taGVpZ2h0OjMwMHB4O2JhY2tncm91bmQ6I2ZmZjtvdmVyZmxvdzpoaWRkZW59QG1lZGlhIChtaW4td2lkdGg6OTAwcHgpeyNhcHB7bWluLWhlaWdodDo1MHZoOy13ZWJraXQtYm94LXNoYWRvdzowIDAgMjBweCBoc2xhKDAsMCUsNDcuMSUsLjEpO2JveC1zaGFkb3c6MCAwIDIwcHggaHNsYSgwLDAlLDQ3LjElLC4xKTtib3JkZXItcmFkaXVzOjVweH19Ym9keXtiYWNrZ3JvdW5kOiNlZmVmZWY7Zm9udC1zaXplOjEwMCU7bGluZS1oZWlnaHQ6MS41O2ZvbnQtc2l6ZTouODc1cmVtO2ZvbnQtZmFtaWx5Oi1hcHBsZS1zeXN0ZW0sQmxpbmtNYWNTeXN0ZW1Gb250LFNlZ29lIFVJLFJvYm90byxPeHlnZW4tU2FucyxVYnVudHUsQ2FudGFyZWxsLEhlbHZldGljYSBOZXVlLEhlbHZldGljYSxBcmlhbCxzYW5zLXNlcmlmLEFwcGxlIENvbG9yIEVtb2ppLFNlZ29lIFVJIEVtb2ppLFNlZ29lIFVJIFN5bWJvbDtjb2xvcjojNzg3ODc4fUBtZWRpYSAobWluLXdpZHRoOjkwMHB4KXtib2R5e3BhZGRpbmc6MXJlbX19YXt0ZXh0LWRlY29yYXRpb246bm9uZTtjb2xvcjppbmhlcml0fWh0bWx7LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94fSosOmFmdGVyLDpiZWZvcmV7LXdlYmtpdC1ib3gtc2l6aW5nOmluaGVyaXQ7Ym94LXNpemluZzppbmhlcml0fS5oZXJvX19oZWFkbGluZXt0ZXh0LWFsaWduOmNlbnRlcjtmb250LXdlaWdodDo1MDB9LmZvb3Rlcnt0ZXh0LWFsaWduOmNlbnRlcjtmb250LXNpemU6Ljc1cmVtO21hcmdpbi10b3A6MXJlbTtjb2xvcjojYmNiY2JjfQ==")
var _assetindexhtml, _ = base64.StdEncoding.DecodeString("PCFET0NUWVBFIGh0bWw+PGh0bWwgbGFuZz1lbj48aGVhZD48bWV0YSBjaGFyc2V0PXV0Zi04PjxtZXRhIGh0dHAtZXF1aXY9WC1VQS1Db21wYXRpYmxlIGNvbnRlbnQ9IklFPWVkZ2UiPjxtZXRhIG5hbWU9dmlld3BvcnQgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLGluaXRpYWwtc2NhbGU9MSI+PHRpdGxlPlN1cGVydGFyPC90aXRsZT48bGluayBocmVmPS9jc3MvYXBwLjJiYjY1NjQyLmNzcyByZWw9cHJlbG9hZCBhcz1zdHlsZT48bGluayBocmVmPS9qcy9hcHAuOWMzYzliNGEuanMgcmVsPXByZWxvYWQgYXM9c2NyaXB0PjxsaW5rIGhyZWY9L2pzL2NodW5rLXZlbmRvcnMuYTZjNGU2MWIuanMgcmVsPXByZWxvYWQgYXM9c2NyaXB0PjxsaW5rIGhyZWY9L2Nzcy9hcHAuMmJiNjU2NDIuY3NzIHJlbD1zdHlsZXNoZWV0PjwvaGVhZD48Ym9keT48bm9zY3JpcHQ+PHN0cm9uZz5XZSdyZSBzb3JyeSBidXQgc3VwZXJ0YXIgZG9lc24ndCB3b3JrIHByb3Blcmx5IHdpdGhvdXQgSmF2YVNjcmlwdCBlbmFibGVkLiBQbGVhc2UgZW5hYmxlIGl0IHRvIGNvbnRpbnVlLjwvc3Ryb25nPjwvbm9zY3JpcHQ+PGRpdiBpZD1hcHA+PC9kaXY+PHNjcmlwdCBzcmM9L2pzL2NodW5rLXZlbmRvcnMuYTZjNGU2MWIuanM+PC9zY3JpcHQ+PHNjcmlwdCBzcmM9L2pzL2FwcC45YzNjOWI0YS5qcz48L3NjcmlwdD48L2JvZHk+PC9odG1sPg==")
var _assetjsapp9c3c9b4ajs, _ = base64.StdEncoding.DecodeString("KGZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoZSl7Zm9yKHZhciByLGEsbz1lWzBdLGM9ZVsxXSx1PWVbMl0sZj0wLGg9W107ZjxvLmxlbmd0aDtmKyspYT1vW2ZdLGlbYV0mJmgucHVzaChpW2FdWzBdKSxpW2FdPTA7Zm9yKHIgaW4gYylPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYyxyKSYmKHRbcl09Y1tyXSk7bCYmbChlKTt3aGlsZShoLmxlbmd0aCloLnNoaWZ0KCkoKTtyZXR1cm4gcy5wdXNoLmFwcGx5KHMsdXx8W10pLG4oKX1mdW5jdGlvbiBuKCl7Zm9yKHZhciB0LGU9MDtlPHMubGVuZ3RoO2UrKyl7Zm9yKHZhciBuPXNbZV0scj0hMCxvPTE7bzxuLmxlbmd0aDtvKyspe3ZhciBjPW5bb107MCE9PWlbY10mJihyPSExKX1yJiYocy5zcGxpY2UoZS0tLDEpLHQ9YShhLnM9blswXSkpfXJldHVybiB0fXZhciByPXt9LGk9e2FwcDowfSxzPVtdO2Z1bmN0aW9uIGEoZSl7aWYocltlXSlyZXR1cm4gcltlXS5leHBvcnRzO3ZhciBuPXJbZV09e2k6ZSxsOiExLGV4cG9ydHM6e319O3JldHVybiB0W2VdLmNhbGwobi5leHBvcnRzLG4sbi5leHBvcnRzLGEpLG4ubD0hMCxuLmV4cG9ydHN9YS5tPXQsYS5jPXIsYS5kPWZ1bmN0aW9uKHQsZSxuKXthLm8odCxlKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSx7ZW51bWVyYWJsZTohMCxnZXQ6bn0pfSxhLnI9ZnVuY3Rpb24odCl7InVuZGVmaW5lZCIhPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6Ik1vZHVsZSJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSl9LGEudD1mdW5jdGlvbih0LGUpe2lmKDEmZSYmKHQ9YSh0KSksOCZlKXJldHVybiB0O2lmKDQmZSYmIm9iamVjdCI9PT10eXBlb2YgdCYmdCYmdC5fX2VzTW9kdWxlKXJldHVybiB0O3ZhciBuPU9iamVjdC5jcmVhdGUobnVsbCk7aWYoYS5yKG4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCJkZWZhdWx0Iix7ZW51bWVyYWJsZTohMCx2YWx1ZTp0fSksMiZlJiYic3RyaW5nIiE9dHlwZW9mIHQpZm9yKHZhciByIGluIHQpYS5kKG4scixmdW5jdGlvbihlKXtyZXR1cm4gdFtlXX0uYmluZChudWxsLHIpKTtyZXR1cm4gbn0sYS5uPWZ1bmN0aW9uKHQpe3ZhciBlPXQmJnQuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiB0WyJkZWZhdWx0Il19OmZ1bmN0aW9uKCl7cmV0dXJuIHR9O3JldHVybiBhLmQoZSwiYSIsZSksZX0sYS5vPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LGUpfSxhLnA9Ii8iO3ZhciBvPXdpbmRvd1sid2VicGFja0pzb25wIl09d2luZG93WyJ3ZWJwYWNrSnNvbnAiXXx8W10sYz1vLnB1c2guYmluZChvKTtvLnB1c2g9ZSxvPW8uc2xpY2UoKTtmb3IodmFyIHU9MDt1PG8ubGVuZ3RoO3UrKyllKG9bdV0pO3ZhciBsPWM7cy5wdXNoKFswLCJjaHVuay12ZW5kb3JzIl0pLG4oKX0pKHswOmZ1bmN0aW9uKHQsZSxuKXt0LmV4cG9ydHM9bigiNTZkNyIpfSwyNDk1OmZ1bmN0aW9uKHQsZSxuKXt9LCIyNTJlIjpmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO3ZhciByPW4oIjI0OTUiKSxpPW4ubihyKTtpLmF9LCIzNDdiIjpmdW5jdGlvbih0LGUsbil7fSwiNTZkNyI6ZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtuLnIoZSk7bigiY2FkZiIpLG4oIjU1MWMiKSxuKCJmNzUxIiksbigiMDk3ZCIpO3ZhciByPW4oIjJiMGUiKSxpPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuJGNyZWF0ZUVsZW1lbnQsbj10Ll9zZWxmLl9jfHxlO3JldHVybiBuKCJkaXYiLFtuKCJoMSIse3N0YXRpY0NsYXNzOiJoZXJvX19oZWFkbGluZSJ9LFt0Ll92KCJTdXBlcnRhciIpXSksbigiZGl2Iix7YXR0cnM6e2lkOiJhcHAifX0sW24oIkJyb3dzZXIiKV0sMSksdC5fbSgwKV0pfSxzPVtmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10LiRjcmVhdGVFbGVtZW50LG49dC5fc2VsZi5fY3x8ZTtyZXR1cm4gbigiZm9vdGVyIix7c3RhdGljQ2xhc3M6ImZvb3RlciJ9LFt0Ll92KCJcbiAgICBTdXBlcnRhciBvblxuICAgICIpLG4oImEiLHthdHRyczp7aHJlZjoiaHR0cHM6Ly93d3cuZ2l0aHViLmNvbS9tYXJjYm9la2VyL3N1cGVydGFyIix0YXJnZXQ6Il9ibGFuayJ9fSxbdC5fdigiR2l0aHViIildKSx0Ll92KCIgfCBVSSBiYXNlZCBvbiB3b3JrIGJ5XG4gICAgIiksbigiYSIse2F0dHJzOntocmVmOiJodHRwczovL2NvZGVwZW4uaW8vbDRjaS9wZW4vQllOR3h3Iix0YXJnZXQ6Il9ibGFuayJ9fSxbdC5fdigiVm9sa2VyIE90dG8iKV0pXSl9XSxhPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuJGNyZWF0ZUVsZW1lbnQsbj10Ll9zZWxmLl9jfHxlO3JldHVybiBuKCJkaXYiLHtzdGF0aWNDbGFzczoid3JhcHBlciJ9LFtuKCJkaXYiLHtzdGF0aWNDbGFzczoiYnJlYWRjcnVtYiJ9LFtuKCJ1bCIse3N0YXRpY0NsYXNzOiJwYXRoIn0sW24oImxpIixbbigiYSIse2F0dHJzOntocmVmOiIjIn0sb246e2NsaWNrOmZ1bmN0aW9uKGUpe3JldHVybiB0LmJyb3dzZSgiIil9fX0sW3QuX3YoIkhvbWUiKV0pXSksdC5fbCh0aGlzLmNsZWFuUGF0aCgpLGZ1bmN0aW9uKGUscil7cmV0dXJuIG4oImxpIixbbigiYSIse2F0dHJzOntocmVmOiIjIix0aXRsZTp0LmZ1bGxQYXRoKHIpfSxvbjp7Y2xpY2s6ZnVuY3Rpb24oZSl7dC5icm93c2UodC5mdWxsUGF0aChyKSl9fX0sW3QuX3YodC5fcyhlKSldKV0pfSldLDIpXSksbigiTGlzdCIse2F0dHJzOntpdGVtczp0aGlzLml0ZW1zLGJyb3dzZTp0LmJyb3dzZX19KV0sMSl9LG89W10sYz0obigiMjhhNSIpLGZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuJGNyZWF0ZUVsZW1lbnQsbj10Ll9zZWxmLl9jfHxlO3JldHVybiBuKCJ0YWJsZSIse3N0YXRpY0NsYXNzOiJsaXN0In0sW3QuX20oMCksdC5fbCh0aGlzLml0ZW1zLGZ1bmN0aW9uKGUscil7cmV0dXJuIGUuaXNEaXI/bigidHIiLHtzdGF0aWNDbGFzczoibGlzdF9faXRlbS0tZGlyZWN0b3J5Iixvbjp7Y2xpY2s6ZnVuY3Rpb24obil7cmV0dXJuIHQuYnJvd3NlKGUucGF0aCsiLyIrZS5uYW1lKX19fSxbbigidGQiLFt0Ll92KHQuX3MoZS5uYW1lKSldKSxuKCJ0ZCIsW3QuX3YoIi0iKV0pLG4oInRkIixbdC5fdih0Ll9zKGUubXRpbWUpKV0pXSk6dC5fZSgpfSksdC5fbCh0aGlzLml0ZW1zLGZ1bmN0aW9uKGUscil7cmV0dXJuIGUuaXNEaXI/dC5fZSgpOm4oInRyIix7c3RhdGljQ2xhc3M6Imxpc3RfX2l0ZW0tLWZpbGUiLG9uOntjbGljazpmdW5jdGlvbihuKXtyZXR1cm4gdC5zdHJlYW0oZS5wYXRoKyIvIitlLm5hbWUpfX19LFtuKCJ0ZCIsW3QuX3YodC5fcyhlLm5hbWUpKV0pLG4oInRkIixbdC5fdih0Ll9zKGUuc2l6ZSkpXSksbigidGQiLFt0Ll92KHQuX3MoZS5tdGltZSkpXSldKX0pXSwyKX0pLHU9W2Z1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuJGNyZWF0ZUVsZW1lbnQsbj10Ll9zZWxmLl9jfHxlO3JldHVybiBuKCJ0ciIse3N0YXRpY0NsYXNzOiJsaXN0X19oZWFkZXIifSxbbigidGgiLHtzdGF0aWNDbGFzczoibGlzdF9faGVhZGVyX19uYW1lIn0sW3QuX3YoIk5hbWUiKV0pLG4oInRoIix7c3RhdGljQ2xhc3M6Imxpc3RfX2hlYWRlcl9fc2l6ZSJ9LFt0Ll92KCJTaXplIildKSxuKCJ0aCIse3N0YXRpY0NsYXNzOiJsaXN0X19oZWFkZXJfX210aW1lIn0sW3QuX3YoIkxhc3QgbW9kaWZpY2F0aW9uIildKV0pfV0sbD17bmFtZToiTGlzdCIscHJvcHM6e2l0ZW1zOkFycmF5fSxtZXRob2RzOntzdHJlYW06ZnVuY3Rpb24odCl7d2luZG93Lm9wZW4oImh0dHA6Ly9sb2NhbGhvc3Q6MTMzNy9hcGkvc3RyZWFtLyIuY29uY2F0KGVuY29kZVVSSSh0KSksIl9ibGFuayIpfSxicm93c2U6ZnVuY3Rpb24odCl7dGhpcy4kcm9vdC4kZW1pdCgiYnJvd3NlIix0KX19fSxmPWwsaD0obigiZGEwMSIpLG4oIjI4NzciKSkscD1PYmplY3QoaFsiYSJdKShmLGMsdSwhMSxudWxsLCI2YTg1Y2UzMSIsbnVsbCksXz1wLmV4cG9ydHMsZD1uKCJiYzNhIiksbT1uLm4oZCksYj17bmFtZToiQnJvd3NlciIsZGF0YTpmdW5jdGlvbigpe3JldHVybntwYXRoOltdLGl0ZW1zOltdfX0sY29tcG9uZW50czp7TGlzdDpffSxtb3VudGVkOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLmJyb3dzZSgiIiksdGhpcy4kcm9vdC4kb24oImJyb3dzZSIsZnVuY3Rpb24oZSl7dC5icm93c2UoZSl9KX0sbWV0aG9kczp7YnJvd3NlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7dGhpcy5wYXRoPXQuc3BsaXQoIi8iKSxtLmEuZ2V0KCJodHRwOi8vbG9jYWxob3N0OjEzMzcvYXBpL2l0ZW1zLyIuY29uY2F0KGVuY29kZVVSSSh0KSkpLnRoZW4oZnVuY3Rpb24odCl7cmV0dXJuIGUuaXRlbXM9dC5kYXRhfSl9LGNsZWFuUGF0aDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnBhdGhbMF0/Ii4iPT09dGhpcy5wYXRoWzBdP3RoaXMucGF0aC5zbGljZSgxKTp0aGlzLnBhdGg6W119LGZ1bGxQYXRoOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnBhdGguc2xpY2UoMCx0KzEpLmpvaW4oIi8iKX19fSx2PWIsdz0obigiMjUyZSIpLE9iamVjdChoWyJhIl0pKHYsYSxvLCExLG51bGwsIjQ3MmZkNTdlIixudWxsKSkseT13LmV4cG9ydHMsZz17bmFtZToiYXBwIixjb21wb25lbnRzOntCcm93c2VyOnl9fSxrPWcsTz0obigiNWMwYiIpLE9iamVjdChoWyJhIl0pKGssaSxzLCExLG51bGwsbnVsbCxudWxsKSksaj1PLmV4cG9ydHM7clsiYSJdLmNvbmZpZy5wcm9kdWN0aW9uVGlwPSExLG5ldyByWyJhIl0oe3JlbmRlcjpmdW5jdGlvbih0KXtyZXR1cm4gdChqKX19KS4kbW91bnQoIiNhcHAiKX0sIjVjMGIiOmZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7dmFyIHI9bigiNWUyNyIpLGk9bi5uKHIpO2kuYX0sIjVlMjciOmZ1bmN0aW9uKHQsZSxuKXt9LGRhMDE6ZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj1uKCIzNDdiIiksaT1uLm4ocik7aS5hfX0pOwovLyMgc291cmNlTWFwcGluZ1VSTD1hcHAuOWMzYzliNGEuanMubWFw")
var _assetjsapp9c3c9b4ajsmap, _ = base64.StdEncoding.DecodeString("")
var _assetjschunkvendorsa6c4e61bjs, _ = base64.StdEncoding.DecodeString("KHdpbmRvd1sid2VicGFja0pzb25wIl09d2luZG93WyJ3ZWJwYWNrSnNvbnAiXXx8W10pLnB1c2goW1siY2h1bmstdmVuZG9ycyJdLHsiMDFmOSI6ZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj1uKCIyZDAwIiksbz1uKCI1Y2ExIiksaT1uKCIyYWJhIiksYT1uKCIzMmU5Iikscz1uKCI4NGYyIiksYz1uKCI0MWEwIiksdT1uKCI3ZjIwIiksZj1uKCIzOGZkIiksbD1uKCIyYjRjIikoIml0ZXJhdG9yIikscD0hKFtdLmtleXMmJiJuZXh0ImluW10ua2V5cygpKSxkPSJAQGl0ZXJhdG9yIix2PSJrZXlzIixoPSJ2YWx1ZXMiLG09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc307dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxuLHksZyxfLGIpe2MobixlLHkpO3ZhciB3LHgsQyxBPWZ1bmN0aW9uKHQpe2lmKCFwJiZ0IGluIGspcmV0dXJuIGtbdF07c3dpdGNoKHQpe2Nhc2UgdjpyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gbmV3IG4odGhpcyx0KX07Y2FzZSBoOnJldHVybiBmdW5jdGlvbigpe3JldHVybiBuZXcgbih0aGlzLHQpfX1yZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gbmV3IG4odGhpcyx0KX19LE89ZSsiIEl0ZXJhdG9yIixTPWc9PWgsJD0hMSxrPXQucHJvdG90eXBlLEU9a1tsXXx8a1tkXXx8ZyYma1tnXSxqPUV8fEEoZyksVD1nP1M/QSgiZW50cmllcyIpOmo6dm9pZCAwLFA9IkFycmF5Ij09ZSYmay5lbnRyaWVzfHxFO2lmKFAmJihDPWYoUC5jYWxsKG5ldyB0KSksQyE9PU9iamVjdC5wcm90b3R5cGUmJkMubmV4dCYmKHUoQyxPLCEwKSxyfHwiZnVuY3Rpb24iPT10eXBlb2YgQ1tsXXx8YShDLGwsbSkpKSxTJiZFJiZFLm5hbWUhPT1oJiYoJD0hMCxqPWZ1bmN0aW9uKCl7cmV0dXJuIEUuY2FsbCh0aGlzKX0pLHImJiFifHwhcCYmISQmJmtbbF18fGEoayxsLGopLHNbZV09aixzW09dPW0sZylpZih3PXt2YWx1ZXM6Uz9qOkEoaCksa2V5czpfP2o6QSh2KSxlbnRyaWVzOlR9LGIpZm9yKHggaW4gdyl4IGluIGt8fGkoayx4LHdbeF0pO2Vsc2UgbyhvLlArby5GKihwfHwkKSxlLHcpO3JldHVybiB3fX0sIjAyZjQiOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCI0NTg4Iiksbz1uKCJiZTEzIik7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihlLG4pe3ZhciBpLGEscz1TdHJpbmcobyhlKSksYz1yKG4pLHU9cy5sZW5ndGg7cmV0dXJuIGM8MHx8Yz49dT90PyIiOnZvaWQgMDooaT1zLmNoYXJDb2RlQXQoYyksaTw1NTI5Nnx8aT41NjMxOXx8YysxPT09dXx8KGE9cy5jaGFyQ29kZUF0KGMrMSkpPDU2MzIwfHxhPjU3MzQzP3Q/cy5jaGFyQXQoYyk6aTp0P3Muc2xpY2UoYyxjKzIpOmEtNTYzMjArKGktNTUyOTY8PDEwKSs2NTUzNil9fX0sIjAzOTAiOmZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7dmFyIHI9bigiMDJmNCIpKCEwKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlLG4pe3JldHVybiBlKyhuP3IodCxlKS5sZW5ndGg6MSl9fSwiMDk3ZCI6ZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj1uKCI1Y2ExIiksbz1uKCI4Mzc4IiksaT1uKCI3NzI2IiksYT1uKCJlYmQ2Iikscz1uKCJiY2FhIik7cihyLlArci5SLCJQcm9taXNlIix7ZmluYWxseTpmdW5jdGlvbih0KXt2YXIgZT1hKHRoaXMsby5Qcm9taXNlfHxpLlByb21pc2UpLG49ImZ1bmN0aW9uIj09dHlwZW9mIHQ7cmV0dXJuIHRoaXMudGhlbihuP2Z1bmN0aW9uKG4pe3JldHVybiBzKGUsdCgpKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIG59KX06dCxuP2Z1bmN0aW9uKG4pe3JldHVybiBzKGUsdCgpKS50aGVuKGZ1bmN0aW9uKCl7dGhyb3cgbn0pfTp0KX19KX0sIjBhMDYiOmZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7dmFyIHI9bigiYzUzMiIpLG89bigiMzBiNSIpLGk9bigiZjZiNCIpLGE9bigiNTI3MCIpLHM9bigiNGE3YiIpO2Z1bmN0aW9uIGModCl7dGhpcy5kZWZhdWx0cz10LHRoaXMuaW50ZXJjZXB0b3JzPXtyZXF1ZXN0Om5ldyBpLHJlc3BvbnNlOm5ldyBpfX1jLnByb3RvdHlwZS5yZXF1ZXN0PWZ1bmN0aW9uKHQpeyJzdHJpbmciPT09dHlwZW9mIHQ/KHQ9YXJndW1lbnRzWzFdfHx7fSx0LnVybD1hcmd1bWVudHNbMF0pOnQ9dHx8e30sdD1zKHRoaXMuZGVmYXVsdHMsdCksdC5tZXRob2Q9dC5tZXRob2Q/dC5tZXRob2QudG9Mb3dlckNhc2UoKToiZ2V0Ijt2YXIgZT1bYSx2b2lkIDBdLG49UHJvbWlzZS5yZXNvbHZlKHQpO3RoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbih0KXtlLnVuc2hpZnQodC5mdWxmaWxsZWQsdC5yZWplY3RlZCl9KSx0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2UucHVzaCh0LmZ1bGZpbGxlZCx0LnJlamVjdGVkKX0pO3doaWxlKGUubGVuZ3RoKW49bi50aGVuKGUuc2hpZnQoKSxlLnNoaWZ0KCkpO3JldHVybiBufSxjLnByb3RvdHlwZS5nZXRVcmk9ZnVuY3Rpb24odCl7cmV0dXJuIHQ9cyh0aGlzLmRlZmF1bHRzLHQpLG8odC51cmwsdC5wYXJhbXMsdC5wYXJhbXNTZXJpYWxpemVyKS5yZXBsYWNlKC9eXD8vLCIiKX0sci5mb3JFYWNoKFsiZGVsZXRlIiwiZ2V0IiwiaGVhZCIsIm9wdGlvbnMiXSxmdW5jdGlvbih0KXtjLnByb3RvdHlwZVt0XT1mdW5jdGlvbihlLG4pe3JldHVybiB0aGlzLnJlcXVlc3Qoci5tZXJnZShufHx7fSx7bWV0aG9kOnQsdXJsOmV9KSl9fSksci5mb3JFYWNoKFsicG9zdCIsInB1dCIsInBhdGNoIl0sZnVuY3Rpb24odCl7Yy5wcm90b3R5cGVbdF09ZnVuY3Rpb24oZSxuLG8pe3JldHVybiB0aGlzLnJlcXVlc3Qoci5tZXJnZShvfHx7fSx7bWV0aG9kOnQsdXJsOmUsZGF0YTpufSkpfX0pLHQuZXhwb3J0cz1jfSwiMGJmYiI6ZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj1uKCJjYjdjIik7dC5leHBvcnRzPWZ1bmN0aW9uKCl7dmFyIHQ9cih0aGlzKSxlPSIiO3JldHVybiB0Lmdsb2JhbCYmKGUrPSJnIiksdC5pZ25vcmVDYXNlJiYoZSs9ImkiKSx0Lm11bHRpbGluZSYmKGUrPSJtIiksdC51bmljb2RlJiYoZSs9InUiKSx0LnN0aWNreSYmKGUrPSJ5IiksZX19LCIwZDU4IjpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiY2UxMCIpLG89bigiZTExZSIpO3QuZXhwb3J0cz1PYmplY3Qua2V5c3x8ZnVuY3Rpb24odCl7cmV0dXJuIHIodCxvKX19LCIwZGY2IjpmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIHQuYXBwbHkobnVsbCxlKX19fSwxNDk1OmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCI4NmNjIiksbz1uKCJjYjdjIiksaT1uKCIwZDU4Iik7dC5leHBvcnRzPW4oIjllMWUiKT9PYmplY3QuZGVmaW5lUHJvcGVydGllczpmdW5jdGlvbih0LGUpe28odCk7dmFyIG4sYT1pKGUpLHM9YS5sZW5ndGgsYz0wO3doaWxlKHM+YylyLmYodCxuPWFbYysrXSxlW25dKTtyZXR1cm4gdH19LDE5OTE6ZnVuY3Rpb24odCxlLG4pe3ZhciByLG8saSxhPW4oIjliNDMiKSxzPW4oIjMxZjQiKSxjPW4oImZhYjIiKSx1PW4oIjIzMGUiKSxmPW4oIjc3MjYiKSxsPWYucHJvY2VzcyxwPWYuc2V0SW1tZWRpYXRlLGQ9Zi5jbGVhckltbWVkaWF0ZSx2PWYuTWVzc2FnZUNoYW5uZWwsaD1mLkRpc3BhdGNoLG09MCx5PXt9LGc9Im9ucmVhZHlzdGF0ZWNoYW5nZSIsXz1mdW5jdGlvbigpe3ZhciB0PSt0aGlzO2lmKHkuaGFzT3duUHJvcGVydHkodCkpe3ZhciBlPXlbdF07ZGVsZXRlIHlbdF0sZSgpfX0sYj1mdW5jdGlvbih0KXtfLmNhbGwodC5kYXRhKX07cCYmZHx8KHA9ZnVuY3Rpb24odCl7dmFyIGU9W10sbj0xO3doaWxlKGFyZ3VtZW50cy5sZW5ndGg+billLnB1c2goYXJndW1lbnRzW24rK10pO3JldHVybiB5WysrbV09ZnVuY3Rpb24oKXtzKCJmdW5jdGlvbiI9PXR5cGVvZiB0P3Q6RnVuY3Rpb24odCksZSl9LHIobSksbX0sZD1mdW5jdGlvbih0KXtkZWxldGUgeVt0XX0sInByb2Nlc3MiPT1uKCIyZDk1IikobCk/cj1mdW5jdGlvbih0KXtsLm5leHRUaWNrKGEoXyx0LDEpKX06aCYmaC5ub3c/cj1mdW5jdGlvbih0KXtoLm5vdyhhKF8sdCwxKSl9OnY/KG89bmV3IHYsaT1vLnBvcnQyLG8ucG9ydDEub25tZXNzYWdlPWIscj1hKGkucG9zdE1lc3NhZ2UsaSwxKSk6Zi5hZGRFdmVudExpc3RlbmVyJiYiZnVuY3Rpb24iPT10eXBlb2YgcG9zdE1lc3NhZ2UmJiFmLmltcG9ydFNjcmlwdHM/KHI9ZnVuY3Rpb24odCl7Zi5wb3N0TWVzc2FnZSh0KyIiLCIqIil9LGYuYWRkRXZlbnRMaXN0ZW5lcigibWVzc2FnZSIsYiwhMSkpOnI9ZyBpbiB1KCJzY3JpcHQiKT9mdW5jdGlvbih0KXtjLmFwcGVuZENoaWxkKHUoInNjcmlwdCIpKVtnXT1mdW5jdGlvbigpe2MucmVtb3ZlQ2hpbGQodGhpcyksXy5jYWxsKHQpfX06ZnVuY3Rpb24odCl7c2V0VGltZW91dChhKF8sdCwxKSwwKX0pLHQuZXhwb3J0cz17c2V0OnAsY2xlYXI6ZH19LCIxZDJiIjpmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe3JldHVybiBmdW5jdGlvbigpe2Zvcih2YXIgbj1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCkscj0wO3I8bi5sZW5ndGg7cisrKW5bcl09YXJndW1lbnRzW3JdO3JldHVybiB0LmFwcGx5KGUsbil9fX0sIjFmYTgiOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCJjYjdjIik7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxuLG8pe3RyeXtyZXR1cm4gbz9lKHIobilbMF0sblsxXSk6ZShuKX1jYXRjaChhKXt2YXIgaT10WyJyZXR1cm4iXTt0aHJvdyB2b2lkIDAhPT1pJiZyKGkuY2FsbCh0KSksYX19fSwiMjE0ZiI6ZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtuKCJiMGM1Iik7dmFyIHI9bigiMmFiYSIpLG89bigiMzJlOSIpLGk9bigiNzllNSIpLGE9bigiYmUxMyIpLHM9bigiMmI0YyIpLGM9bigiNTIwYSIpLHU9cygic3BlY2llcyIpLGY9IWkoZnVuY3Rpb24oKXt2YXIgdD0vLi87cmV0dXJuIHQuZXhlYz1mdW5jdGlvbigpe3ZhciB0PVtdO3JldHVybiB0Lmdyb3Vwcz17YToiNyJ9LHR9LCI3IiE9PSIiLnJlcGxhY2UodCwiJDxhPiIpfSksbD1mdW5jdGlvbigpe3ZhciB0PS8oPzopLyxlPXQuZXhlYzt0LmV4ZWM9ZnVuY3Rpb24oKXtyZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9O3ZhciBuPSJhYiIuc3BsaXQodCk7cmV0dXJuIDI9PT1uLmxlbmd0aCYmImEiPT09blswXSYmImIiPT09blsxXX0oKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlLG4pe3ZhciBwPXModCksZD0haShmdW5jdGlvbigpe3ZhciBlPXt9O3JldHVybiBlW3BdPWZ1bmN0aW9uKCl7cmV0dXJuIDd9LDchPSIiW3RdKGUpfSksdj1kPyFpKGZ1bmN0aW9uKCl7dmFyIGU9ITEsbj0vYS87cmV0dXJuIG4uZXhlYz1mdW5jdGlvbigpe3JldHVybiBlPSEwLG51bGx9LCJzcGxpdCI9PT10JiYobi5jb25zdHJ1Y3Rvcj17fSxuLmNvbnN0cnVjdG9yW3VdPWZ1bmN0aW9uKCl7cmV0dXJuIG59KSxuW3BdKCIiKSwhZX0pOnZvaWQgMDtpZighZHx8IXZ8fCJyZXBsYWNlIj09PXQmJiFmfHwic3BsaXQiPT09dCYmIWwpe3ZhciBoPS8uL1twXSxtPW4oYSxwLCIiW3RdLGZ1bmN0aW9uKHQsZSxuLHIsbyl7cmV0dXJuIGUuZXhlYz09PWM/ZCYmIW8/e2RvbmU6ITAsdmFsdWU6aC5jYWxsKGUsbixyKX06e2RvbmU6ITAsdmFsdWU6dC5jYWxsKG4sZSxyKX06e2RvbmU6ITF9fSkseT1tWzBdLGc9bVsxXTtyKFN0cmluZy5wcm90b3R5cGUsdCx5KSxvKFJlZ0V4cC5wcm90b3R5cGUscCwyPT1lP2Z1bmN0aW9uKHQsZSl7cmV0dXJuIGcuY2FsbCh0LHRoaXMsZSl9OmZ1bmN0aW9uKHQpe3JldHVybiBnLmNhbGwodCx0aGlzKX0pfX19LCIyMzBlIjpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiZDNmNCIpLG89bigiNzcyNiIpLmRvY3VtZW50LGk9cihvKSYmcihvLmNyZWF0ZUVsZW1lbnQpO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gaT9vLmNyZWF0ZUVsZW1lbnQodCk6e319fSwiMjNjNiI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjJkOTUiKSxvPW4oIjJiNGMiKSgidG9TdHJpbmdUYWciKSxpPSJBcmd1bWVudHMiPT1yKGZ1bmN0aW9uKCl7cmV0dXJuIGFyZ3VtZW50c30oKSksYT1mdW5jdGlvbih0LGUpe3RyeXtyZXR1cm4gdFtlXX1jYXRjaChuKXt9fTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7dmFyIGUsbixzO3JldHVybiB2b2lkIDA9PT10PyJVbmRlZmluZWQiOm51bGw9PT10PyJOdWxsIjoic3RyaW5nIj09dHlwZW9mKG49YShlPU9iamVjdCh0KSxvKSk/bjppP3IoZSk6Ik9iamVjdCI9PShzPXIoZSkpJiYiZnVuY3Rpb24iPT10eXBlb2YgZS5jYWxsZWU/IkFyZ3VtZW50cyI6c319LDI0NDQ6ZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjsoZnVuY3Rpb24oZSl7dmFyIHI9bigiYzUzMiIpLG89bigiYzhhZiIpLGk9eyJDb250ZW50LVR5cGUiOiJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQifTtmdW5jdGlvbiBhKHQsZSl7IXIuaXNVbmRlZmluZWQodCkmJnIuaXNVbmRlZmluZWQodFsiQ29udGVudC1UeXBlIl0pJiYodFsiQ29udGVudC1UeXBlIl09ZSl9ZnVuY3Rpb24gcygpe3ZhciB0O3JldHVybiJ1bmRlZmluZWQiIT09dHlwZW9mIGUmJiJbb2JqZWN0IHByb2Nlc3NdIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKT90PW4oImI1MGQiKToidW5kZWZpbmVkIiE9PXR5cGVvZiBYTUxIdHRwUmVxdWVzdCYmKHQ9bigiYjUwZCIpKSx0fXZhciBjPXthZGFwdGVyOnMoKSx0cmFuc2Zvcm1SZXF1ZXN0OltmdW5jdGlvbih0LGUpe3JldHVybiBvKGUsIkFjY2VwdCIpLG8oZSwiQ29udGVudC1UeXBlIiksci5pc0Zvcm1EYXRhKHQpfHxyLmlzQXJyYXlCdWZmZXIodCl8fHIuaXNCdWZmZXIodCl8fHIuaXNTdHJlYW0odCl8fHIuaXNGaWxlKHQpfHxyLmlzQmxvYih0KT90OnIuaXNBcnJheUJ1ZmZlclZpZXcodCk/dC5idWZmZXI6ci5pc1VSTFNlYXJjaFBhcmFtcyh0KT8oYShlLCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCIpLHQudG9TdHJpbmcoKSk6ci5pc09iamVjdCh0KT8oYShlLCJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgiKSxKU09OLnN0cmluZ2lmeSh0KSk6dH1dLHRyYW5zZm9ybVJlc3BvbnNlOltmdW5jdGlvbih0KXtpZigic3RyaW5nIj09PXR5cGVvZiB0KXRyeXt0PUpTT04ucGFyc2UodCl9Y2F0Y2goZSl7fXJldHVybiB0fV0sdGltZW91dDowLHhzcmZDb29raWVOYW1lOiJYU1JGLVRPS0VOIix4c3JmSGVhZGVyTmFtZToiWC1YU1JGLVRPS0VOIixtYXhDb250ZW50TGVuZ3RoOi0xLHZhbGlkYXRlU3RhdHVzOmZ1bmN0aW9uKHQpe3JldHVybiB0Pj0yMDAmJnQ8MzAwfSxoZWFkZXJzOntjb21tb246e0FjY2VwdDoiYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qIn19fTtyLmZvckVhY2goWyJkZWxldGUiLCJnZXQiLCJoZWFkIl0sZnVuY3Rpb24odCl7Yy5oZWFkZXJzW3RdPXt9fSksci5mb3JFYWNoKFsicG9zdCIsInB1dCIsInBhdGNoIl0sZnVuY3Rpb24odCl7Yy5oZWFkZXJzW3RdPXIubWVyZ2UoaSl9KSx0LmV4cG9ydHM9Y30pLmNhbGwodGhpcyxuKCJmMjhjIikpfSwyNjIxOmZ1bmN0aW9uKHQsZSl7ZS5mPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHN9LCIyN2VlIjpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiMjNjNiIpLG89bigiMmI0YyIpKCJpdGVyYXRvciIpLGk9bigiODRmMiIpO3QuZXhwb3J0cz1uKCI4Mzc4IikuZ2V0SXRlcmF0b3JNZXRob2Q9ZnVuY3Rpb24odCl7aWYodm9pZCAwIT10KXJldHVybiB0W29dfHx0WyJAQGl0ZXJhdG9yIl18fGlbcih0KV19fSwyODc3OmZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gcih0LGUsbixyLG8saSxhLHMpe3ZhciBjLHU9ImZ1bmN0aW9uIj09PXR5cGVvZiB0P3Qub3B0aW9uczp0O2lmKGUmJih1LnJlbmRlcj1lLHUuc3RhdGljUmVuZGVyRm5zPW4sdS5fY29tcGlsZWQ9ITApLHImJih1LmZ1bmN0aW9uYWw9ITApLGkmJih1Ll9zY29wZUlkPSJkYXRhLXYtIitpKSxhPyhjPWZ1bmN0aW9uKHQpe3Q9dHx8dGhpcy4kdm5vZGUmJnRoaXMuJHZub2RlLnNzckNvbnRleHR8fHRoaXMucGFyZW50JiZ0aGlzLnBhcmVudC4kdm5vZGUmJnRoaXMucGFyZW50LiR2bm9kZS5zc3JDb250ZXh0LHR8fCJ1bmRlZmluZWQiPT09dHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX198fCh0PV9fVlVFX1NTUl9DT05URVhUX18pLG8mJm8uY2FsbCh0aGlzLHQpLHQmJnQuX3JlZ2lzdGVyZWRDb21wb25lbnRzJiZ0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQoYSl9LHUuX3NzclJlZ2lzdGVyPWMpOm8mJihjPXM/ZnVuY3Rpb24oKXtvLmNhbGwodGhpcyx0aGlzLiRyb290LiRvcHRpb25zLnNoYWRvd1Jvb3QpfTpvKSxjKWlmKHUuZnVuY3Rpb25hbCl7dS5faW5qZWN0U3R5bGVzPWM7dmFyIGY9dS5yZW5kZXI7dS5yZW5kZXI9ZnVuY3Rpb24odCxlKXtyZXR1cm4gYy5jYWxsKGUpLGYodCxlKX19ZWxzZXt2YXIgbD11LmJlZm9yZUNyZWF0ZTt1LmJlZm9yZUNyZWF0ZT1sP1tdLmNvbmNhdChsLGMpOltjXX1yZXR1cm57ZXhwb3J0czp0LG9wdGlvbnM6dX19bi5kKGUsImEiLGZ1bmN0aW9uKCl7cmV0dXJuIHJ9KX0sIjI4YTUiOmZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7dmFyIHI9bigiYWFlMyIpLG89bigiY2I3YyIpLGk9bigiZWJkNiIpLGE9bigiMDM5MCIpLHM9bigiOWRlZiIpLGM9bigiNWYxYiIpLHU9bigiNTIwYSIpLGY9bigiNzllNSIpLGw9TWF0aC5taW4scD1bXS5wdXNoLGQ9InNwbGl0Iix2PSJsZW5ndGgiLGg9Imxhc3RJbmRleCIsbT00Mjk0OTY3Mjk1LHk9IWYoZnVuY3Rpb24oKXtSZWdFeHAobSwieSIpfSk7bigiMjE0ZiIpKCJzcGxpdCIsMixmdW5jdGlvbih0LGUsbixmKXt2YXIgZztyZXR1cm4gZz0iYyI9PSJhYmJjIltkXSgvKGIpKi8pWzFdfHw0IT0idGVzdCJbZF0oLyg/OikvLC0xKVt2XXx8MiE9ImFiIltkXSgvKD86YWIpKi8pW3ZdfHw0IT0iLiJbZF0oLyguPykoLj8pLylbdl18fCIuIltkXSgvKCkoKS8pW3ZdPjF8fCIiW2RdKC8uPy8pW3ZdP2Z1bmN0aW9uKHQsZSl7dmFyIG89U3RyaW5nKHRoaXMpO2lmKHZvaWQgMD09PXQmJjA9PT1lKXJldHVybltdO2lmKCFyKHQpKXJldHVybiBuLmNhbGwobyx0LGUpO3ZhciBpLGEscyxjPVtdLGY9KHQuaWdub3JlQ2FzZT8iaSI6IiIpKyh0Lm11bHRpbGluZT8ibSI6IiIpKyh0LnVuaWNvZGU/InUiOiIiKSsodC5zdGlja3k/InkiOiIiKSxsPTAsZD12b2lkIDA9PT1lP206ZT4+PjAseT1uZXcgUmVnRXhwKHQuc291cmNlLGYrImciKTt3aGlsZShpPXUuY2FsbCh5LG8pKXtpZihhPXlbaF0sYT5sJiYoYy5wdXNoKG8uc2xpY2UobCxpLmluZGV4KSksaVt2XT4xJiZpLmluZGV4PG9bdl0mJnAuYXBwbHkoYyxpLnNsaWNlKDEpKSxzPWlbMF1bdl0sbD1hLGNbdl0+PWQpKWJyZWFrO3lbaF09PT1pLmluZGV4JiZ5W2hdKyt9cmV0dXJuIGw9PT1vW3ZdPyFzJiZ5LnRlc3QoIiIpfHxjLnB1c2goIiIpOmMucHVzaChvLnNsaWNlKGwpKSxjW3ZdPmQ/Yy5zbGljZSgwLGQpOmN9OiIwIltkXSh2b2lkIDAsMClbdl0/ZnVuY3Rpb24odCxlKXtyZXR1cm4gdm9pZCAwPT09dCYmMD09PWU/W106bi5jYWxsKHRoaXMsdCxlKX06bixbZnVuY3Rpb24obixyKXt2YXIgbz10KHRoaXMpLGk9dm9pZCAwPT1uP3ZvaWQgMDpuW2VdO3JldHVybiB2b2lkIDAhPT1pP2kuY2FsbChuLG8scik6Zy5jYWxsKFN0cmluZyhvKSxuLHIpfSxmdW5jdGlvbih0LGUpe3ZhciByPWYoZyx0LHRoaXMsZSxnIT09bik7aWYoci5kb25lKXJldHVybiByLnZhbHVlO3ZhciB1PW8odCkscD1TdHJpbmcodGhpcyksZD1pKHUsUmVnRXhwKSx2PXUudW5pY29kZSxoPSh1Lmlnbm9yZUNhc2U/ImkiOiIiKSsodS5tdWx0aWxpbmU/Im0iOiIiKSsodS51bmljb2RlPyJ1IjoiIikrKHk/InkiOiJnIiksXz1uZXcgZCh5P3U6Il4oPzoiK3Uuc291cmNlKyIpIixoKSxiPXZvaWQgMD09PWU/bTplPj4+MDtpZigwPT09YilyZXR1cm5bXTtpZigwPT09cC5sZW5ndGgpcmV0dXJuIG51bGw9PT1jKF8scCk/W3BdOltdO3ZhciB3PTAseD0wLEM9W107d2hpbGUoeDxwLmxlbmd0aCl7Xy5sYXN0SW5kZXg9eT94OjA7dmFyIEEsTz1jKF8seT9wOnAuc2xpY2UoeCkpO2lmKG51bGw9PT1PfHwoQT1sKHMoXy5sYXN0SW5kZXgrKHk/MDp4KSkscC5sZW5ndGgpKT09PXcpeD1hKHAseCx2KTtlbHNle2lmKEMucHVzaChwLnNsaWNlKHcseCkpLEMubGVuZ3RoPT09YilyZXR1cm4gQztmb3IodmFyIFM9MTtTPD1PLmxlbmd0aC0xO1MrKylpZihDLnB1c2goT1tTXSksQy5sZW5ndGg9PT1iKXJldHVybiBDO3g9dz1BfX1yZXR1cm4gQy5wdXNoKHAuc2xpY2UodykpLEN9XX0pfSwiMmFiYSI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjc3MjYiKSxvPW4oIjMyZTkiKSxpPW4oIjY5YTgiKSxhPW4oImNhNWEiKSgic3JjIikscz1uKCJmYTViIiksYz0idG9TdHJpbmciLHU9KCIiK3MpLnNwbGl0KGMpO24oIjgzNzgiKS5pbnNwZWN0U291cmNlPWZ1bmN0aW9uKHQpe3JldHVybiBzLmNhbGwodCl9LCh0LmV4cG9ydHM9ZnVuY3Rpb24odCxlLG4scyl7dmFyIGM9ImZ1bmN0aW9uIj09dHlwZW9mIG47YyYmKGkobiwibmFtZSIpfHxvKG4sIm5hbWUiLGUpKSx0W2VdIT09biYmKGMmJihpKG4sYSl8fG8obixhLHRbZV0/IiIrdFtlXTp1LmpvaW4oU3RyaW5nKGUpKSkpLHQ9PT1yP3RbZV09bjpzP3RbZV0/dFtlXT1uOm8odCxlLG4pOihkZWxldGUgdFtlXSxvKHQsZSxuKSkpfSkoRnVuY3Rpb24ucHJvdG90eXBlLGMsZnVuY3Rpb24oKXtyZXR1cm4iZnVuY3Rpb24iPT10eXBlb2YgdGhpcyYmdGhpc1thXXx8cy5jYWxsKHRoaXMpfSl9LCIyYWViIjpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiY2I3YyIpLG89bigiMTQ5NSIpLGk9bigiZTExZSIpLGE9bigiNjEzYiIpKCJJRV9QUk9UTyIpLHM9ZnVuY3Rpb24oKXt9LGM9InByb3RvdHlwZSIsdT1mdW5jdGlvbigpe3ZhciB0LGU9bigiMjMwZSIpKCJpZnJhbWUiKSxyPWkubGVuZ3RoLG89IjwiLGE9Ij4iO2Uuc3R5bGUuZGlzcGxheT0ibm9uZSIsbigiZmFiMiIpLmFwcGVuZENoaWxkKGUpLGUuc3JjPSJqYXZhc2NyaXB0OiIsdD1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQsdC5vcGVuKCksdC53cml0ZShvKyJzY3JpcHQiK2ErImRvY3VtZW50LkY9T2JqZWN0IitvKyIvc2NyaXB0IithKSx0LmNsb3NlKCksdT10LkY7d2hpbGUoci0tKWRlbGV0ZSB1W2NdW2lbcl1dO3JldHVybiB1KCl9O3QuZXhwb3J0cz1PYmplY3QuY3JlYXRlfHxmdW5jdGlvbih0LGUpe3ZhciBuO3JldHVybiBudWxsIT09dD8oc1tjXT1yKHQpLG49bmV3IHMsc1tjXT1udWxsLG5bYV09dCk6bj11KCksdm9pZCAwPT09ZT9uOm8obixlKX19LCIyYjBlIjpmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiOyhmdW5jdGlvbih0KXsKLyohCiAqIFZ1ZS5qcyB2Mi42LjEwCiAqIChjKSAyMDE0LTIwMTkgRXZhbiBZb3UKICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLgogKi8KdmFyIG49T2JqZWN0LmZyZWV6ZSh7fSk7ZnVuY3Rpb24gcih0KXtyZXR1cm4gdm9pZCAwPT09dHx8bnVsbD09PXR9ZnVuY3Rpb24gbyh0KXtyZXR1cm4gdm9pZCAwIT09dCYmbnVsbCE9PXR9ZnVuY3Rpb24gaSh0KXtyZXR1cm4hMD09PXR9ZnVuY3Rpb24gYSh0KXtyZXR1cm4hMT09PXR9ZnVuY3Rpb24gcyh0KXtyZXR1cm4ic3RyaW5nIj09PXR5cGVvZiB0fHwibnVtYmVyIj09PXR5cGVvZiB0fHwic3ltYm9sIj09PXR5cGVvZiB0fHwiYm9vbGVhbiI9PT10eXBlb2YgdH1mdW5jdGlvbiBjKHQpe3JldHVybiBudWxsIT09dCYmIm9iamVjdCI9PT10eXBlb2YgdH12YXIgdT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO2Z1bmN0aW9uIGYodCl7cmV0dXJuIltvYmplY3QgT2JqZWN0XSI9PT11LmNhbGwodCl9ZnVuY3Rpb24gbCh0KXtyZXR1cm4iW29iamVjdCBSZWdFeHBdIj09PXUuY2FsbCh0KX1mdW5jdGlvbiBwKHQpe3ZhciBlPXBhcnNlRmxvYXQoU3RyaW5nKHQpKTtyZXR1cm4gZT49MCYmTWF0aC5mbG9vcihlKT09PWUmJmlzRmluaXRlKHQpfWZ1bmN0aW9uIGQodCl7cmV0dXJuIG8odCkmJiJmdW5jdGlvbiI9PT10eXBlb2YgdC50aGVuJiYiZnVuY3Rpb24iPT09dHlwZW9mIHQuY2F0Y2h9ZnVuY3Rpb24gdih0KXtyZXR1cm4gbnVsbD09dD8iIjpBcnJheS5pc0FycmF5KHQpfHxmKHQpJiZ0LnRvU3RyaW5nPT09dT9KU09OLnN0cmluZ2lmeSh0LG51bGwsMik6U3RyaW5nKHQpfWZ1bmN0aW9uIGgodCl7dmFyIGU9cGFyc2VGbG9hdCh0KTtyZXR1cm4gaXNOYU4oZSk/dDplfWZ1bmN0aW9uIG0odCxlKXtmb3IodmFyIG49T2JqZWN0LmNyZWF0ZShudWxsKSxyPXQuc3BsaXQoIiwiKSxvPTA7bzxyLmxlbmd0aDtvKyspbltyW29dXT0hMDtyZXR1cm4gZT9mdW5jdGlvbih0KXtyZXR1cm4gblt0LnRvTG93ZXJDYXNlKCldfTpmdW5jdGlvbih0KXtyZXR1cm4gblt0XX19bSgic2xvdCxjb21wb25lbnQiLCEwKTt2YXIgeT1tKCJrZXkscmVmLHNsb3Qsc2xvdC1zY29wZSxpcyIpO2Z1bmN0aW9uIGcodCxlKXtpZih0Lmxlbmd0aCl7dmFyIG49dC5pbmRleE9mKGUpO2lmKG4+LTEpcmV0dXJuIHQuc3BsaWNlKG4sMSl9fXZhciBfPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7ZnVuY3Rpb24gYih0LGUpe3JldHVybiBfLmNhbGwodCxlKX1mdW5jdGlvbiB3KHQpe3ZhciBlPU9iamVjdC5jcmVhdGUobnVsbCk7cmV0dXJuIGZ1bmN0aW9uKG4pe3ZhciByPWVbbl07cmV0dXJuIHJ8fChlW25dPXQobikpfX12YXIgeD0vLShcdykvZyxDPXcoZnVuY3Rpb24odCl7cmV0dXJuIHQucmVwbGFjZSh4LGZ1bmN0aW9uKHQsZSl7cmV0dXJuIGU/ZS50b1VwcGVyQ2FzZSgpOiIifSl9KSxBPXcoZnVuY3Rpb24odCl7cmV0dXJuIHQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrdC5zbGljZSgxKX0pLE89L1xCKFtBLVpdKS9nLFM9dyhmdW5jdGlvbih0KXtyZXR1cm4gdC5yZXBsYWNlKE8sIi0kMSIpLnRvTG93ZXJDYXNlKCl9KTtmdW5jdGlvbiAkKHQsZSl7ZnVuY3Rpb24gbihuKXt2YXIgcj1hcmd1bWVudHMubGVuZ3RoO3JldHVybiByP3I+MT90LmFwcGx5KGUsYXJndW1lbnRzKTp0LmNhbGwoZSxuKTp0LmNhbGwoZSl9cmV0dXJuIG4uX2xlbmd0aD10Lmxlbmd0aCxufWZ1bmN0aW9uIGsodCxlKXtyZXR1cm4gdC5iaW5kKGUpfXZhciBFPUZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kP2s6JDtmdW5jdGlvbiBqKHQsZSl7ZT1lfHwwO3ZhciBuPXQubGVuZ3RoLWUscj1uZXcgQXJyYXkobik7d2hpbGUobi0tKXJbbl09dFtuK2VdO3JldHVybiByfWZ1bmN0aW9uIFQodCxlKXtmb3IodmFyIG4gaW4gZSl0W25dPWVbbl07cmV0dXJuIHR9ZnVuY3Rpb24gUCh0KXtmb3IodmFyIGU9e30sbj0wO248dC5sZW5ndGg7bisrKXRbbl0mJlQoZSx0W25dKTtyZXR1cm4gZX1mdW5jdGlvbiBJKHQsZSxuKXt9dmFyIE49ZnVuY3Rpb24odCxlLG4pe3JldHVybiExfSxSPWZ1bmN0aW9uKHQpe3JldHVybiB0fTtmdW5jdGlvbiBEKHQsZSl7aWYodD09PWUpcmV0dXJuITA7dmFyIG49Yyh0KSxyPWMoZSk7aWYoIW58fCFyKXJldHVybiFuJiYhciYmU3RyaW5nKHQpPT09U3RyaW5nKGUpO3RyeXt2YXIgbz1BcnJheS5pc0FycmF5KHQpLGk9QXJyYXkuaXNBcnJheShlKTtpZihvJiZpKXJldHVybiB0Lmxlbmd0aD09PWUubGVuZ3RoJiZ0LmV2ZXJ5KGZ1bmN0aW9uKHQsbil7cmV0dXJuIEQodCxlW25dKX0pO2lmKHQgaW5zdGFuY2VvZiBEYXRlJiZlIGluc3RhbmNlb2YgRGF0ZSlyZXR1cm4gdC5nZXRUaW1lKCk9PT1lLmdldFRpbWUoKTtpZihvfHxpKXJldHVybiExO3ZhciBhPU9iamVjdC5rZXlzKHQpLHM9T2JqZWN0LmtleXMoZSk7cmV0dXJuIGEubGVuZ3RoPT09cy5sZW5ndGgmJmEuZXZlcnkoZnVuY3Rpb24obil7cmV0dXJuIEQodFtuXSxlW25dKX0pfWNhdGNoKHUpe3JldHVybiExfX1mdW5jdGlvbiBMKHQsZSl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspaWYoRCh0W25dLGUpKXJldHVybiBuO3JldHVybi0xfWZ1bmN0aW9uIEYodCl7dmFyIGU9ITE7cmV0dXJuIGZ1bmN0aW9uKCl7ZXx8KGU9ITAsdC5hcHBseSh0aGlzLGFyZ3VtZW50cykpfX12YXIgTT0iZGF0YS1zZXJ2ZXItcmVuZGVyZWQiLFU9WyJjb21wb25lbnQiLCJkaXJlY3RpdmUiLCJmaWx0ZXIiXSxCPVsiYmVmb3JlQ3JlYXRlIiwiY3JlYXRlZCIsImJlZm9yZU1vdW50IiwibW91bnRlZCIsImJlZm9yZVVwZGF0ZSIsInVwZGF0ZWQiLCJiZWZvcmVEZXN0cm95IiwiZGVzdHJveWVkIiwiYWN0aXZhdGVkIiwiZGVhY3RpdmF0ZWQiLCJlcnJvckNhcHR1cmVkIiwic2VydmVyUHJlZmV0Y2giXSxIPXtvcHRpb25NZXJnZVN0cmF0ZWdpZXM6T2JqZWN0LmNyZWF0ZShudWxsKSxzaWxlbnQ6ITEscHJvZHVjdGlvblRpcDohMSxkZXZ0b29sczohMSxwZXJmb3JtYW5jZTohMSxlcnJvckhhbmRsZXI6bnVsbCx3YXJuSGFuZGxlcjpudWxsLGlnbm9yZWRFbGVtZW50czpbXSxrZXlDb2RlczpPYmplY3QuY3JlYXRlKG51bGwpLGlzUmVzZXJ2ZWRUYWc6Tixpc1Jlc2VydmVkQXR0cjpOLGlzVW5rbm93bkVsZW1lbnQ6TixnZXRUYWdOYW1lc3BhY2U6SSxwYXJzZVBsYXRmb3JtVGFnTmFtZTpSLG11c3RVc2VQcm9wOk4sYXN5bmM6ITAsX2xpZmVjeWNsZUhvb2tzOkJ9LHo9L2EtekEtWlx1MDBCN1x1MDBDMC1cdTAwRDZcdTAwRDgtXHUwMEY2XHUwMEY4LVx1MDM3RFx1MDM3Ri1cdTFGRkZcdTIwMEMtXHUyMDBEXHUyMDNGLVx1MjA0MFx1MjA3MC1cdTIxOEZcdTJDMDAtXHUyRkVGXHUzMDAxLVx1RDdGRlx1RjkwMC1cdUZEQ0ZcdUZERjAtXHVGRkZELztmdW5jdGlvbiBxKHQpe3ZhciBlPSh0KyIiKS5jaGFyQ29kZUF0KDApO3JldHVybiAzNj09PWV8fDk1PT09ZX1mdW5jdGlvbiBWKHQsZSxuLHIpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGUse3ZhbHVlOm4sZW51bWVyYWJsZTohIXIsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfSl9dmFyIFc9bmV3IFJlZ0V4cCgiW14iK3ouc291cmNlKyIuJF9cXGRdIik7ZnVuY3Rpb24gSyh0KXtpZighVy50ZXN0KHQpKXt2YXIgZT10LnNwbGl0KCIuIik7cmV0dXJuIGZ1bmN0aW9uKHQpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXtpZighdClyZXR1cm47dD10W2Vbbl1dfXJldHVybiB0fX19dmFyIFgsRz0iX19wcm90b19fImlue30sSj0idW5kZWZpbmVkIiE9PXR5cGVvZiB3aW5kb3csWj0idW5kZWZpbmVkIiE9PXR5cGVvZiBXWEVudmlyb25tZW50JiYhIVdYRW52aXJvbm1lbnQucGxhdGZvcm0sUT1aJiZXWEVudmlyb25tZW50LnBsYXRmb3JtLnRvTG93ZXJDYXNlKCksWT1KJiZ3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLHR0PVkmJi9tc2llfHRyaWRlbnQvLnRlc3QoWSksZXQ9WSYmWS5pbmRleE9mKCJtc2llIDkuMCIpPjAsbnQ9WSYmWS5pbmRleE9mKCJlZGdlLyIpPjAscnQ9KFkmJlkuaW5kZXhPZigiYW5kcm9pZCIpLFkmJi9pcGhvbmV8aXBhZHxpcG9kfGlvcy8udGVzdChZKXx8ImlvcyI9PT1RKSxvdD0oWSYmL2Nocm9tZVwvXGQrLy50ZXN0KFkpLFkmJi9waGFudG9tanMvLnRlc3QoWSksWSYmWS5tYXRjaCgvZmlyZWZveFwvKFxkKykvKSksaXQ9e30ud2F0Y2gsYXQ9ITE7aWYoSil0cnl7dmFyIHN0PXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShzdCwicGFzc2l2ZSIse2dldDpmdW5jdGlvbigpe2F0PSEwfX0pLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJ0ZXN0LXBhc3NpdmUiLG51bGwsc3QpfWNhdGNoKENhKXt9dmFyIGN0PWZ1bmN0aW9uKCl7cmV0dXJuIHZvaWQgMD09PVgmJihYPSFKJiYhWiYmInVuZGVmaW5lZCIhPT10eXBlb2YgdCYmKHRbInByb2Nlc3MiXSYmInNlcnZlciI9PT10WyJwcm9jZXNzIl0uZW52LlZVRV9FTlYpKSxYfSx1dD1KJiZ3aW5kb3cuX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztmdW5jdGlvbiBmdCh0KXtyZXR1cm4iZnVuY3Rpb24iPT09dHlwZW9mIHQmJi9uYXRpdmUgY29kZS8udGVzdCh0LnRvU3RyaW5nKCkpfXZhciBsdCxwdD0idW5kZWZpbmVkIiE9PXR5cGVvZiBTeW1ib2wmJmZ0KFN5bWJvbCkmJiJ1bmRlZmluZWQiIT09dHlwZW9mIFJlZmxlY3QmJmZ0KFJlZmxlY3Qub3duS2V5cyk7bHQ9InVuZGVmaW5lZCIhPT10eXBlb2YgU2V0JiZmdChTZXQpP1NldDpmdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXt0aGlzLnNldD1PYmplY3QuY3JlYXRlKG51bGwpfXJldHVybiB0LnByb3RvdHlwZS5oYXM9ZnVuY3Rpb24odCl7cmV0dXJuITA9PT10aGlzLnNldFt0XX0sdC5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKHQpe3RoaXMuc2V0W3RdPSEwfSx0LnByb3RvdHlwZS5jbGVhcj1mdW5jdGlvbigpe3RoaXMuc2V0PU9iamVjdC5jcmVhdGUobnVsbCl9LHR9KCk7dmFyIGR0PUksdnQ9MCxodD1mdW5jdGlvbigpe3RoaXMuaWQ9dnQrKyx0aGlzLnN1YnM9W119O2h0LnByb3RvdHlwZS5hZGRTdWI9ZnVuY3Rpb24odCl7dGhpcy5zdWJzLnB1c2godCl9LGh0LnByb3RvdHlwZS5yZW1vdmVTdWI9ZnVuY3Rpb24odCl7Zyh0aGlzLnN1YnMsdCl9LGh0LnByb3RvdHlwZS5kZXBlbmQ9ZnVuY3Rpb24oKXtodC50YXJnZXQmJmh0LnRhcmdldC5hZGREZXAodGhpcyl9LGh0LnByb3RvdHlwZS5ub3RpZnk9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLnN1YnMuc2xpY2UoKTtmb3IodmFyIGU9MCxuPXQubGVuZ3RoO2U8bjtlKyspdFtlXS51cGRhdGUoKX0saHQudGFyZ2V0PW51bGw7dmFyIG10PVtdO2Z1bmN0aW9uIHl0KHQpe210LnB1c2godCksaHQudGFyZ2V0PXR9ZnVuY3Rpb24gZ3QoKXttdC5wb3AoKSxodC50YXJnZXQ9bXRbbXQubGVuZ3RoLTFdfXZhciBfdD1mdW5jdGlvbih0LGUsbixyLG8saSxhLHMpe3RoaXMudGFnPXQsdGhpcy5kYXRhPWUsdGhpcy5jaGlsZHJlbj1uLHRoaXMudGV4dD1yLHRoaXMuZWxtPW8sdGhpcy5ucz12b2lkIDAsdGhpcy5jb250ZXh0PWksdGhpcy5mbkNvbnRleHQ9dm9pZCAwLHRoaXMuZm5PcHRpb25zPXZvaWQgMCx0aGlzLmZuU2NvcGVJZD12b2lkIDAsdGhpcy5rZXk9ZSYmZS5rZXksdGhpcy5jb21wb25lbnRPcHRpb25zPWEsdGhpcy5jb21wb25lbnRJbnN0YW5jZT12b2lkIDAsdGhpcy5wYXJlbnQ9dm9pZCAwLHRoaXMucmF3PSExLHRoaXMuaXNTdGF0aWM9ITEsdGhpcy5pc1Jvb3RJbnNlcnQ9ITAsdGhpcy5pc0NvbW1lbnQ9ITEsdGhpcy5pc0Nsb25lZD0hMSx0aGlzLmlzT25jZT0hMSx0aGlzLmFzeW5jRmFjdG9yeT1zLHRoaXMuYXN5bmNNZXRhPXZvaWQgMCx0aGlzLmlzQXN5bmNQbGFjZWhvbGRlcj0hMX0sYnQ9e2NoaWxkOntjb25maWd1cmFibGU6ITB9fTtidC5jaGlsZC5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb21wb25lbnRJbnN0YW5jZX0sT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoX3QucHJvdG90eXBlLGJ0KTt2YXIgd3Q9ZnVuY3Rpb24odCl7dm9pZCAwPT09dCYmKHQ9IiIpO3ZhciBlPW5ldyBfdDtyZXR1cm4gZS50ZXh0PXQsZS5pc0NvbW1lbnQ9ITAsZX07ZnVuY3Rpb24geHQodCl7cmV0dXJuIG5ldyBfdCh2b2lkIDAsdm9pZCAwLHZvaWQgMCxTdHJpbmcodCkpfWZ1bmN0aW9uIEN0KHQpe3ZhciBlPW5ldyBfdCh0LnRhZyx0LmRhdGEsdC5jaGlsZHJlbiYmdC5jaGlsZHJlbi5zbGljZSgpLHQudGV4dCx0LmVsbSx0LmNvbnRleHQsdC5jb21wb25lbnRPcHRpb25zLHQuYXN5bmNGYWN0b3J5KTtyZXR1cm4gZS5ucz10Lm5zLGUuaXNTdGF0aWM9dC5pc1N0YXRpYyxlLmtleT10LmtleSxlLmlzQ29tbWVudD10LmlzQ29tbWVudCxlLmZuQ29udGV4dD10LmZuQ29udGV4dCxlLmZuT3B0aW9ucz10LmZuT3B0aW9ucyxlLmZuU2NvcGVJZD10LmZuU2NvcGVJZCxlLmFzeW5jTWV0YT10LmFzeW5jTWV0YSxlLmlzQ2xvbmVkPSEwLGV9dmFyIEF0PUFycmF5LnByb3RvdHlwZSxPdD1PYmplY3QuY3JlYXRlKEF0KSxTdD1bInB1c2giLCJwb3AiLCJzaGlmdCIsInVuc2hpZnQiLCJzcGxpY2UiLCJzb3J0IiwicmV2ZXJzZSJdO1N0LmZvckVhY2goZnVuY3Rpb24odCl7dmFyIGU9QXRbdF07VihPdCx0LGZ1bmN0aW9uKCl7dmFyIG49W10scj1hcmd1bWVudHMubGVuZ3RoO3doaWxlKHItLSluW3JdPWFyZ3VtZW50c1tyXTt2YXIgbyxpPWUuYXBwbHkodGhpcyxuKSxhPXRoaXMuX19vYl9fO3N3aXRjaCh0KXtjYXNlInB1c2giOmNhc2UidW5zaGlmdCI6bz1uO2JyZWFrO2Nhc2Uic3BsaWNlIjpvPW4uc2xpY2UoMik7YnJlYWt9cmV0dXJuIG8mJmEub2JzZXJ2ZUFycmF5KG8pLGEuZGVwLm5vdGlmeSgpLGl9KX0pO3ZhciAkdD1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPdCksa3Q9ITA7ZnVuY3Rpb24gRXQodCl7a3Q9dH12YXIganQ9ZnVuY3Rpb24odCl7dGhpcy52YWx1ZT10LHRoaXMuZGVwPW5ldyBodCx0aGlzLnZtQ291bnQ9MCxWKHQsIl9fb2JfXyIsdGhpcyksQXJyYXkuaXNBcnJheSh0KT8oRz9UdCh0LE90KTpQdCh0LE90LCR0KSx0aGlzLm9ic2VydmVBcnJheSh0KSk6dGhpcy53YWxrKHQpfTtmdW5jdGlvbiBUdCh0LGUpe3QuX19wcm90b19fPWV9ZnVuY3Rpb24gUHQodCxlLG4pe2Zvcih2YXIgcj0wLG89bi5sZW5ndGg7cjxvO3IrKyl7dmFyIGk9bltyXTtWKHQsaSxlW2ldKX19ZnVuY3Rpb24gSXQodCxlKXt2YXIgbjtpZihjKHQpJiYhKHQgaW5zdGFuY2VvZiBfdCkpcmV0dXJuIGIodCwiX19vYl9fIikmJnQuX19vYl9fIGluc3RhbmNlb2YganQ/bj10Ll9fb2JfXzprdCYmIWN0KCkmJihBcnJheS5pc0FycmF5KHQpfHxmKHQpKSYmT2JqZWN0LmlzRXh0ZW5zaWJsZSh0KSYmIXQuX2lzVnVlJiYobj1uZXcganQodCkpLGUmJm4mJm4udm1Db3VudCsrLG59ZnVuY3Rpb24gTnQodCxlLG4scixvKXt2YXIgaT1uZXcgaHQsYT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsZSk7aWYoIWF8fCExIT09YS5jb25maWd1cmFibGUpe3ZhciBzPWEmJmEuZ2V0LGM9YSYmYS5zZXQ7cyYmIWN8fDIhPT1hcmd1bWVudHMubGVuZ3RofHwobj10W2VdKTt2YXIgdT0hbyYmSXQobik7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSx7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7dmFyIGU9cz9zLmNhbGwodCk6bjtyZXR1cm4gaHQudGFyZ2V0JiYoaS5kZXBlbmQoKSx1JiYodS5kZXAuZGVwZW5kKCksQXJyYXkuaXNBcnJheShlKSYmTHQoZSkpKSxlfSxzZXQ6ZnVuY3Rpb24oZSl7dmFyIHI9cz9zLmNhbGwodCk6bjtlPT09cnx8ZSE9PWUmJnIhPT1yfHxzJiYhY3x8KGM/Yy5jYWxsKHQsZSk6bj1lLHU9IW8mJkl0KGUpLGkubm90aWZ5KCkpfX0pfX1mdW5jdGlvbiBSdCh0LGUsbil7aWYoQXJyYXkuaXNBcnJheSh0KSYmcChlKSlyZXR1cm4gdC5sZW5ndGg9TWF0aC5tYXgodC5sZW5ndGgsZSksdC5zcGxpY2UoZSwxLG4pLG47aWYoZSBpbiB0JiYhKGUgaW4gT2JqZWN0LnByb3RvdHlwZSkpcmV0dXJuIHRbZV09bixuO3ZhciByPXQuX19vYl9fO3JldHVybiB0Ll9pc1Z1ZXx8ciYmci52bUNvdW50P246cj8oTnQoci52YWx1ZSxlLG4pLHIuZGVwLm5vdGlmeSgpLG4pOih0W2VdPW4sbil9ZnVuY3Rpb24gRHQodCxlKXtpZihBcnJheS5pc0FycmF5KHQpJiZwKGUpKXQuc3BsaWNlKGUsMSk7ZWxzZXt2YXIgbj10Ll9fb2JfXzt0Ll9pc1Z1ZXx8biYmbi52bUNvdW50fHxiKHQsZSkmJihkZWxldGUgdFtlXSxuJiZuLmRlcC5ub3RpZnkoKSl9fWZ1bmN0aW9uIEx0KHQpe2Zvcih2YXIgZT12b2lkIDAsbj0wLHI9dC5sZW5ndGg7bjxyO24rKyllPXRbbl0sZSYmZS5fX29iX18mJmUuX19vYl9fLmRlcC5kZXBlbmQoKSxBcnJheS5pc0FycmF5KGUpJiZMdChlKX1qdC5wcm90b3R5cGUud2Fsaz1mdW5jdGlvbih0KXtmb3IodmFyIGU9T2JqZWN0LmtleXModCksbj0wO248ZS5sZW5ndGg7bisrKU50KHQsZVtuXSl9LGp0LnByb3RvdHlwZS5vYnNlcnZlQXJyYXk9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTAsbj10Lmxlbmd0aDtlPG47ZSsrKUl0KHRbZV0pfTt2YXIgRnQ9SC5vcHRpb25NZXJnZVN0cmF0ZWdpZXM7ZnVuY3Rpb24gTXQodCxlKXtpZighZSlyZXR1cm4gdDtmb3IodmFyIG4scixvLGk9cHQ/UmVmbGVjdC5vd25LZXlzKGUpOk9iamVjdC5rZXlzKGUpLGE9MDthPGkubGVuZ3RoO2ErKyluPWlbYV0sIl9fb2JfXyIhPT1uJiYocj10W25dLG89ZVtuXSxiKHQsbik/ciE9PW8mJmYocikmJmYobykmJk10KHIsbyk6UnQodCxuLG8pKTtyZXR1cm4gdH1mdW5jdGlvbiBVdCh0LGUsbil7cmV0dXJuIG4/ZnVuY3Rpb24oKXt2YXIgcj0iZnVuY3Rpb24iPT09dHlwZW9mIGU/ZS5jYWxsKG4sbik6ZSxvPSJmdW5jdGlvbiI9PT10eXBlb2YgdD90LmNhbGwobixuKTp0O3JldHVybiByP010KHIsbyk6b306ZT90P2Z1bmN0aW9uKCl7cmV0dXJuIE10KCJmdW5jdGlvbiI9PT10eXBlb2YgZT9lLmNhbGwodGhpcyx0aGlzKTplLCJmdW5jdGlvbiI9PT10eXBlb2YgdD90LmNhbGwodGhpcyx0aGlzKTp0KX06ZTp0fWZ1bmN0aW9uIEJ0KHQsZSl7dmFyIG49ZT90P3QuY29uY2F0KGUpOkFycmF5LmlzQXJyYXkoZSk/ZTpbZV06dDtyZXR1cm4gbj9IdChuKTpufWZ1bmN0aW9uIEh0KHQpe2Zvcih2YXIgZT1bXSxuPTA7bjx0Lmxlbmd0aDtuKyspLTE9PT1lLmluZGV4T2YodFtuXSkmJmUucHVzaCh0W25dKTtyZXR1cm4gZX1mdW5jdGlvbiB6dCh0LGUsbixyKXt2YXIgbz1PYmplY3QuY3JlYXRlKHR8fG51bGwpO3JldHVybiBlP1QobyxlKTpvfUZ0LmRhdGE9ZnVuY3Rpb24odCxlLG4pe3JldHVybiBuP1V0KHQsZSxuKTplJiYiZnVuY3Rpb24iIT09dHlwZW9mIGU/dDpVdCh0LGUpfSxCLmZvckVhY2goZnVuY3Rpb24odCl7RnRbdF09QnR9KSxVLmZvckVhY2goZnVuY3Rpb24odCl7RnRbdCsicyJdPXp0fSksRnQud2F0Y2g9ZnVuY3Rpb24odCxlLG4scil7aWYodD09PWl0JiYodD12b2lkIDApLGU9PT1pdCYmKGU9dm9pZCAwKSwhZSlyZXR1cm4gT2JqZWN0LmNyZWF0ZSh0fHxudWxsKTtpZighdClyZXR1cm4gZTt2YXIgbz17fTtmb3IodmFyIGkgaW4gVChvLHQpLGUpe3ZhciBhPW9baV0scz1lW2ldO2EmJiFBcnJheS5pc0FycmF5KGEpJiYoYT1bYV0pLG9baV09YT9hLmNvbmNhdChzKTpBcnJheS5pc0FycmF5KHMpP3M6W3NdfXJldHVybiBvfSxGdC5wcm9wcz1GdC5tZXRob2RzPUZ0LmluamVjdD1GdC5jb21wdXRlZD1mdW5jdGlvbih0LGUsbixyKXtpZighdClyZXR1cm4gZTt2YXIgbz1PYmplY3QuY3JlYXRlKG51bGwpO3JldHVybiBUKG8sdCksZSYmVChvLGUpLG99LEZ0LnByb3ZpZGU9VXQ7dmFyIHF0PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHZvaWQgMD09PWU/dDplfTtmdW5jdGlvbiBWdCh0LGUpe3ZhciBuPXQucHJvcHM7aWYobil7dmFyIHIsbyxpLGE9e307aWYoQXJyYXkuaXNBcnJheShuKSl7cj1uLmxlbmd0aDt3aGlsZShyLS0pbz1uW3JdLCJzdHJpbmciPT09dHlwZW9mIG8mJihpPUMobyksYVtpXT17dHlwZTpudWxsfSl9ZWxzZSBpZihmKG4pKWZvcih2YXIgcyBpbiBuKW89bltzXSxpPUMocyksYVtpXT1mKG8pP286e3R5cGU6b307ZWxzZSAwO3QucHJvcHM9YX19ZnVuY3Rpb24gV3QodCxlKXt2YXIgbj10LmluamVjdDtpZihuKXt2YXIgcj10LmluamVjdD17fTtpZihBcnJheS5pc0FycmF5KG4pKWZvcih2YXIgbz0wO288bi5sZW5ndGg7bysrKXJbbltvXV09e2Zyb206bltvXX07ZWxzZSBpZihmKG4pKWZvcih2YXIgaSBpbiBuKXt2YXIgYT1uW2ldO3JbaV09ZihhKT9UKHtmcm9tOml9LGEpOntmcm9tOmF9fWVsc2UgMH19ZnVuY3Rpb24gS3QodCl7dmFyIGU9dC5kaXJlY3RpdmVzO2lmKGUpZm9yKHZhciBuIGluIGUpe3ZhciByPWVbbl07ImZ1bmN0aW9uIj09PXR5cGVvZiByJiYoZVtuXT17YmluZDpyLHVwZGF0ZTpyfSl9fWZ1bmN0aW9uIFh0KHQsZSxuKXtpZigiZnVuY3Rpb24iPT09dHlwZW9mIGUmJihlPWUub3B0aW9ucyksVnQoZSxuKSxXdChlLG4pLEt0KGUpLCFlLl9iYXNlJiYoZS5leHRlbmRzJiYodD1YdCh0LGUuZXh0ZW5kcyxuKSksZS5taXhpbnMpKWZvcih2YXIgcj0wLG89ZS5taXhpbnMubGVuZ3RoO3I8bztyKyspdD1YdCh0LGUubWl4aW5zW3JdLG4pO3ZhciBpLGE9e307Zm9yKGkgaW4gdClzKGkpO2ZvcihpIGluIGUpYih0LGkpfHxzKGkpO2Z1bmN0aW9uIHMocil7dmFyIG89RnRbcl18fHF0O2Fbcl09byh0W3JdLGVbcl0sbixyKX1yZXR1cm4gYX1mdW5jdGlvbiBHdCh0LGUsbixyKXtpZigic3RyaW5nIj09PXR5cGVvZiBuKXt2YXIgbz10W2VdO2lmKGIobyxuKSlyZXR1cm4gb1tuXTt2YXIgaT1DKG4pO2lmKGIobyxpKSlyZXR1cm4gb1tpXTt2YXIgYT1BKGkpO2lmKGIobyxhKSlyZXR1cm4gb1thXTt2YXIgcz1vW25dfHxvW2ldfHxvW2FdO3JldHVybiBzfX1mdW5jdGlvbiBKdCh0LGUsbixyKXt2YXIgbz1lW3RdLGk9IWIobix0KSxhPW5bdF0scz10ZShCb29sZWFuLG8udHlwZSk7aWYocz4tMSlpZihpJiYhYihvLCJkZWZhdWx0IikpYT0hMTtlbHNlIGlmKCIiPT09YXx8YT09PVModCkpe3ZhciBjPXRlKFN0cmluZyxvLnR5cGUpOyhjPDB8fHM8YykmJihhPSEwKX1pZih2b2lkIDA9PT1hKXthPVp0KHIsbyx0KTt2YXIgdT1rdDtFdCghMCksSXQoYSksRXQodSl9cmV0dXJuIGF9ZnVuY3Rpb24gWnQodCxlLG4pe2lmKGIoZSwiZGVmYXVsdCIpKXt2YXIgcj1lLmRlZmF1bHQ7cmV0dXJuIHQmJnQuJG9wdGlvbnMucHJvcHNEYXRhJiZ2b2lkIDA9PT10LiRvcHRpb25zLnByb3BzRGF0YVtuXSYmdm9pZCAwIT09dC5fcHJvcHNbbl0/dC5fcHJvcHNbbl06ImZ1bmN0aW9uIj09PXR5cGVvZiByJiYiRnVuY3Rpb24iIT09UXQoZS50eXBlKT9yLmNhbGwodCk6cn19ZnVuY3Rpb24gUXQodCl7dmFyIGU9dCYmdC50b1N0cmluZygpLm1hdGNoKC9eXHMqZnVuY3Rpb24gKFx3KykvKTtyZXR1cm4gZT9lWzFdOiIifWZ1bmN0aW9uIFl0KHQsZSl7cmV0dXJuIFF0KHQpPT09UXQoZSl9ZnVuY3Rpb24gdGUodCxlKXtpZighQXJyYXkuaXNBcnJheShlKSlyZXR1cm4gWXQoZSx0KT8wOi0xO2Zvcih2YXIgbj0wLHI9ZS5sZW5ndGg7bjxyO24rKylpZihZdChlW25dLHQpKXJldHVybiBuO3JldHVybi0xfWZ1bmN0aW9uIGVlKHQsZSxuKXt5dCgpO3RyeXtpZihlKXt2YXIgcj1lO3doaWxlKHI9ci4kcGFyZW50KXt2YXIgbz1yLiRvcHRpb25zLmVycm9yQ2FwdHVyZWQ7aWYobylmb3IodmFyIGk9MDtpPG8ubGVuZ3RoO2krKyl0cnl7dmFyIGE9ITE9PT1vW2ldLmNhbGwocix0LGUsbik7aWYoYSlyZXR1cm59Y2F0Y2goQ2Epe3JlKENhLHIsImVycm9yQ2FwdHVyZWQgaG9vayIpfX19cmUodCxlLG4pfWZpbmFsbHl7Z3QoKX19ZnVuY3Rpb24gbmUodCxlLG4scixvKXt2YXIgaTt0cnl7aT1uP3QuYXBwbHkoZSxuKTp0LmNhbGwoZSksaSYmIWkuX2lzVnVlJiZkKGkpJiYhaS5faGFuZGxlZCYmKGkuY2F0Y2goZnVuY3Rpb24odCl7cmV0dXJuIGVlKHQscixvKyIgKFByb21pc2UvYXN5bmMpIil9KSxpLl9oYW5kbGVkPSEwKX1jYXRjaChDYSl7ZWUoQ2EscixvKX1yZXR1cm4gaX1mdW5jdGlvbiByZSh0LGUsbil7aWYoSC5lcnJvckhhbmRsZXIpdHJ5e3JldHVybiBILmVycm9ySGFuZGxlci5jYWxsKG51bGwsdCxlLG4pfWNhdGNoKENhKXtDYSE9PXQmJm9lKENhLG51bGwsImNvbmZpZy5lcnJvckhhbmRsZXIiKX1vZSh0LGUsbil9ZnVuY3Rpb24gb2UodCxlLG4pe2lmKCFKJiYhWnx8InVuZGVmaW5lZCI9PT10eXBlb2YgY29uc29sZSl0aHJvdyB0O2NvbnNvbGUuZXJyb3IodCl9dmFyIGllLGFlPSExLHNlPVtdLGNlPSExO2Z1bmN0aW9uIHVlKCl7Y2U9ITE7dmFyIHQ9c2Uuc2xpY2UoMCk7c2UubGVuZ3RoPTA7Zm9yKHZhciBlPTA7ZTx0Lmxlbmd0aDtlKyspdFtlXSgpfWlmKCJ1bmRlZmluZWQiIT09dHlwZW9mIFByb21pc2UmJmZ0KFByb21pc2UpKXt2YXIgZmU9UHJvbWlzZS5yZXNvbHZlKCk7aWU9ZnVuY3Rpb24oKXtmZS50aGVuKHVlKSxydCYmc2V0VGltZW91dChJKX0sYWU9ITB9ZWxzZSBpZih0dHx8InVuZGVmaW5lZCI9PT10eXBlb2YgTXV0YXRpb25PYnNlcnZlcnx8IWZ0KE11dGF0aW9uT2JzZXJ2ZXIpJiYiW29iamVjdCBNdXRhdGlvbk9ic2VydmVyQ29uc3RydWN0b3JdIiE9PU11dGF0aW9uT2JzZXJ2ZXIudG9TdHJpbmcoKSlpZT0idW5kZWZpbmVkIiE9PXR5cGVvZiBzZXRJbW1lZGlhdGUmJmZ0KHNldEltbWVkaWF0ZSk/ZnVuY3Rpb24oKXtzZXRJbW1lZGlhdGUodWUpfTpmdW5jdGlvbigpe3NldFRpbWVvdXQodWUsMCl9O2Vsc2V7dmFyIGxlPTEscGU9bmV3IE11dGF0aW9uT2JzZXJ2ZXIodWUpLGRlPWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFN0cmluZyhsZSkpO3BlLm9ic2VydmUoZGUse2NoYXJhY3RlckRhdGE6ITB9KSxpZT1mdW5jdGlvbigpe2xlPShsZSsxKSUyLGRlLmRhdGE9U3RyaW5nKGxlKX0sYWU9ITB9ZnVuY3Rpb24gdmUodCxlKXt2YXIgbjtpZihzZS5wdXNoKGZ1bmN0aW9uKCl7aWYodCl0cnl7dC5jYWxsKGUpfWNhdGNoKENhKXtlZShDYSxlLCJuZXh0VGljayIpfWVsc2UgbiYmbihlKX0pLGNlfHwoY2U9ITAsaWUoKSksIXQmJiJ1bmRlZmluZWQiIT09dHlwZW9mIFByb21pc2UpcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHQpe249dH0pfXZhciBoZT1uZXcgbHQ7ZnVuY3Rpb24gbWUodCl7eWUodCxoZSksaGUuY2xlYXIoKX1mdW5jdGlvbiB5ZSh0LGUpe3ZhciBuLHIsbz1BcnJheS5pc0FycmF5KHQpO2lmKCEoIW8mJiFjKHQpfHxPYmplY3QuaXNGcm96ZW4odCl8fHQgaW5zdGFuY2VvZiBfdCkpe2lmKHQuX19vYl9fKXt2YXIgaT10Ll9fb2JfXy5kZXAuaWQ7aWYoZS5oYXMoaSkpcmV0dXJuO2UuYWRkKGkpfWlmKG8pe249dC5sZW5ndGg7d2hpbGUobi0tKXllKHRbbl0sZSl9ZWxzZXtyPU9iamVjdC5rZXlzKHQpLG49ci5sZW5ndGg7d2hpbGUobi0tKXllKHRbcltuXV0sZSl9fX12YXIgZ2U9dyhmdW5jdGlvbih0KXt2YXIgZT0iJiI9PT10LmNoYXJBdCgwKTt0PWU/dC5zbGljZSgxKTp0O3ZhciBuPSJ+Ij09PXQuY2hhckF0KDApO3Q9bj90LnNsaWNlKDEpOnQ7dmFyIHI9IiEiPT09dC5jaGFyQXQoMCk7cmV0dXJuIHQ9cj90LnNsaWNlKDEpOnQse25hbWU6dCxvbmNlOm4sY2FwdHVyZTpyLHBhc3NpdmU6ZX19KTtmdW5jdGlvbiBfZSh0LGUpe2Z1bmN0aW9uIG4oKXt2YXIgdD1hcmd1bWVudHMscj1uLmZucztpZighQXJyYXkuaXNBcnJheShyKSlyZXR1cm4gbmUocixudWxsLGFyZ3VtZW50cyxlLCJ2LW9uIGhhbmRsZXIiKTtmb3IodmFyIG89ci5zbGljZSgpLGk9MDtpPG8ubGVuZ3RoO2krKyluZShvW2ldLG51bGwsdCxlLCJ2LW9uIGhhbmRsZXIiKX1yZXR1cm4gbi5mbnM9dCxufWZ1bmN0aW9uIGJlKHQsZSxuLG8sYSxzKXt2YXIgYyx1LGYsbDtmb3IoYyBpbiB0KXU9dFtjXSxmPWVbY10sbD1nZShjKSxyKHUpfHwocihmKT8ocih1LmZucykmJih1PXRbY109X2UodSxzKSksaShsLm9uY2UpJiYodT10W2NdPWEobC5uYW1lLHUsbC5jYXB0dXJlKSksbihsLm5hbWUsdSxsLmNhcHR1cmUsbC5wYXNzaXZlLGwucGFyYW1zKSk6dSE9PWYmJihmLmZucz11LHRbY109ZikpO2ZvcihjIGluIGUpcih0W2NdKSYmKGw9Z2UoYyksbyhsLm5hbWUsZVtjXSxsLmNhcHR1cmUpKX1mdW5jdGlvbiB3ZSh0LGUsbil7dmFyIGE7dCBpbnN0YW5jZW9mIF90JiYodD10LmRhdGEuaG9va3x8KHQuZGF0YS5ob29rPXt9KSk7dmFyIHM9dFtlXTtmdW5jdGlvbiBjKCl7bi5hcHBseSh0aGlzLGFyZ3VtZW50cyksZyhhLmZucyxjKX1yKHMpP2E9X2UoW2NdKTpvKHMuZm5zKSYmaShzLm1lcmdlZCk/KGE9cyxhLmZucy5wdXNoKGMpKTphPV9lKFtzLGNdKSxhLm1lcmdlZD0hMCx0W2VdPWF9ZnVuY3Rpb24geGUodCxlLG4pe3ZhciBpPWUub3B0aW9ucy5wcm9wcztpZighcihpKSl7dmFyIGE9e30scz10LmF0dHJzLGM9dC5wcm9wcztpZihvKHMpfHxvKGMpKWZvcih2YXIgdSBpbiBpKXt2YXIgZj1TKHUpO0NlKGEsYyx1LGYsITApfHxDZShhLHMsdSxmLCExKX1yZXR1cm4gYX19ZnVuY3Rpb24gQ2UodCxlLG4scixpKXtpZihvKGUpKXtpZihiKGUsbikpcmV0dXJuIHRbbl09ZVtuXSxpfHxkZWxldGUgZVtuXSwhMDtpZihiKGUscikpcmV0dXJuIHRbbl09ZVtyXSxpfHxkZWxldGUgZVtyXSwhMH1yZXR1cm4hMX1mdW5jdGlvbiBBZSh0KXtmb3IodmFyIGU9MDtlPHQubGVuZ3RoO2UrKylpZihBcnJheS5pc0FycmF5KHRbZV0pKXJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLHQpO3JldHVybiB0fWZ1bmN0aW9uIE9lKHQpe3JldHVybiBzKHQpP1t4dCh0KV06QXJyYXkuaXNBcnJheSh0KT8kZSh0KTp2b2lkIDB9ZnVuY3Rpb24gU2UodCl7cmV0dXJuIG8odCkmJm8odC50ZXh0KSYmYSh0LmlzQ29tbWVudCl9ZnVuY3Rpb24gJGUodCxlKXt2YXIgbixhLGMsdSxmPVtdO2ZvcihuPTA7bjx0Lmxlbmd0aDtuKyspYT10W25dLHIoYSl8fCJib29sZWFuIj09PXR5cGVvZiBhfHwoYz1mLmxlbmd0aC0xLHU9ZltjXSxBcnJheS5pc0FycmF5KGEpP2EubGVuZ3RoPjAmJihhPSRlKGEsKGV8fCIiKSsiXyIrbiksU2UoYVswXSkmJlNlKHUpJiYoZltjXT14dCh1LnRleHQrYVswXS50ZXh0KSxhLnNoaWZ0KCkpLGYucHVzaC5hcHBseShmLGEpKTpzKGEpP1NlKHUpP2ZbY109eHQodS50ZXh0K2EpOiIiIT09YSYmZi5wdXNoKHh0KGEpKTpTZShhKSYmU2UodSk/ZltjXT14dCh1LnRleHQrYS50ZXh0KTooaSh0Ll9pc1ZMaXN0KSYmbyhhLnRhZykmJnIoYS5rZXkpJiZvKGUpJiYoYS5rZXk9Il9fdmxpc3QiK2UrIl8iK24rIl9fIiksZi5wdXNoKGEpKSk7cmV0dXJuIGZ9ZnVuY3Rpb24ga2UodCl7dmFyIGU9dC4kb3B0aW9ucy5wcm92aWRlO2UmJih0Ll9wcm92aWRlZD0iZnVuY3Rpb24iPT09dHlwZW9mIGU/ZS5jYWxsKHQpOmUpfWZ1bmN0aW9uIEVlKHQpe3ZhciBlPWplKHQuJG9wdGlvbnMuaW5qZWN0LHQpO2UmJihFdCghMSksT2JqZWN0LmtleXMoZSkuZm9yRWFjaChmdW5jdGlvbihuKXtOdCh0LG4sZVtuXSl9KSxFdCghMCkpfWZ1bmN0aW9uIGplKHQsZSl7aWYodCl7Zm9yKHZhciBuPU9iamVjdC5jcmVhdGUobnVsbCkscj1wdD9SZWZsZWN0Lm93bktleXModCk6T2JqZWN0LmtleXModCksbz0wO288ci5sZW5ndGg7bysrKXt2YXIgaT1yW29dO2lmKCJfX29iX18iIT09aSl7dmFyIGE9dFtpXS5mcm9tLHM9ZTt3aGlsZShzKXtpZihzLl9wcm92aWRlZCYmYihzLl9wcm92aWRlZCxhKSl7bltpXT1zLl9wcm92aWRlZFthXTticmVha31zPXMuJHBhcmVudH1pZighcylpZigiZGVmYXVsdCJpbiB0W2ldKXt2YXIgYz10W2ldLmRlZmF1bHQ7bltpXT0iZnVuY3Rpb24iPT09dHlwZW9mIGM/Yy5jYWxsKGUpOmN9ZWxzZSAwfX1yZXR1cm4gbn19ZnVuY3Rpb24gVGUodCxlKXtpZighdHx8IXQubGVuZ3RoKXJldHVybnt9O2Zvcih2YXIgbj17fSxyPTAsbz10Lmxlbmd0aDtyPG87cisrKXt2YXIgaT10W3JdLGE9aS5kYXRhO2lmKGEmJmEuYXR0cnMmJmEuYXR0cnMuc2xvdCYmZGVsZXRlIGEuYXR0cnMuc2xvdCxpLmNvbnRleHQhPT1lJiZpLmZuQ29udGV4dCE9PWV8fCFhfHxudWxsPT1hLnNsb3QpKG4uZGVmYXVsdHx8KG4uZGVmYXVsdD1bXSkpLnB1c2goaSk7ZWxzZXt2YXIgcz1hLnNsb3QsYz1uW3NdfHwobltzXT1bXSk7InRlbXBsYXRlIj09PWkudGFnP2MucHVzaC5hcHBseShjLGkuY2hpbGRyZW58fFtdKTpjLnB1c2goaSl9fWZvcih2YXIgdSBpbiBuKW5bdV0uZXZlcnkoUGUpJiZkZWxldGUgblt1XTtyZXR1cm4gbn1mdW5jdGlvbiBQZSh0KXtyZXR1cm4gdC5pc0NvbW1lbnQmJiF0LmFzeW5jRmFjdG9yeXx8IiAiPT09dC50ZXh0fWZ1bmN0aW9uIEllKHQsZSxyKXt2YXIgbyxpPU9iamVjdC5rZXlzKGUpLmxlbmd0aD4wLGE9dD8hIXQuJHN0YWJsZTohaSxzPXQmJnQuJGtleTtpZih0KXtpZih0Ll9ub3JtYWxpemVkKXJldHVybiB0Ll9ub3JtYWxpemVkO2lmKGEmJnImJnIhPT1uJiZzPT09ci4ka2V5JiYhaSYmIXIuJGhhc05vcm1hbClyZXR1cm4gcjtmb3IodmFyIGMgaW4gbz17fSx0KXRbY10mJiIkIiE9PWNbMF0mJihvW2NdPU5lKGUsYyx0W2NdKSl9ZWxzZSBvPXt9O2Zvcih2YXIgdSBpbiBlKXUgaW4gb3x8KG9bdV09UmUoZSx1KSk7cmV0dXJuIHQmJk9iamVjdC5pc0V4dGVuc2libGUodCkmJih0Ll9ub3JtYWxpemVkPW8pLFYobywiJHN0YWJsZSIsYSksVihvLCIka2V5IixzKSxWKG8sIiRoYXNOb3JtYWwiLGkpLG99ZnVuY3Rpb24gTmUodCxlLG4pe3ZhciByPWZ1bmN0aW9uKCl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD9uLmFwcGx5KG51bGwsYXJndW1lbnRzKTpuKHt9KTtyZXR1cm4gdD10JiYib2JqZWN0Ij09PXR5cGVvZiB0JiYhQXJyYXkuaXNBcnJheSh0KT9bdF06T2UodCksdCYmKDA9PT10Lmxlbmd0aHx8MT09PXQubGVuZ3RoJiZ0WzBdLmlzQ29tbWVudCk/dm9pZCAwOnR9O3JldHVybiBuLnByb3h5JiZPYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLHtnZXQ6cixlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLHJ9ZnVuY3Rpb24gUmUodCxlKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdFtlXX19ZnVuY3Rpb24gRGUodCxlKXt2YXIgbixyLGksYSxzO2lmKEFycmF5LmlzQXJyYXkodCl8fCJzdHJpbmciPT09dHlwZW9mIHQpZm9yKG49bmV3IEFycmF5KHQubGVuZ3RoKSxyPTAsaT10Lmxlbmd0aDtyPGk7cisrKW5bcl09ZSh0W3JdLHIpO2Vsc2UgaWYoIm51bWJlciI9PT10eXBlb2YgdClmb3Iobj1uZXcgQXJyYXkodCkscj0wO3I8dDtyKyspbltyXT1lKHIrMSxyKTtlbHNlIGlmKGModCkpaWYocHQmJnRbU3ltYm9sLml0ZXJhdG9yXSl7bj1bXTt2YXIgdT10W1N5bWJvbC5pdGVyYXRvcl0oKSxmPXUubmV4dCgpO3doaWxlKCFmLmRvbmUpbi5wdXNoKGUoZi52YWx1ZSxuLmxlbmd0aCkpLGY9dS5uZXh0KCl9ZWxzZSBmb3IoYT1PYmplY3Qua2V5cyh0KSxuPW5ldyBBcnJheShhLmxlbmd0aCkscj0wLGk9YS5sZW5ndGg7cjxpO3IrKylzPWFbcl0sbltyXT1lKHRbc10scyxyKTtyZXR1cm4gbyhuKXx8KG49W10pLG4uX2lzVkxpc3Q9ITAsbn1mdW5jdGlvbiBMZSh0LGUsbixyKXt2YXIgbyxpPXRoaXMuJHNjb3BlZFNsb3RzW3RdO2k/KG49bnx8e30sciYmKG49VChUKHt9LHIpLG4pKSxvPWkobil8fGUpOm89dGhpcy4kc2xvdHNbdF18fGU7dmFyIGE9biYmbi5zbG90O3JldHVybiBhP3RoaXMuJGNyZWF0ZUVsZW1lbnQoInRlbXBsYXRlIix7c2xvdDphfSxvKTpvfWZ1bmN0aW9uIEZlKHQpe3JldHVybiBHdCh0aGlzLiRvcHRpb25zLCJmaWx0ZXJzIix0LCEwKXx8Un1mdW5jdGlvbiBNZSh0LGUpe3JldHVybiBBcnJheS5pc0FycmF5KHQpPy0xPT09dC5pbmRleE9mKGUpOnQhPT1lfWZ1bmN0aW9uIFVlKHQsZSxuLHIsbyl7dmFyIGk9SC5rZXlDb2Rlc1tlXXx8bjtyZXR1cm4gbyYmciYmIUgua2V5Q29kZXNbZV0/TWUobyxyKTppP01lKGksdCk6cj9TKHIpIT09ZTp2b2lkIDB9ZnVuY3Rpb24gQmUodCxlLG4scixvKXtpZihuKWlmKGMobikpe3ZhciBpO0FycmF5LmlzQXJyYXkobikmJihuPVAobikpO3ZhciBhPWZ1bmN0aW9uKGEpe2lmKCJjbGFzcyI9PT1hfHwic3R5bGUiPT09YXx8eShhKSlpPXQ7ZWxzZXt2YXIgcz10LmF0dHJzJiZ0LmF0dHJzLnR5cGU7aT1yfHxILm11c3RVc2VQcm9wKGUscyxhKT90LmRvbVByb3BzfHwodC5kb21Qcm9wcz17fSk6dC5hdHRyc3x8KHQuYXR0cnM9e30pfXZhciBjPUMoYSksdT1TKGEpO2lmKCEoYyBpbiBpKSYmISh1IGluIGkpJiYoaVthXT1uW2FdLG8pKXt2YXIgZj10Lm9ufHwodC5vbj17fSk7ZlsidXBkYXRlOiIrYV09ZnVuY3Rpb24odCl7blthXT10fX19O2Zvcih2YXIgcyBpbiBuKWEocyl9ZWxzZTtyZXR1cm4gdH1mdW5jdGlvbiBIZSh0LGUpe3ZhciBuPXRoaXMuX3N0YXRpY1RyZWVzfHwodGhpcy5fc3RhdGljVHJlZXM9W10pLHI9blt0XTtyZXR1cm4gciYmIWU/cjoocj1uW3RdPXRoaXMuJG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zW3RdLmNhbGwodGhpcy5fcmVuZGVyUHJveHksbnVsbCx0aGlzKSxxZShyLCJfX3N0YXRpY19fIit0LCExKSxyKX1mdW5jdGlvbiB6ZSh0LGUsbil7cmV0dXJuIHFlKHQsIl9fb25jZV9fIitlKyhuPyJfIituOiIiKSwhMCksdH1mdW5jdGlvbiBxZSh0LGUsbil7aWYoQXJyYXkuaXNBcnJheSh0KSlmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl0W3JdJiYic3RyaW5nIiE9PXR5cGVvZiB0W3JdJiZWZSh0W3JdLGUrIl8iK3Isbik7ZWxzZSBWZSh0LGUsbil9ZnVuY3Rpb24gVmUodCxlLG4pe3QuaXNTdGF0aWM9ITAsdC5rZXk9ZSx0LmlzT25jZT1ufWZ1bmN0aW9uIFdlKHQsZSl7aWYoZSlpZihmKGUpKXt2YXIgbj10Lm9uPXQub24/VCh7fSx0Lm9uKTp7fTtmb3IodmFyIHIgaW4gZSl7dmFyIG89bltyXSxpPWVbcl07bltyXT1vP1tdLmNvbmNhdChvLGkpOml9fWVsc2U7cmV0dXJuIHR9ZnVuY3Rpb24gS2UodCxlLG4scil7ZT1lfHx7JHN0YWJsZTohbn07Zm9yKHZhciBvPTA7bzx0Lmxlbmd0aDtvKyspe3ZhciBpPXRbb107QXJyYXkuaXNBcnJheShpKT9LZShpLGUsbik6aSYmKGkucHJveHkmJihpLmZuLnByb3h5PSEwKSxlW2kua2V5XT1pLmZuKX1yZXR1cm4gciYmKGUuJGtleT1yKSxlfWZ1bmN0aW9uIFhlKHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKz0yKXt2YXIgcj1lW25dOyJzdHJpbmciPT09dHlwZW9mIHImJnImJih0W2Vbbl1dPWVbbisxXSl9cmV0dXJuIHR9ZnVuY3Rpb24gR2UodCxlKXtyZXR1cm4ic3RyaW5nIj09PXR5cGVvZiB0P2UrdDp0fWZ1bmN0aW9uIEplKHQpe3QuX289emUsdC5fbj1oLHQuX3M9dix0Ll9sPURlLHQuX3Q9TGUsdC5fcT1ELHQuX2k9TCx0Ll9tPUhlLHQuX2Y9RmUsdC5faz1VZSx0Ll9iPUJlLHQuX3Y9eHQsdC5fZT13dCx0Ll91PUtlLHQuX2c9V2UsdC5fZD1YZSx0Ll9wPUdlfWZ1bmN0aW9uIFplKHQsZSxyLG8sYSl7dmFyIHMsYz10aGlzLHU9YS5vcHRpb25zO2IobywiX3VpZCIpPyhzPU9iamVjdC5jcmVhdGUobykscy5fb3JpZ2luYWw9byk6KHM9byxvPW8uX29yaWdpbmFsKTt2YXIgZj1pKHUuX2NvbXBpbGVkKSxsPSFmO3RoaXMuZGF0YT10LHRoaXMucHJvcHM9ZSx0aGlzLmNoaWxkcmVuPXIsdGhpcy5wYXJlbnQ9byx0aGlzLmxpc3RlbmVycz10Lm9ufHxuLHRoaXMuaW5qZWN0aW9ucz1qZSh1LmluamVjdCxvKSx0aGlzLnNsb3RzPWZ1bmN0aW9uKCl7cmV0dXJuIGMuJHNsb3RzfHxJZSh0LnNjb3BlZFNsb3RzLGMuJHNsb3RzPVRlKHIsbykpLGMuJHNsb3RzfSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywic2NvcGVkU2xvdHMiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBJZSh0LnNjb3BlZFNsb3RzLHRoaXMuc2xvdHMoKSl9fSksZiYmKHRoaXMuJG9wdGlvbnM9dSx0aGlzLiRzbG90cz10aGlzLnNsb3RzKCksdGhpcy4kc2NvcGVkU2xvdHM9SWUodC5zY29wZWRTbG90cyx0aGlzLiRzbG90cykpLHUuX3Njb3BlSWQ/dGhpcy5fYz1mdW5jdGlvbih0LGUsbixyKXt2YXIgaT1sbihzLHQsZSxuLHIsbCk7cmV0dXJuIGkmJiFBcnJheS5pc0FycmF5KGkpJiYoaS5mblNjb3BlSWQ9dS5fc2NvcGVJZCxpLmZuQ29udGV4dD1vKSxpfTp0aGlzLl9jPWZ1bmN0aW9uKHQsZSxuLHIpe3JldHVybiBsbihzLHQsZSxuLHIsbCl9fWZ1bmN0aW9uIFFlKHQsZSxyLGksYSl7dmFyIHM9dC5vcHRpb25zLGM9e30sdT1zLnByb3BzO2lmKG8odSkpZm9yKHZhciBmIGluIHUpY1tmXT1KdChmLHUsZXx8bik7ZWxzZSBvKHIuYXR0cnMpJiZ0bihjLHIuYXR0cnMpLG8oci5wcm9wcykmJnRuKGMsci5wcm9wcyk7dmFyIGw9bmV3IFplKHIsYyxhLGksdCkscD1zLnJlbmRlci5jYWxsKG51bGwsbC5fYyxsKTtpZihwIGluc3RhbmNlb2YgX3QpcmV0dXJuIFllKHAscixsLnBhcmVudCxzLGwpO2lmKEFycmF5LmlzQXJyYXkocCkpe2Zvcih2YXIgZD1PZShwKXx8W10sdj1uZXcgQXJyYXkoZC5sZW5ndGgpLGg9MDtoPGQubGVuZ3RoO2grKyl2W2hdPVllKGRbaF0scixsLnBhcmVudCxzLGwpO3JldHVybiB2fX1mdW5jdGlvbiBZZSh0LGUsbixyLG8pe3ZhciBpPUN0KHQpO3JldHVybiBpLmZuQ29udGV4dD1uLGkuZm5PcHRpb25zPXIsZS5zbG90JiYoKGkuZGF0YXx8KGkuZGF0YT17fSkpLnNsb3Q9ZS5zbG90KSxpfWZ1bmN0aW9uIHRuKHQsZSl7Zm9yKHZhciBuIGluIGUpdFtDKG4pXT1lW25dfUplKFplLnByb3RvdHlwZSk7dmFyIGVuPXtpbml0OmZ1bmN0aW9uKHQsZSl7aWYodC5jb21wb25lbnRJbnN0YW5jZSYmIXQuY29tcG9uZW50SW5zdGFuY2UuX2lzRGVzdHJveWVkJiZ0LmRhdGEua2VlcEFsaXZlKXt2YXIgbj10O2VuLnByZXBhdGNoKG4sbil9ZWxzZXt2YXIgcj10LmNvbXBvbmVudEluc3RhbmNlPW9uKHQsam4pO3IuJG1vdW50KGU/dC5lbG06dm9pZCAwLGUpfX0scHJlcGF0Y2g6ZnVuY3Rpb24odCxlKXt2YXIgbj1lLmNvbXBvbmVudE9wdGlvbnMscj1lLmNvbXBvbmVudEluc3RhbmNlPXQuY29tcG9uZW50SW5zdGFuY2U7Um4ocixuLnByb3BzRGF0YSxuLmxpc3RlbmVycyxlLG4uY2hpbGRyZW4pfSxpbnNlcnQ6ZnVuY3Rpb24odCl7dmFyIGU9dC5jb250ZXh0LG49dC5jb21wb25lbnRJbnN0YW5jZTtuLl9pc01vdW50ZWR8fChuLl9pc01vdW50ZWQ9ITAsTW4obiwibW91bnRlZCIpKSx0LmRhdGEua2VlcEFsaXZlJiYoZS5faXNNb3VudGVkP1FuKG4pOkxuKG4sITApKX0sZGVzdHJveTpmdW5jdGlvbih0KXt2YXIgZT10LmNvbXBvbmVudEluc3RhbmNlO2UuX2lzRGVzdHJveWVkfHwodC5kYXRhLmtlZXBBbGl2ZT9GbihlLCEwKTplLiRkZXN0cm95KCkpfX0sbm49T2JqZWN0LmtleXMoZW4pO2Z1bmN0aW9uIHJuKHQsZSxuLGEscyl7aWYoIXIodCkpe3ZhciB1PW4uJG9wdGlvbnMuX2Jhc2U7aWYoYyh0KSYmKHQ9dS5leHRlbmQodCkpLCJmdW5jdGlvbiI9PT10eXBlb2YgdCl7dmFyIGY7aWYocih0LmNpZCkmJihmPXQsdD13bihmLHUpLHZvaWQgMD09PXQpKXJldHVybiBibihmLGUsbixhLHMpO2U9ZXx8e30sd3IodCksbyhlLm1vZGVsKSYmY24odC5vcHRpb25zLGUpO3ZhciBsPXhlKGUsdCxzKTtpZihpKHQub3B0aW9ucy5mdW5jdGlvbmFsKSlyZXR1cm4gUWUodCxsLGUsbixhKTt2YXIgcD1lLm9uO2lmKGUub249ZS5uYXRpdmVPbixpKHQub3B0aW9ucy5hYnN0cmFjdCkpe3ZhciBkPWUuc2xvdDtlPXt9LGQmJihlLnNsb3Q9ZCl9YW4oZSk7dmFyIHY9dC5vcHRpb25zLm5hbWV8fHMsaD1uZXcgX3QoInZ1ZS1jb21wb25lbnQtIit0LmNpZCsodj8iLSIrdjoiIiksZSx2b2lkIDAsdm9pZCAwLHZvaWQgMCxuLHtDdG9yOnQscHJvcHNEYXRhOmwsbGlzdGVuZXJzOnAsdGFnOnMsY2hpbGRyZW46YX0sZik7cmV0dXJuIGh9fX1mdW5jdGlvbiBvbih0LGUpe3ZhciBuPXtfaXNDb21wb25lbnQ6ITAsX3BhcmVudFZub2RlOnQscGFyZW50OmV9LHI9dC5kYXRhLmlubGluZVRlbXBsYXRlO3JldHVybiBvKHIpJiYobi5yZW5kZXI9ci5yZW5kZXIsbi5zdGF0aWNSZW5kZXJGbnM9ci5zdGF0aWNSZW5kZXJGbnMpLG5ldyB0LmNvbXBvbmVudE9wdGlvbnMuQ3RvcihuKX1mdW5jdGlvbiBhbih0KXtmb3IodmFyIGU9dC5ob29rfHwodC5ob29rPXt9KSxuPTA7bjxubi5sZW5ndGg7bisrKXt2YXIgcj1ubltuXSxvPWVbcl0saT1lbltyXTtvPT09aXx8byYmby5fbWVyZ2VkfHwoZVtyXT1vP3NuKGksbyk6aSl9fWZ1bmN0aW9uIHNuKHQsZSl7dmFyIG49ZnVuY3Rpb24obixyKXt0KG4sciksZShuLHIpfTtyZXR1cm4gbi5fbWVyZ2VkPSEwLG59ZnVuY3Rpb24gY24odCxlKXt2YXIgbj10Lm1vZGVsJiZ0Lm1vZGVsLnByb3B8fCJ2YWx1ZSIscj10Lm1vZGVsJiZ0Lm1vZGVsLmV2ZW50fHwiaW5wdXQiOyhlLmF0dHJzfHwoZS5hdHRycz17fSkpW25dPWUubW9kZWwudmFsdWU7dmFyIGk9ZS5vbnx8KGUub249e30pLGE9aVtyXSxzPWUubW9kZWwuY2FsbGJhY2s7byhhKT8oQXJyYXkuaXNBcnJheShhKT8tMT09PWEuaW5kZXhPZihzKTphIT09cykmJihpW3JdPVtzXS5jb25jYXQoYSkpOmlbcl09c312YXIgdW49MSxmbj0yO2Z1bmN0aW9uIGxuKHQsZSxuLHIsbyxhKXtyZXR1cm4oQXJyYXkuaXNBcnJheShuKXx8cyhuKSkmJihvPXIscj1uLG49dm9pZCAwKSxpKGEpJiYobz1mbikscG4odCxlLG4scixvKX1mdW5jdGlvbiBwbih0LGUsbixyLGkpe2lmKG8obikmJm8obi5fX29iX18pKXJldHVybiB3dCgpO2lmKG8obikmJm8obi5pcykmJihlPW4uaXMpLCFlKXJldHVybiB3dCgpO3ZhciBhLHMsYzsoQXJyYXkuaXNBcnJheShyKSYmImZ1bmN0aW9uIj09PXR5cGVvZiByWzBdJiYobj1ufHx7fSxuLnNjb3BlZFNsb3RzPXtkZWZhdWx0OnJbMF19LHIubGVuZ3RoPTApLGk9PT1mbj9yPU9lKHIpOmk9PT11biYmKHI9QWUocikpLCJzdHJpbmciPT09dHlwZW9mIGUpPyhzPXQuJHZub2RlJiZ0LiR2bm9kZS5uc3x8SC5nZXRUYWdOYW1lc3BhY2UoZSksYT1ILmlzUmVzZXJ2ZWRUYWcoZSk/bmV3IF90KEgucGFyc2VQbGF0Zm9ybVRhZ05hbWUoZSksbixyLHZvaWQgMCx2b2lkIDAsdCk6biYmbi5wcmV8fCFvKGM9R3QodC4kb3B0aW9ucywiY29tcG9uZW50cyIsZSkpP25ldyBfdChlLG4scix2b2lkIDAsdm9pZCAwLHQpOnJuKGMsbix0LHIsZSkpOmE9cm4oZSxuLHQscik7cmV0dXJuIEFycmF5LmlzQXJyYXkoYSk/YTpvKGEpPyhvKHMpJiZkbihhLHMpLG8obikmJnZuKG4pLGEpOnd0KCl9ZnVuY3Rpb24gZG4odCxlLG4pe2lmKHQubnM9ZSwiZm9yZWlnbk9iamVjdCI9PT10LnRhZyYmKGU9dm9pZCAwLG49ITApLG8odC5jaGlsZHJlbikpZm9yKHZhciBhPTAscz10LmNoaWxkcmVuLmxlbmd0aDthPHM7YSsrKXt2YXIgYz10LmNoaWxkcmVuW2FdO28oYy50YWcpJiYocihjLm5zKXx8aShuKSYmInN2ZyIhPT1jLnRhZykmJmRuKGMsZSxuKX19ZnVuY3Rpb24gdm4odCl7Yyh0LnN0eWxlKSYmbWUodC5zdHlsZSksYyh0LmNsYXNzKSYmbWUodC5jbGFzcyl9ZnVuY3Rpb24gaG4odCl7dC5fdm5vZGU9bnVsbCx0Ll9zdGF0aWNUcmVlcz1udWxsO3ZhciBlPXQuJG9wdGlvbnMscj10LiR2bm9kZT1lLl9wYXJlbnRWbm9kZSxvPXImJnIuY29udGV4dDt0LiRzbG90cz1UZShlLl9yZW5kZXJDaGlsZHJlbixvKSx0LiRzY29wZWRTbG90cz1uLHQuX2M9ZnVuY3Rpb24oZSxuLHIsbyl7cmV0dXJuIGxuKHQsZSxuLHIsbywhMSl9LHQuJGNyZWF0ZUVsZW1lbnQ9ZnVuY3Rpb24oZSxuLHIsbyl7cmV0dXJuIGxuKHQsZSxuLHIsbywhMCl9O3ZhciBpPXImJnIuZGF0YTtOdCh0LCIkYXR0cnMiLGkmJmkuYXR0cnN8fG4sbnVsbCwhMCksTnQodCwiJGxpc3RlbmVycyIsZS5fcGFyZW50TGlzdGVuZXJzfHxuLG51bGwsITApfXZhciBtbix5bj1udWxsO2Z1bmN0aW9uIGduKHQpe0plKHQucHJvdG90eXBlKSx0LnByb3RvdHlwZS4kbmV4dFRpY2s9ZnVuY3Rpb24odCl7cmV0dXJuIHZlKHQsdGhpcyl9LHQucHJvdG90eXBlLl9yZW5kZXI9ZnVuY3Rpb24oKXt2YXIgdCxlPXRoaXMsbj1lLiRvcHRpb25zLHI9bi5yZW5kZXIsbz1uLl9wYXJlbnRWbm9kZTtvJiYoZS4kc2NvcGVkU2xvdHM9SWUoby5kYXRhLnNjb3BlZFNsb3RzLGUuJHNsb3RzLGUuJHNjb3BlZFNsb3RzKSksZS4kdm5vZGU9bzt0cnl7eW49ZSx0PXIuY2FsbChlLl9yZW5kZXJQcm94eSxlLiRjcmVhdGVFbGVtZW50KX1jYXRjaChDYSl7ZWUoQ2EsZSwicmVuZGVyIiksdD1lLl92bm9kZX1maW5hbGx5e3luPW51bGx9cmV0dXJuIEFycmF5LmlzQXJyYXkodCkmJjE9PT10Lmxlbmd0aCYmKHQ9dFswXSksdCBpbnN0YW5jZW9mIF90fHwodD13dCgpKSx0LnBhcmVudD1vLHR9fWZ1bmN0aW9uIF9uKHQsZSl7cmV0dXJuKHQuX19lc01vZHVsZXx8cHQmJiJNb2R1bGUiPT09dFtTeW1ib2wudG9TdHJpbmdUYWddKSYmKHQ9dC5kZWZhdWx0KSxjKHQpP2UuZXh0ZW5kKHQpOnR9ZnVuY3Rpb24gYm4odCxlLG4scixvKXt2YXIgaT13dCgpO3JldHVybiBpLmFzeW5jRmFjdG9yeT10LGkuYXN5bmNNZXRhPXtkYXRhOmUsY29udGV4dDpuLGNoaWxkcmVuOnIsdGFnOm99LGl9ZnVuY3Rpb24gd24odCxlKXtpZihpKHQuZXJyb3IpJiZvKHQuZXJyb3JDb21wKSlyZXR1cm4gdC5lcnJvckNvbXA7aWYobyh0LnJlc29sdmVkKSlyZXR1cm4gdC5yZXNvbHZlZDt2YXIgbj15bjtpZihuJiZvKHQub3duZXJzKSYmLTE9PT10Lm93bmVycy5pbmRleE9mKG4pJiZ0Lm93bmVycy5wdXNoKG4pLGkodC5sb2FkaW5nKSYmbyh0LmxvYWRpbmdDb21wKSlyZXR1cm4gdC5sb2FkaW5nQ29tcDtpZihuJiYhbyh0Lm93bmVycykpe3ZhciBhPXQub3duZXJzPVtuXSxzPSEwLHU9bnVsbCxmPW51bGw7bi4kb24oImhvb2s6ZGVzdHJveWVkIixmdW5jdGlvbigpe3JldHVybiBnKGEsbil9KTt2YXIgbD1mdW5jdGlvbih0KXtmb3IodmFyIGU9MCxuPWEubGVuZ3RoO2U8bjtlKyspYVtlXS4kZm9yY2VVcGRhdGUoKTt0JiYoYS5sZW5ndGg9MCxudWxsIT09dSYmKGNsZWFyVGltZW91dCh1KSx1PW51bGwpLG51bGwhPT1mJiYoY2xlYXJUaW1lb3V0KGYpLGY9bnVsbCkpfSxwPUYoZnVuY3Rpb24obil7dC5yZXNvbHZlZD1fbihuLGUpLHM/YS5sZW5ndGg9MDpsKCEwKX0pLHY9RihmdW5jdGlvbihlKXtvKHQuZXJyb3JDb21wKSYmKHQuZXJyb3I9ITAsbCghMCkpfSksaD10KHAsdik7cmV0dXJuIGMoaCkmJihkKGgpP3IodC5yZXNvbHZlZCkmJmgudGhlbihwLHYpOmQoaC5jb21wb25lbnQpJiYoaC5jb21wb25lbnQudGhlbihwLHYpLG8oaC5lcnJvcikmJih0LmVycm9yQ29tcD1fbihoLmVycm9yLGUpKSxvKGgubG9hZGluZykmJih0LmxvYWRpbmdDb21wPV9uKGgubG9hZGluZyxlKSwwPT09aC5kZWxheT90LmxvYWRpbmc9ITA6dT1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dT1udWxsLHIodC5yZXNvbHZlZCkmJnIodC5lcnJvcikmJih0LmxvYWRpbmc9ITAsbCghMSkpfSxoLmRlbGF5fHwyMDApKSxvKGgudGltZW91dCkmJihmPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtmPW51bGwscih0LnJlc29sdmVkKSYmdihudWxsKX0saC50aW1lb3V0KSkpKSxzPSExLHQubG9hZGluZz90LmxvYWRpbmdDb21wOnQucmVzb2x2ZWR9fWZ1bmN0aW9uIHhuKHQpe3JldHVybiB0LmlzQ29tbWVudCYmdC5hc3luY0ZhY3Rvcnl9ZnVuY3Rpb24gQ24odCl7aWYoQXJyYXkuaXNBcnJheSh0KSlmb3IodmFyIGU9MDtlPHQubGVuZ3RoO2UrKyl7dmFyIG49dFtlXTtpZihvKG4pJiYobyhuLmNvbXBvbmVudE9wdGlvbnMpfHx4bihuKSkpcmV0dXJuIG59fWZ1bmN0aW9uIEFuKHQpe3QuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpLHQuX2hhc0hvb2tFdmVudD0hMTt2YXIgZT10LiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7ZSYma24odCxlKX1mdW5jdGlvbiBPbih0LGUpe21uLiRvbih0LGUpfWZ1bmN0aW9uIFNuKHQsZSl7bW4uJG9mZih0LGUpfWZ1bmN0aW9uICRuKHQsZSl7dmFyIG49bW47cmV0dXJuIGZ1bmN0aW9uIHIoKXt2YXIgbz1lLmFwcGx5KG51bGwsYXJndW1lbnRzKTtudWxsIT09byYmbi4kb2ZmKHQscil9fWZ1bmN0aW9uIGtuKHQsZSxuKXttbj10LGJlKGUsbnx8e30sT24sU24sJG4sdCksbW49dm9pZCAwfWZ1bmN0aW9uIEVuKHQpe3ZhciBlPS9eaG9vazovO3QucHJvdG90eXBlLiRvbj1mdW5jdGlvbih0LG4pe3ZhciByPXRoaXM7aWYoQXJyYXkuaXNBcnJheSh0KSlmb3IodmFyIG89MCxpPXQubGVuZ3RoO288aTtvKyspci4kb24odFtvXSxuKTtlbHNlKHIuX2V2ZW50c1t0XXx8KHIuX2V2ZW50c1t0XT1bXSkpLnB1c2gobiksZS50ZXN0KHQpJiYoci5faGFzSG9va0V2ZW50PSEwKTtyZXR1cm4gcn0sdC5wcm90b3R5cGUuJG9uY2U9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzO2Z1bmN0aW9uIHIoKXtuLiRvZmYodCxyKSxlLmFwcGx5KG4sYXJndW1lbnRzKX1yZXR1cm4gci5mbj1lLG4uJG9uKHQsciksbn0sdC5wcm90b3R5cGUuJG9mZj1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXM7aWYoIWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIG4uX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpLG47aWYoQXJyYXkuaXNBcnJheSh0KSl7Zm9yKHZhciByPTAsbz10Lmxlbmd0aDtyPG87cisrKW4uJG9mZih0W3JdLGUpO3JldHVybiBufXZhciBpLGE9bi5fZXZlbnRzW3RdO2lmKCFhKXJldHVybiBuO2lmKCFlKXJldHVybiBuLl9ldmVudHNbdF09bnVsbCxuO3ZhciBzPWEubGVuZ3RoO3doaWxlKHMtLSlpZihpPWFbc10saT09PWV8fGkuZm49PT1lKXthLnNwbGljZShzLDEpO2JyZWFrfXJldHVybiBufSx0LnByb3RvdHlwZS4kZW1pdD1mdW5jdGlvbih0KXt2YXIgZT10aGlzLG49ZS5fZXZlbnRzW3RdO2lmKG4pe249bi5sZW5ndGg+MT9qKG4pOm47Zm9yKHZhciByPWooYXJndW1lbnRzLDEpLG89J2V2ZW50IGhhbmRsZXIgZm9yICInK3QrJyInLGk9MCxhPW4ubGVuZ3RoO2k8YTtpKyspbmUobltpXSxlLHIsZSxvKX1yZXR1cm4gZX19dmFyIGpuPW51bGw7ZnVuY3Rpb24gVG4odCl7dmFyIGU9am47cmV0dXJuIGpuPXQsZnVuY3Rpb24oKXtqbj1lfX1mdW5jdGlvbiBQbih0KXt2YXIgZT10LiRvcHRpb25zLG49ZS5wYXJlbnQ7aWYobiYmIWUuYWJzdHJhY3Qpe3doaWxlKG4uJG9wdGlvbnMuYWJzdHJhY3QmJm4uJHBhcmVudCluPW4uJHBhcmVudDtuLiRjaGlsZHJlbi5wdXNoKHQpfXQuJHBhcmVudD1uLHQuJHJvb3Q9bj9uLiRyb290OnQsdC4kY2hpbGRyZW49W10sdC4kcmVmcz17fSx0Ll93YXRjaGVyPW51bGwsdC5faW5hY3RpdmU9bnVsbCx0Ll9kaXJlY3RJbmFjdGl2ZT0hMSx0Ll9pc01vdW50ZWQ9ITEsdC5faXNEZXN0cm95ZWQ9ITEsdC5faXNCZWluZ0Rlc3Ryb3llZD0hMX1mdW5jdGlvbiBJbih0KXt0LnByb3RvdHlwZS5fdXBkYXRlPWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcyxyPW4uJGVsLG89bi5fdm5vZGUsaT1UbihuKTtuLl92bm9kZT10LG4uJGVsPW8/bi5fX3BhdGNoX18obyx0KTpuLl9fcGF0Y2hfXyhuLiRlbCx0LGUsITEpLGkoKSxyJiYoci5fX3Z1ZV9fPW51bGwpLG4uJGVsJiYobi4kZWwuX192dWVfXz1uKSxuLiR2bm9kZSYmbi4kcGFyZW50JiZuLiR2bm9kZT09PW4uJHBhcmVudC5fdm5vZGUmJihuLiRwYXJlbnQuJGVsPW4uJGVsKX0sdC5wcm90b3R5cGUuJGZvcmNlVXBkYXRlPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0Ll93YXRjaGVyJiZ0Ll93YXRjaGVyLnVwZGF0ZSgpfSx0LnByb3RvdHlwZS4kZGVzdHJveT1mdW5jdGlvbigpe3ZhciB0PXRoaXM7aWYoIXQuX2lzQmVpbmdEZXN0cm95ZWQpe01uKHQsImJlZm9yZURlc3Ryb3kiKSx0Ll9pc0JlaW5nRGVzdHJveWVkPSEwO3ZhciBlPXQuJHBhcmVudDshZXx8ZS5faXNCZWluZ0Rlc3Ryb3llZHx8dC4kb3B0aW9ucy5hYnN0cmFjdHx8ZyhlLiRjaGlsZHJlbix0KSx0Ll93YXRjaGVyJiZ0Ll93YXRjaGVyLnRlYXJkb3duKCk7dmFyIG49dC5fd2F0Y2hlcnMubGVuZ3RoO3doaWxlKG4tLSl0Ll93YXRjaGVyc1tuXS50ZWFyZG93bigpO3QuX2RhdGEuX19vYl9fJiZ0Ll9kYXRhLl9fb2JfXy52bUNvdW50LS0sdC5faXNEZXN0cm95ZWQ9ITAsdC5fX3BhdGNoX18odC5fdm5vZGUsbnVsbCksTW4odCwiZGVzdHJveWVkIiksdC4kb2ZmKCksdC4kZWwmJih0LiRlbC5fX3Z1ZV9fPW51bGwpLHQuJHZub2RlJiYodC4kdm5vZGUucGFyZW50PW51bGwpfX19ZnVuY3Rpb24gTm4odCxlLG4pe3ZhciByO3JldHVybiB0LiRlbD1lLHQuJG9wdGlvbnMucmVuZGVyfHwodC4kb3B0aW9ucy5yZW5kZXI9d3QpLE1uKHQsImJlZm9yZU1vdW50Iikscj1mdW5jdGlvbigpe3QuX3VwZGF0ZSh0Ll9yZW5kZXIoKSxuKX0sbmV3IG5yKHQscixJLHtiZWZvcmU6ZnVuY3Rpb24oKXt0Ll9pc01vdW50ZWQmJiF0Ll9pc0Rlc3Ryb3llZCYmTW4odCwiYmVmb3JlVXBkYXRlIil9fSwhMCksbj0hMSxudWxsPT10LiR2bm9kZSYmKHQuX2lzTW91bnRlZD0hMCxNbih0LCJtb3VudGVkIikpLHR9ZnVuY3Rpb24gUm4odCxlLHIsbyxpKXt2YXIgYT1vLmRhdGEuc2NvcGVkU2xvdHMscz10LiRzY29wZWRTbG90cyxjPSEhKGEmJiFhLiRzdGFibGV8fHMhPT1uJiYhcy4kc3RhYmxlfHxhJiZ0LiRzY29wZWRTbG90cy4ka2V5IT09YS4ka2V5KSx1PSEhKGl8fHQuJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVufHxjKTtpZih0LiRvcHRpb25zLl9wYXJlbnRWbm9kZT1vLHQuJHZub2RlPW8sdC5fdm5vZGUmJih0Ll92bm9kZS5wYXJlbnQ9byksdC4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW49aSx0LiRhdHRycz1vLmRhdGEuYXR0cnN8fG4sdC4kbGlzdGVuZXJzPXJ8fG4sZSYmdC4kb3B0aW9ucy5wcm9wcyl7RXQoITEpO2Zvcih2YXIgZj10Ll9wcm9wcyxsPXQuJG9wdGlvbnMuX3Byb3BLZXlzfHxbXSxwPTA7cDxsLmxlbmd0aDtwKyspe3ZhciBkPWxbcF0sdj10LiRvcHRpb25zLnByb3BzO2ZbZF09SnQoZCx2LGUsdCl9RXQoITApLHQuJG9wdGlvbnMucHJvcHNEYXRhPWV9cj1yfHxuO3ZhciBoPXQuJG9wdGlvbnMuX3BhcmVudExpc3RlbmVyczt0LiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM9cixrbih0LHIsaCksdSYmKHQuJHNsb3RzPVRlKGksby5jb250ZXh0KSx0LiRmb3JjZVVwZGF0ZSgpKX1mdW5jdGlvbiBEbih0KXt3aGlsZSh0JiYodD10LiRwYXJlbnQpKWlmKHQuX2luYWN0aXZlKXJldHVybiEwO3JldHVybiExfWZ1bmN0aW9uIExuKHQsZSl7aWYoZSl7aWYodC5fZGlyZWN0SW5hY3RpdmU9ITEsRG4odCkpcmV0dXJufWVsc2UgaWYodC5fZGlyZWN0SW5hY3RpdmUpcmV0dXJuO2lmKHQuX2luYWN0aXZlfHxudWxsPT09dC5faW5hY3RpdmUpe3QuX2luYWN0aXZlPSExO2Zvcih2YXIgbj0wO248dC4kY2hpbGRyZW4ubGVuZ3RoO24rKylMbih0LiRjaGlsZHJlbltuXSk7TW4odCwiYWN0aXZhdGVkIil9fWZ1bmN0aW9uIEZuKHQsZSl7aWYoKCFlfHwodC5fZGlyZWN0SW5hY3RpdmU9ITAsIURuKHQpKSkmJiF0Ll9pbmFjdGl2ZSl7dC5faW5hY3RpdmU9ITA7Zm9yKHZhciBuPTA7bjx0LiRjaGlsZHJlbi5sZW5ndGg7bisrKUZuKHQuJGNoaWxkcmVuW25dKTtNbih0LCJkZWFjdGl2YXRlZCIpfX1mdW5jdGlvbiBNbih0LGUpe3l0KCk7dmFyIG49dC4kb3B0aW9uc1tlXSxyPWUrIiBob29rIjtpZihuKWZvcih2YXIgbz0wLGk9bi5sZW5ndGg7bzxpO28rKyluZShuW29dLHQsbnVsbCx0LHIpO3QuX2hhc0hvb2tFdmVudCYmdC4kZW1pdCgiaG9vazoiK2UpLGd0KCl9dmFyIFVuPVtdLEJuPVtdLEhuPXt9LHpuPSExLHFuPSExLFZuPTA7ZnVuY3Rpb24gV24oKXtWbj1Vbi5sZW5ndGg9Qm4ubGVuZ3RoPTAsSG49e30sem49cW49ITF9dmFyIEtuPTAsWG49RGF0ZS5ub3c7aWYoSiYmIXR0KXt2YXIgR249d2luZG93LnBlcmZvcm1hbmNlO0duJiYiZnVuY3Rpb24iPT09dHlwZW9mIEduLm5vdyYmWG4oKT5kb2N1bWVudC5jcmVhdGVFdmVudCgiRXZlbnQiKS50aW1lU3RhbXAmJihYbj1mdW5jdGlvbigpe3JldHVybiBHbi5ub3coKX0pfWZ1bmN0aW9uIEpuKCl7dmFyIHQsZTtmb3IoS249WG4oKSxxbj0hMCxVbi5zb3J0KGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuaWQtZS5pZH0pLFZuPTA7Vm48VW4ubGVuZ3RoO1ZuKyspdD1VbltWbl0sdC5iZWZvcmUmJnQuYmVmb3JlKCksZT10LmlkLEhuW2VdPW51bGwsdC5ydW4oKTt2YXIgbj1Cbi5zbGljZSgpLHI9VW4uc2xpY2UoKTtXbigpLFluKG4pLFpuKHIpLHV0JiZILmRldnRvb2xzJiZ1dC5lbWl0KCJmbHVzaCIpfWZ1bmN0aW9uIFpuKHQpe3ZhciBlPXQubGVuZ3RoO3doaWxlKGUtLSl7dmFyIG49dFtlXSxyPW4udm07ci5fd2F0Y2hlcj09PW4mJnIuX2lzTW91bnRlZCYmIXIuX2lzRGVzdHJveWVkJiZNbihyLCJ1cGRhdGVkIil9fWZ1bmN0aW9uIFFuKHQpe3QuX2luYWN0aXZlPSExLEJuLnB1c2godCl9ZnVuY3Rpb24gWW4odCl7Zm9yKHZhciBlPTA7ZTx0Lmxlbmd0aDtlKyspdFtlXS5faW5hY3RpdmU9ITAsTG4odFtlXSwhMCl9ZnVuY3Rpb24gdHIodCl7dmFyIGU9dC5pZDtpZihudWxsPT1IbltlXSl7aWYoSG5bZV09ITAscW4pe3ZhciBuPVVuLmxlbmd0aC0xO3doaWxlKG4+Vm4mJlVuW25dLmlkPnQuaWQpbi0tO1VuLnNwbGljZShuKzEsMCx0KX1lbHNlIFVuLnB1c2godCk7em58fCh6bj0hMCx2ZShKbikpfX12YXIgZXI9MCxucj1mdW5jdGlvbih0LGUsbixyLG8pe3RoaXMudm09dCxvJiYodC5fd2F0Y2hlcj10aGlzKSx0Ll93YXRjaGVycy5wdXNoKHRoaXMpLHI/KHRoaXMuZGVlcD0hIXIuZGVlcCx0aGlzLnVzZXI9ISFyLnVzZXIsdGhpcy5sYXp5PSEhci5sYXp5LHRoaXMuc3luYz0hIXIuc3luYyx0aGlzLmJlZm9yZT1yLmJlZm9yZSk6dGhpcy5kZWVwPXRoaXMudXNlcj10aGlzLmxhenk9dGhpcy5zeW5jPSExLHRoaXMuY2I9bix0aGlzLmlkPSsrZXIsdGhpcy5hY3RpdmU9ITAsdGhpcy5kaXJ0eT10aGlzLmxhenksdGhpcy5kZXBzPVtdLHRoaXMubmV3RGVwcz1bXSx0aGlzLmRlcElkcz1uZXcgbHQsdGhpcy5uZXdEZXBJZHM9bmV3IGx0LHRoaXMuZXhwcmVzc2lvbj0iIiwiZnVuY3Rpb24iPT09dHlwZW9mIGU/dGhpcy5nZXR0ZXI9ZToodGhpcy5nZXR0ZXI9SyhlKSx0aGlzLmdldHRlcnx8KHRoaXMuZ2V0dGVyPUkpKSx0aGlzLnZhbHVlPXRoaXMubGF6eT92b2lkIDA6dGhpcy5nZXQoKX07bnIucHJvdG90eXBlLmdldD1mdW5jdGlvbigpe3ZhciB0O3l0KHRoaXMpO3ZhciBlPXRoaXMudm07dHJ5e3Q9dGhpcy5nZXR0ZXIuY2FsbChlLGUpfWNhdGNoKENhKXtpZighdGhpcy51c2VyKXRocm93IENhO2VlKENhLGUsJ2dldHRlciBmb3Igd2F0Y2hlciAiJyt0aGlzLmV4cHJlc3Npb24rJyInKX1maW5hbGx5e3RoaXMuZGVlcCYmbWUodCksZ3QoKSx0aGlzLmNsZWFudXBEZXBzKCl9cmV0dXJuIHR9LG5yLnByb3RvdHlwZS5hZGREZXA9ZnVuY3Rpb24odCl7dmFyIGU9dC5pZDt0aGlzLm5ld0RlcElkcy5oYXMoZSl8fCh0aGlzLm5ld0RlcElkcy5hZGQoZSksdGhpcy5uZXdEZXBzLnB1c2godCksdGhpcy5kZXBJZHMuaGFzKGUpfHx0LmFkZFN1Yih0aGlzKSl9LG5yLnByb3RvdHlwZS5jbGVhbnVwRGVwcz1mdW5jdGlvbigpe3ZhciB0PXRoaXMuZGVwcy5sZW5ndGg7d2hpbGUodC0tKXt2YXIgZT10aGlzLmRlcHNbdF07dGhpcy5uZXdEZXBJZHMuaGFzKGUuaWQpfHxlLnJlbW92ZVN1Yih0aGlzKX12YXIgbj10aGlzLmRlcElkczt0aGlzLmRlcElkcz10aGlzLm5ld0RlcElkcyx0aGlzLm5ld0RlcElkcz1uLHRoaXMubmV3RGVwSWRzLmNsZWFyKCksbj10aGlzLmRlcHMsdGhpcy5kZXBzPXRoaXMubmV3RGVwcyx0aGlzLm5ld0RlcHM9bix0aGlzLm5ld0RlcHMubGVuZ3RoPTB9LG5yLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oKXt0aGlzLmxhenk/dGhpcy5kaXJ0eT0hMDp0aGlzLnN5bmM/dGhpcy5ydW4oKTp0cih0aGlzKX0sbnIucHJvdG90eXBlLnJ1bj1mdW5jdGlvbigpe2lmKHRoaXMuYWN0aXZlKXt2YXIgdD10aGlzLmdldCgpO2lmKHQhPT10aGlzLnZhbHVlfHxjKHQpfHx0aGlzLmRlZXApe3ZhciBlPXRoaXMudmFsdWU7aWYodGhpcy52YWx1ZT10LHRoaXMudXNlcil0cnl7dGhpcy5jYi5jYWxsKHRoaXMudm0sdCxlKX1jYXRjaChDYSl7ZWUoQ2EsdGhpcy52bSwnY2FsbGJhY2sgZm9yIHdhdGNoZXIgIicrdGhpcy5leHByZXNzaW9uKyciJyl9ZWxzZSB0aGlzLmNiLmNhbGwodGhpcy52bSx0LGUpfX19LG5yLnByb3RvdHlwZS5ldmFsdWF0ZT1mdW5jdGlvbigpe3RoaXMudmFsdWU9dGhpcy5nZXQoKSx0aGlzLmRpcnR5PSExfSxuci5wcm90b3R5cGUuZGVwZW5kPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5kZXBzLmxlbmd0aDt3aGlsZSh0LS0pdGhpcy5kZXBzW3RdLmRlcGVuZCgpfSxuci5wcm90b3R5cGUudGVhcmRvd249ZnVuY3Rpb24oKXtpZih0aGlzLmFjdGl2ZSl7dGhpcy52bS5faXNCZWluZ0Rlc3Ryb3llZHx8Zyh0aGlzLnZtLl93YXRjaGVycyx0aGlzKTt2YXIgdD10aGlzLmRlcHMubGVuZ3RoO3doaWxlKHQtLSl0aGlzLmRlcHNbdF0ucmVtb3ZlU3ViKHRoaXMpO3RoaXMuYWN0aXZlPSExfX07dmFyIHJyPXtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6SSxzZXQ6SX07ZnVuY3Rpb24gb3IodCxlLG4pe3JyLmdldD1mdW5jdGlvbigpe3JldHVybiB0aGlzW2VdW25dfSxyci5zZXQ9ZnVuY3Rpb24odCl7dGhpc1tlXVtuXT10fSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxuLHJyKX1mdW5jdGlvbiBpcih0KXt0Ll93YXRjaGVycz1bXTt2YXIgZT10LiRvcHRpb25zO2UucHJvcHMmJmFyKHQsZS5wcm9wcyksZS5tZXRob2RzJiZ2cih0LGUubWV0aG9kcyksZS5kYXRhP3NyKHQpOkl0KHQuX2RhdGE9e30sITApLGUuY29tcHV0ZWQmJmZyKHQsZS5jb21wdXRlZCksZS53YXRjaCYmZS53YXRjaCE9PWl0JiZocih0LGUud2F0Y2gpfWZ1bmN0aW9uIGFyKHQsZSl7dmFyIG49dC4kb3B0aW9ucy5wcm9wc0RhdGF8fHt9LHI9dC5fcHJvcHM9e30sbz10LiRvcHRpb25zLl9wcm9wS2V5cz1bXSxpPSF0LiRwYXJlbnQ7aXx8RXQoITEpO3ZhciBhPWZ1bmN0aW9uKGkpe28ucHVzaChpKTt2YXIgYT1KdChpLGUsbix0KTtOdChyLGksYSksaSBpbiB0fHxvcih0LCJfcHJvcHMiLGkpfTtmb3IodmFyIHMgaW4gZSlhKHMpO0V0KCEwKX1mdW5jdGlvbiBzcih0KXt2YXIgZT10LiRvcHRpb25zLmRhdGE7ZT10Ll9kYXRhPSJmdW5jdGlvbiI9PT10eXBlb2YgZT9jcihlLHQpOmV8fHt9LGYoZSl8fChlPXt9KTt2YXIgbj1PYmplY3Qua2V5cyhlKSxyPXQuJG9wdGlvbnMucHJvcHMsbz0odC4kb3B0aW9ucy5tZXRob2RzLG4ubGVuZ3RoKTt3aGlsZShvLS0pe3ZhciBpPW5bb107MCxyJiZiKHIsaSl8fHEoaSl8fG9yKHQsIl9kYXRhIixpKX1JdChlLCEwKX1mdW5jdGlvbiBjcih0LGUpe3l0KCk7dHJ5e3JldHVybiB0LmNhbGwoZSxlKX1jYXRjaChDYSl7cmV0dXJuIGVlKENhLGUsImRhdGEoKSIpLHt9fWZpbmFsbHl7Z3QoKX19dmFyIHVyPXtsYXp5OiEwfTtmdW5jdGlvbiBmcih0LGUpe3ZhciBuPXQuX2NvbXB1dGVkV2F0Y2hlcnM9T2JqZWN0LmNyZWF0ZShudWxsKSxyPWN0KCk7Zm9yKHZhciBvIGluIGUpe3ZhciBpPWVbb10sYT0iZnVuY3Rpb24iPT09dHlwZW9mIGk/aTppLmdldDswLHJ8fChuW29dPW5ldyBucih0LGF8fEksSSx1cikpLG8gaW4gdHx8bHIodCxvLGkpfX1mdW5jdGlvbiBscih0LGUsbil7dmFyIHI9IWN0KCk7ImZ1bmN0aW9uIj09PXR5cGVvZiBuPyhyci5nZXQ9cj9wcihlKTpkcihuKSxyci5zZXQ9SSk6KHJyLmdldD1uLmdldD9yJiYhMSE9PW4uY2FjaGU/cHIoZSk6ZHIobi5nZXQpOkkscnIuc2V0PW4uc2V0fHxJKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLHJyKX1mdW5jdGlvbiBwcih0KXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZT10aGlzLl9jb21wdXRlZFdhdGNoZXJzJiZ0aGlzLl9jb21wdXRlZFdhdGNoZXJzW3RdO2lmKGUpcmV0dXJuIGUuZGlydHkmJmUuZXZhbHVhdGUoKSxodC50YXJnZXQmJmUuZGVwZW5kKCksZS52YWx1ZX19ZnVuY3Rpb24gZHIodCl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQuY2FsbCh0aGlzLHRoaXMpfX1mdW5jdGlvbiB2cih0LGUpe3QuJG9wdGlvbnMucHJvcHM7Zm9yKHZhciBuIGluIGUpdFtuXT0iZnVuY3Rpb24iIT09dHlwZW9mIGVbbl0/STpFKGVbbl0sdCl9ZnVuY3Rpb24gaHIodCxlKXtmb3IodmFyIG4gaW4gZSl7dmFyIHI9ZVtuXTtpZihBcnJheS5pc0FycmF5KHIpKWZvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKW1yKHQsbixyW29dKTtlbHNlIG1yKHQsbixyKX19ZnVuY3Rpb24gbXIodCxlLG4scil7cmV0dXJuIGYobikmJihyPW4sbj1uLmhhbmRsZXIpLCJzdHJpbmciPT09dHlwZW9mIG4mJihuPXRbbl0pLHQuJHdhdGNoKGUsbixyKX1mdW5jdGlvbiB5cih0KXt2YXIgZT17Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2RhdGF9fSxuPXtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcHJvcHN9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsIiRkYXRhIixlKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsIiRwcm9wcyIsbiksdC5wcm90b3R5cGUuJHNldD1SdCx0LnByb3RvdHlwZS4kZGVsZXRlPUR0LHQucHJvdG90eXBlLiR3YXRjaD1mdW5jdGlvbih0LGUsbil7dmFyIHI9dGhpcztpZihmKGUpKXJldHVybiBtcihyLHQsZSxuKTtuPW58fHt9LG4udXNlcj0hMDt2YXIgbz1uZXcgbnIocix0LGUsbik7aWYobi5pbW1lZGlhdGUpdHJ5e2UuY2FsbChyLG8udmFsdWUpfWNhdGNoKGkpe2VlKGksciwnY2FsbGJhY2sgZm9yIGltbWVkaWF0ZSB3YXRjaGVyICInK28uZXhwcmVzc2lvbisnIicpfXJldHVybiBmdW5jdGlvbigpe28udGVhcmRvd24oKX19fXZhciBncj0wO2Z1bmN0aW9uIF9yKHQpe3QucHJvdG90eXBlLl9pbml0PWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7ZS5fdWlkPWdyKyssZS5faXNWdWU9ITAsdCYmdC5faXNDb21wb25lbnQ/YnIoZSx0KTplLiRvcHRpb25zPVh0KHdyKGUuY29uc3RydWN0b3IpLHR8fHt9LGUpLGUuX3JlbmRlclByb3h5PWUsZS5fc2VsZj1lLFBuKGUpLEFuKGUpLGhuKGUpLE1uKGUsImJlZm9yZUNyZWF0ZSIpLEVlKGUpLGlyKGUpLGtlKGUpLE1uKGUsImNyZWF0ZWQiKSxlLiRvcHRpb25zLmVsJiZlLiRtb3VudChlLiRvcHRpb25zLmVsKX19ZnVuY3Rpb24gYnIodCxlKXt2YXIgbj10LiRvcHRpb25zPU9iamVjdC5jcmVhdGUodC5jb25zdHJ1Y3Rvci5vcHRpb25zKSxyPWUuX3BhcmVudFZub2RlO24ucGFyZW50PWUucGFyZW50LG4uX3BhcmVudFZub2RlPXI7dmFyIG89ci5jb21wb25lbnRPcHRpb25zO24ucHJvcHNEYXRhPW8ucHJvcHNEYXRhLG4uX3BhcmVudExpc3RlbmVycz1vLmxpc3RlbmVycyxuLl9yZW5kZXJDaGlsZHJlbj1vLmNoaWxkcmVuLG4uX2NvbXBvbmVudFRhZz1vLnRhZyxlLnJlbmRlciYmKG4ucmVuZGVyPWUucmVuZGVyLG4uc3RhdGljUmVuZGVyRm5zPWUuc3RhdGljUmVuZGVyRm5zKX1mdW5jdGlvbiB3cih0KXt2YXIgZT10Lm9wdGlvbnM7aWYodC5zdXBlcil7dmFyIG49d3IodC5zdXBlcikscj10LnN1cGVyT3B0aW9ucztpZihuIT09cil7dC5zdXBlck9wdGlvbnM9bjt2YXIgbz14cih0KTtvJiZUKHQuZXh0ZW5kT3B0aW9ucyxvKSxlPXQub3B0aW9ucz1YdChuLHQuZXh0ZW5kT3B0aW9ucyksZS5uYW1lJiYoZS5jb21wb25lbnRzW2UubmFtZV09dCl9fXJldHVybiBlfWZ1bmN0aW9uIHhyKHQpe3ZhciBlLG49dC5vcHRpb25zLHI9dC5zZWFsZWRPcHRpb25zO2Zvcih2YXIgbyBpbiBuKW5bb10hPT1yW29dJiYoZXx8KGU9e30pLGVbb109bltvXSk7cmV0dXJuIGV9ZnVuY3Rpb24gQ3IodCl7dGhpcy5faW5pdCh0KX1mdW5jdGlvbiBBcih0KXt0LnVzZT1mdW5jdGlvbih0KXt2YXIgZT10aGlzLl9pbnN0YWxsZWRQbHVnaW5zfHwodGhpcy5faW5zdGFsbGVkUGx1Z2lucz1bXSk7aWYoZS5pbmRleE9mKHQpPi0xKXJldHVybiB0aGlzO3ZhciBuPWooYXJndW1lbnRzLDEpO3JldHVybiBuLnVuc2hpZnQodGhpcyksImZ1bmN0aW9uIj09PXR5cGVvZiB0Lmluc3RhbGw/dC5pbnN0YWxsLmFwcGx5KHQsbik6ImZ1bmN0aW9uIj09PXR5cGVvZiB0JiZ0LmFwcGx5KG51bGwsbiksZS5wdXNoKHQpLHRoaXN9fWZ1bmN0aW9uIE9yKHQpe3QubWl4aW49ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMub3B0aW9ucz1YdCh0aGlzLm9wdGlvbnMsdCksdGhpc319ZnVuY3Rpb24gU3IodCl7dC5jaWQ9MDt2YXIgZT0xO3QuZXh0ZW5kPWZ1bmN0aW9uKHQpe3Q9dHx8e307dmFyIG49dGhpcyxyPW4uY2lkLG89dC5fQ3Rvcnx8KHQuX0N0b3I9e30pO2lmKG9bcl0pcmV0dXJuIG9bcl07dmFyIGk9dC5uYW1lfHxuLm9wdGlvbnMubmFtZTt2YXIgYT1mdW5jdGlvbih0KXt0aGlzLl9pbml0KHQpfTtyZXR1cm4gYS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShuLnByb3RvdHlwZSksYS5wcm90b3R5cGUuY29uc3RydWN0b3I9YSxhLmNpZD1lKyssYS5vcHRpb25zPVh0KG4ub3B0aW9ucyx0KSxhWyJzdXBlciJdPW4sYS5vcHRpb25zLnByb3BzJiYkcihhKSxhLm9wdGlvbnMuY29tcHV0ZWQmJmtyKGEpLGEuZXh0ZW5kPW4uZXh0ZW5kLGEubWl4aW49bi5taXhpbixhLnVzZT1uLnVzZSxVLmZvckVhY2goZnVuY3Rpb24odCl7YVt0XT1uW3RdfSksaSYmKGEub3B0aW9ucy5jb21wb25lbnRzW2ldPWEpLGEuc3VwZXJPcHRpb25zPW4ub3B0aW9ucyxhLmV4dGVuZE9wdGlvbnM9dCxhLnNlYWxlZE9wdGlvbnM9VCh7fSxhLm9wdGlvbnMpLG9bcl09YSxhfX1mdW5jdGlvbiAkcih0KXt2YXIgZT10Lm9wdGlvbnMucHJvcHM7Zm9yKHZhciBuIGluIGUpb3IodC5wcm90b3R5cGUsIl9wcm9wcyIsbil9ZnVuY3Rpb24ga3IodCl7dmFyIGU9dC5vcHRpb25zLmNvbXB1dGVkO2Zvcih2YXIgbiBpbiBlKWxyKHQucHJvdG90eXBlLG4sZVtuXSl9ZnVuY3Rpb24gRXIodCl7VS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3RbZV09ZnVuY3Rpb24odCxuKXtyZXR1cm4gbj8oImNvbXBvbmVudCI9PT1lJiZmKG4pJiYobi5uYW1lPW4ubmFtZXx8dCxuPXRoaXMub3B0aW9ucy5fYmFzZS5leHRlbmQobikpLCJkaXJlY3RpdmUiPT09ZSYmImZ1bmN0aW9uIj09PXR5cGVvZiBuJiYobj17YmluZDpuLHVwZGF0ZTpufSksdGhpcy5vcHRpb25zW2UrInMiXVt0XT1uLG4pOnRoaXMub3B0aW9uc1tlKyJzIl1bdF19fSl9ZnVuY3Rpb24ganIodCl7cmV0dXJuIHQmJih0LkN0b3Iub3B0aW9ucy5uYW1lfHx0LnRhZyl9ZnVuY3Rpb24gVHIodCxlKXtyZXR1cm4gQXJyYXkuaXNBcnJheSh0KT90LmluZGV4T2YoZSk+LTE6InN0cmluZyI9PT10eXBlb2YgdD90LnNwbGl0KCIsIikuaW5kZXhPZihlKT4tMTohIWwodCkmJnQudGVzdChlKX1mdW5jdGlvbiBQcih0LGUpe3ZhciBuPXQuY2FjaGUscj10LmtleXMsbz10Ll92bm9kZTtmb3IodmFyIGkgaW4gbil7dmFyIGE9bltpXTtpZihhKXt2YXIgcz1qcihhLmNvbXBvbmVudE9wdGlvbnMpO3MmJiFlKHMpJiZJcihuLGkscixvKX19fWZ1bmN0aW9uIElyKHQsZSxuLHIpe3ZhciBvPXRbZV07IW98fHImJm8udGFnPT09ci50YWd8fG8uY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKSx0W2VdPW51bGwsZyhuLGUpfV9yKENyKSx5cihDciksRW4oQ3IpLEluKENyKSxnbihDcik7dmFyIE5yPVtTdHJpbmcsUmVnRXhwLEFycmF5XSxScj17bmFtZToia2VlcC1hbGl2ZSIsYWJzdHJhY3Q6ITAscHJvcHM6e2luY2x1ZGU6TnIsZXhjbHVkZTpOcixtYXg6W1N0cmluZyxOdW1iZXJdfSxjcmVhdGVkOmZ1bmN0aW9uKCl7dGhpcy5jYWNoZT1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMua2V5cz1bXX0sZGVzdHJveWVkOmZ1bmN0aW9uKCl7Zm9yKHZhciB0IGluIHRoaXMuY2FjaGUpSXIodGhpcy5jYWNoZSx0LHRoaXMua2V5cyl9LG1vdW50ZWQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMuJHdhdGNoKCJpbmNsdWRlIixmdW5jdGlvbihlKXtQcih0LGZ1bmN0aW9uKHQpe3JldHVybiBUcihlLHQpfSl9KSx0aGlzLiR3YXRjaCgiZXhjbHVkZSIsZnVuY3Rpb24oZSl7UHIodCxmdW5jdGlvbih0KXtyZXR1cm4hVHIoZSx0KX0pfSl9LHJlbmRlcjpmdW5jdGlvbigpe3ZhciB0PXRoaXMuJHNsb3RzLmRlZmF1bHQsZT1Dbih0KSxuPWUmJmUuY29tcG9uZW50T3B0aW9ucztpZihuKXt2YXIgcj1qcihuKSxvPXRoaXMsaT1vLmluY2x1ZGUsYT1vLmV4Y2x1ZGU7aWYoaSYmKCFyfHwhVHIoaSxyKSl8fGEmJnImJlRyKGEscikpcmV0dXJuIGU7dmFyIHM9dGhpcyxjPXMuY2FjaGUsdT1zLmtleXMsZj1udWxsPT1lLmtleT9uLkN0b3IuY2lkKyhuLnRhZz8iOjoiK24udGFnOiIiKTplLmtleTtjW2ZdPyhlLmNvbXBvbmVudEluc3RhbmNlPWNbZl0uY29tcG9uZW50SW5zdGFuY2UsZyh1LGYpLHUucHVzaChmKSk6KGNbZl09ZSx1LnB1c2goZiksdGhpcy5tYXgmJnUubGVuZ3RoPnBhcnNlSW50KHRoaXMubWF4KSYmSXIoYyx1WzBdLHUsdGhpcy5fdm5vZGUpKSxlLmRhdGEua2VlcEFsaXZlPSEwfXJldHVybiBlfHx0JiZ0WzBdfX0sRHI9e0tlZXBBbGl2ZTpScn07ZnVuY3Rpb24gTHIodCl7dmFyIGU9e2dldDpmdW5jdGlvbigpe3JldHVybiBIfX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsImNvbmZpZyIsZSksdC51dGlsPXt3YXJuOmR0LGV4dGVuZDpULG1lcmdlT3B0aW9uczpYdCxkZWZpbmVSZWFjdGl2ZTpOdH0sdC5zZXQ9UnQsdC5kZWxldGU9RHQsdC5uZXh0VGljaz12ZSx0Lm9ic2VydmFibGU9ZnVuY3Rpb24odCl7cmV0dXJuIEl0KHQpLHR9LHQub3B0aW9ucz1PYmplY3QuY3JlYXRlKG51bGwpLFUuZm9yRWFjaChmdW5jdGlvbihlKXt0Lm9wdGlvbnNbZSsicyJdPU9iamVjdC5jcmVhdGUobnVsbCl9KSx0Lm9wdGlvbnMuX2Jhc2U9dCxUKHQub3B0aW9ucy5jb21wb25lbnRzLERyKSxBcih0KSxPcih0KSxTcih0KSxFcih0KX1McihDciksT2JqZWN0LmRlZmluZVByb3BlcnR5KENyLnByb3RvdHlwZSwiJGlzU2VydmVyIix7Z2V0OmN0fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KENyLnByb3RvdHlwZSwiJHNzckNvbnRleHQiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kdm5vZGUmJnRoaXMuJHZub2RlLnNzckNvbnRleHR9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KENyLCJGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCIse3ZhbHVlOlplfSksQ3IudmVyc2lvbj0iMi42LjEwIjt2YXIgRnI9bSgic3R5bGUsY2xhc3MiKSxNcj1tKCJpbnB1dCx0ZXh0YXJlYSxvcHRpb24sc2VsZWN0LHByb2dyZXNzIiksVXI9ZnVuY3Rpb24odCxlLG4pe3JldHVybiJ2YWx1ZSI9PT1uJiZNcih0KSYmImJ1dHRvbiIhPT1lfHwic2VsZWN0ZWQiPT09biYmIm9wdGlvbiI9PT10fHwiY2hlY2tlZCI9PT1uJiYiaW5wdXQiPT09dHx8Im11dGVkIj09PW4mJiJ2aWRlbyI9PT10fSxCcj1tKCJjb250ZW50ZWRpdGFibGUsZHJhZ2dhYmxlLHNwZWxsY2hlY2siKSxIcj1tKCJldmVudHMsY2FyZXQsdHlwaW5nLHBsYWludGV4dC1vbmx5IiksenI9ZnVuY3Rpb24odCxlKXtyZXR1cm4gWHIoZSl8fCJmYWxzZSI9PT1lPyJmYWxzZSI6ImNvbnRlbnRlZGl0YWJsZSI9PT10JiZIcihlKT9lOiJ0cnVlIn0scXI9bSgiYWxsb3dmdWxsc2NyZWVuLGFzeW5jLGF1dG9mb2N1cyxhdXRvcGxheSxjaGVja2VkLGNvbXBhY3QsY29udHJvbHMsZGVjbGFyZSxkZWZhdWx0LGRlZmF1bHRjaGVja2VkLGRlZmF1bHRtdXRlZCxkZWZhdWx0c2VsZWN0ZWQsZGVmZXIsZGlzYWJsZWQsZW5hYmxlZCxmb3Jtbm92YWxpZGF0ZSxoaWRkZW4saW5kZXRlcm1pbmF0ZSxpbmVydCxpc21hcCxpdGVtc2NvcGUsbG9vcCxtdWx0aXBsZSxtdXRlZCxub2hyZWYsbm9yZXNpemUsbm9zaGFkZSxub3ZhbGlkYXRlLG5vd3JhcCxvcGVuLHBhdXNlb25leGl0LHJlYWRvbmx5LHJlcXVpcmVkLHJldmVyc2VkLHNjb3BlZCxzZWFtbGVzcyxzZWxlY3RlZCxzb3J0YWJsZSx0cmFuc2xhdGUsdHJ1ZXNwZWVkLHR5cGVtdXN0bWF0Y2gsdmlzaWJsZSIpLFZyPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIixXcj1mdW5jdGlvbih0KXtyZXR1cm4iOiI9PT10LmNoYXJBdCg1KSYmInhsaW5rIj09PXQuc2xpY2UoMCw1KX0sS3I9ZnVuY3Rpb24odCl7cmV0dXJuIFdyKHQpP3Quc2xpY2UoNix0Lmxlbmd0aCk6IiJ9LFhyPWZ1bmN0aW9uKHQpe3JldHVybiBudWxsPT10fHwhMT09PXR9O2Z1bmN0aW9uIEdyKHQpe3ZhciBlPXQuZGF0YSxuPXQscj10O3doaWxlKG8oci5jb21wb25lbnRJbnN0YW5jZSkpcj1yLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZSxyJiZyLmRhdGEmJihlPUpyKHIuZGF0YSxlKSk7d2hpbGUobyhuPW4ucGFyZW50KSluJiZuLmRhdGEmJihlPUpyKGUsbi5kYXRhKSk7cmV0dXJuIFpyKGUuc3RhdGljQ2xhc3MsZS5jbGFzcyl9ZnVuY3Rpb24gSnIodCxlKXtyZXR1cm57c3RhdGljQ2xhc3M6UXIodC5zdGF0aWNDbGFzcyxlLnN0YXRpY0NsYXNzKSxjbGFzczpvKHQuY2xhc3MpP1t0LmNsYXNzLGUuY2xhc3NdOmUuY2xhc3N9fWZ1bmN0aW9uIFpyKHQsZSl7cmV0dXJuIG8odCl8fG8oZSk/UXIodCxZcihlKSk6IiJ9ZnVuY3Rpb24gUXIodCxlKXtyZXR1cm4gdD9lP3QrIiAiK2U6dDplfHwiIn1mdW5jdGlvbiBZcih0KXtyZXR1cm4gQXJyYXkuaXNBcnJheSh0KT90byh0KTpjKHQpP2VvKHQpOiJzdHJpbmciPT09dHlwZW9mIHQ/dDoiIn1mdW5jdGlvbiB0byh0KXtmb3IodmFyIGUsbj0iIixyPTAsaT10Lmxlbmd0aDtyPGk7cisrKW8oZT1Zcih0W3JdKSkmJiIiIT09ZSYmKG4mJihuKz0iICIpLG4rPWUpO3JldHVybiBufWZ1bmN0aW9uIGVvKHQpe3ZhciBlPSIiO2Zvcih2YXIgbiBpbiB0KXRbbl0mJihlJiYoZSs9IiAiKSxlKz1uKTtyZXR1cm4gZX12YXIgbm89e3N2ZzoiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciLG1hdGg6Imh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUwifSxybz1tKCJodG1sLGJvZHksYmFzZSxoZWFkLGxpbmssbWV0YSxzdHlsZSx0aXRsZSxhZGRyZXNzLGFydGljbGUsYXNpZGUsZm9vdGVyLGhlYWRlcixoMSxoMixoMyxoNCxoNSxoNixoZ3JvdXAsbmF2LHNlY3Rpb24sZGl2LGRkLGRsLGR0LGZpZ2NhcHRpb24sZmlndXJlLHBpY3R1cmUsaHIsaW1nLGxpLG1haW4sb2wscCxwcmUsdWwsYSxiLGFiYnIsYmRpLGJkbyxicixjaXRlLGNvZGUsZGF0YSxkZm4sZW0saSxrYmQsbWFyayxxLHJwLHJ0LHJ0YyxydWJ5LHMsc2FtcCxzbWFsbCxzcGFuLHN0cm9uZyxzdWIsc3VwLHRpbWUsdSx2YXIsd2JyLGFyZWEsYXVkaW8sbWFwLHRyYWNrLHZpZGVvLGVtYmVkLG9iamVjdCxwYXJhbSxzb3VyY2UsY2FudmFzLHNjcmlwdCxub3NjcmlwdCxkZWwsaW5zLGNhcHRpb24sY29sLGNvbGdyb3VwLHRhYmxlLHRoZWFkLHRib2R5LHRkLHRoLHRyLGJ1dHRvbixkYXRhbGlzdCxmaWVsZHNldCxmb3JtLGlucHV0LGxhYmVsLGxlZ2VuZCxtZXRlcixvcHRncm91cCxvcHRpb24sb3V0cHV0LHByb2dyZXNzLHNlbGVjdCx0ZXh0YXJlYSxkZXRhaWxzLGRpYWxvZyxtZW51LG1lbnVpdGVtLHN1bW1hcnksY29udGVudCxlbGVtZW50LHNoYWRvdyx0ZW1wbGF0ZSxibG9ja3F1b3RlLGlmcmFtZSx0Zm9vdCIpLG9vPW0oInN2ZyxhbmltYXRlLGNpcmNsZSxjbGlwcGF0aCxjdXJzb3IsZGVmcyxkZXNjLGVsbGlwc2UsZmlsdGVyLGZvbnQtZmFjZSxmb3JlaWduT2JqZWN0LGcsZ2x5cGgsaW1hZ2UsbGluZSxtYXJrZXIsbWFzayxtaXNzaW5nLWdseXBoLHBhdGgscGF0dGVybixwb2x5Z29uLHBvbHlsaW5lLHJlY3Qsc3dpdGNoLHN5bWJvbCx0ZXh0LHRleHRwYXRoLHRzcGFuLHVzZSx2aWV3IiwhMCksaW89ZnVuY3Rpb24odCl7cmV0dXJuIHJvKHQpfHxvbyh0KX07ZnVuY3Rpb24gYW8odCl7cmV0dXJuIG9vKHQpPyJzdmciOiJtYXRoIj09PXQ/Im1hdGgiOnZvaWQgMH12YXIgc289T2JqZWN0LmNyZWF0ZShudWxsKTtmdW5jdGlvbiBjbyh0KXtpZighSilyZXR1cm4hMDtpZihpbyh0KSlyZXR1cm4hMTtpZih0PXQudG9Mb3dlckNhc2UoKSxudWxsIT1zb1t0XSlyZXR1cm4gc29bdF07dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0KTtyZXR1cm4gdC5pbmRleE9mKCItIik+LTE/c29bdF09ZS5jb25zdHJ1Y3Rvcj09PXdpbmRvdy5IVE1MVW5rbm93bkVsZW1lbnR8fGUuY29uc3RydWN0b3I9PT13aW5kb3cuSFRNTEVsZW1lbnQ6c29bdF09L0hUTUxVbmtub3duRWxlbWVudC8udGVzdChlLnRvU3RyaW5nKCkpfXZhciB1bz1tKCJ0ZXh0LG51bWJlcixwYXNzd29yZCxzZWFyY2gsZW1haWwsdGVsLHVybCIpO2Z1bmN0aW9uIGZvKHQpe2lmKCJzdHJpbmciPT09dHlwZW9mIHQpe3ZhciBlPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodCk7cmV0dXJuIGV8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpfXJldHVybiB0fWZ1bmN0aW9uIGxvKHQsZSl7dmFyIG49ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0KTtyZXR1cm4ic2VsZWN0IiE9PXQ/bjooZS5kYXRhJiZlLmRhdGEuYXR0cnMmJnZvaWQgMCE9PWUuZGF0YS5hdHRycy5tdWx0aXBsZSYmbi5zZXRBdHRyaWJ1dGUoIm11bHRpcGxlIiwibXVsdGlwbGUiKSxuKX1mdW5jdGlvbiBwbyh0LGUpe3JldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobm9bdF0sZSl9ZnVuY3Rpb24gdm8odCl7cmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHQpfWZ1bmN0aW9uIGhvKHQpe3JldHVybiBkb2N1bWVudC5jcmVhdGVDb21tZW50KHQpfWZ1bmN0aW9uIG1vKHQsZSxuKXt0Lmluc2VydEJlZm9yZShlLG4pfWZ1bmN0aW9uIHlvKHQsZSl7dC5yZW1vdmVDaGlsZChlKX1mdW5jdGlvbiBnbyh0LGUpe3QuYXBwZW5kQ2hpbGQoZSl9ZnVuY3Rpb24gX28odCl7cmV0dXJuIHQucGFyZW50Tm9kZX1mdW5jdGlvbiBibyh0KXtyZXR1cm4gdC5uZXh0U2libGluZ31mdW5jdGlvbiB3byh0KXtyZXR1cm4gdC50YWdOYW1lfWZ1bmN0aW9uIHhvKHQsZSl7dC50ZXh0Q29udGVudD1lfWZ1bmN0aW9uIENvKHQsZSl7dC5zZXRBdHRyaWJ1dGUoZSwiIil9dmFyIEFvPU9iamVjdC5mcmVlemUoe2NyZWF0ZUVsZW1lbnQ6bG8sY3JlYXRlRWxlbWVudE5TOnBvLGNyZWF0ZVRleHROb2RlOnZvLGNyZWF0ZUNvbW1lbnQ6aG8saW5zZXJ0QmVmb3JlOm1vLHJlbW92ZUNoaWxkOnlvLGFwcGVuZENoaWxkOmdvLHBhcmVudE5vZGU6X28sbmV4dFNpYmxpbmc6Ym8sdGFnTmFtZTp3byxzZXRUZXh0Q29udGVudDp4byxzZXRTdHlsZVNjb3BlOkNvfSksT289e2NyZWF0ZTpmdW5jdGlvbih0LGUpe1NvKGUpfSx1cGRhdGU6ZnVuY3Rpb24odCxlKXt0LmRhdGEucmVmIT09ZS5kYXRhLnJlZiYmKFNvKHQsITApLFNvKGUpKX0sZGVzdHJveTpmdW5jdGlvbih0KXtTbyh0LCEwKX19O2Z1bmN0aW9uIFNvKHQsZSl7dmFyIG49dC5kYXRhLnJlZjtpZihvKG4pKXt2YXIgcj10LmNvbnRleHQsaT10LmNvbXBvbmVudEluc3RhbmNlfHx0LmVsbSxhPXIuJHJlZnM7ZT9BcnJheS5pc0FycmF5KGFbbl0pP2coYVtuXSxpKTphW25dPT09aSYmKGFbbl09dm9pZCAwKTp0LmRhdGEucmVmSW5Gb3I/QXJyYXkuaXNBcnJheShhW25dKT9hW25dLmluZGV4T2YoaSk8MCYmYVtuXS5wdXNoKGkpOmFbbl09W2ldOmFbbl09aX19dmFyICRvPW5ldyBfdCgiIix7fSxbXSksa289WyJjcmVhdGUiLCJhY3RpdmF0ZSIsInVwZGF0ZSIsInJlbW92ZSIsImRlc3Ryb3kiXTtmdW5jdGlvbiBFbyh0LGUpe3JldHVybiB0LmtleT09PWUua2V5JiYodC50YWc9PT1lLnRhZyYmdC5pc0NvbW1lbnQ9PT1lLmlzQ29tbWVudCYmbyh0LmRhdGEpPT09byhlLmRhdGEpJiZqbyh0LGUpfHxpKHQuaXNBc3luY1BsYWNlaG9sZGVyKSYmdC5hc3luY0ZhY3Rvcnk9PT1lLmFzeW5jRmFjdG9yeSYmcihlLmFzeW5jRmFjdG9yeS5lcnJvcikpfWZ1bmN0aW9uIGpvKHQsZSl7aWYoImlucHV0IiE9PXQudGFnKXJldHVybiEwO3ZhciBuLHI9byhuPXQuZGF0YSkmJm8obj1uLmF0dHJzKSYmbi50eXBlLGk9byhuPWUuZGF0YSkmJm8obj1uLmF0dHJzKSYmbi50eXBlO3JldHVybiByPT09aXx8dW8ocikmJnVvKGkpfWZ1bmN0aW9uIFRvKHQsZSxuKXt2YXIgcixpLGE9e307Zm9yKHI9ZTtyPD1uOysrcilpPXRbcl0ua2V5LG8oaSkmJihhW2ldPXIpO3JldHVybiBhfWZ1bmN0aW9uIFBvKHQpe3ZhciBlLG4sYT17fSxjPXQubW9kdWxlcyx1PXQubm9kZU9wcztmb3IoZT0wO2U8a28ubGVuZ3RoOysrZSlmb3IoYVtrb1tlXV09W10sbj0wO248Yy5sZW5ndGg7KytuKW8oY1tuXVtrb1tlXV0pJiZhW2tvW2VdXS5wdXNoKGNbbl1ba29bZV1dKTtmdW5jdGlvbiBmKHQpe3JldHVybiBuZXcgX3QodS50YWdOYW1lKHQpLnRvTG93ZXJDYXNlKCkse30sW10sdm9pZCAwLHQpfWZ1bmN0aW9uIGwodCxlKXtmdW5jdGlvbiBuKCl7MD09PS0tbi5saXN0ZW5lcnMmJnAodCl9cmV0dXJuIG4ubGlzdGVuZXJzPWUsbn1mdW5jdGlvbiBwKHQpe3ZhciBlPXUucGFyZW50Tm9kZSh0KTtvKGUpJiZ1LnJlbW92ZUNoaWxkKGUsdCl9ZnVuY3Rpb24gZCh0LGUsbixyLGEscyxjKXtpZihvKHQuZWxtKSYmbyhzKSYmKHQ9c1tjXT1DdCh0KSksdC5pc1Jvb3RJbnNlcnQ9IWEsIXYodCxlLG4scikpe3ZhciBmPXQuZGF0YSxsPXQuY2hpbGRyZW4scD10LnRhZztvKHApPyh0LmVsbT10Lm5zP3UuY3JlYXRlRWxlbWVudE5TKHQubnMscCk6dS5jcmVhdGVFbGVtZW50KHAsdCkseCh0KSxfKHQsbCxlKSxvKGYpJiZ3KHQsZSksZyhuLHQuZWxtLHIpKTppKHQuaXNDb21tZW50KT8odC5lbG09dS5jcmVhdGVDb21tZW50KHQudGV4dCksZyhuLHQuZWxtLHIpKToodC5lbG09dS5jcmVhdGVUZXh0Tm9kZSh0LnRleHQpLGcobix0LmVsbSxyKSl9fWZ1bmN0aW9uIHYodCxlLG4scil7dmFyIGE9dC5kYXRhO2lmKG8oYSkpe3ZhciBzPW8odC5jb21wb25lbnRJbnN0YW5jZSkmJmEua2VlcEFsaXZlO2lmKG8oYT1hLmhvb2spJiZvKGE9YS5pbml0KSYmYSh0LCExKSxvKHQuY29tcG9uZW50SW5zdGFuY2UpKXJldHVybiBoKHQsZSksZyhuLHQuZWxtLHIpLGkocykmJnkodCxlLG4sciksITB9fWZ1bmN0aW9uIGgodCxlKXtvKHQuZGF0YS5wZW5kaW5nSW5zZXJ0KSYmKGUucHVzaC5hcHBseShlLHQuZGF0YS5wZW5kaW5nSW5zZXJ0KSx0LmRhdGEucGVuZGluZ0luc2VydD1udWxsKSx0LmVsbT10LmNvbXBvbmVudEluc3RhbmNlLiRlbCxiKHQpPyh3KHQsZSkseCh0KSk6KFNvKHQpLGUucHVzaCh0KSl9ZnVuY3Rpb24geSh0LGUsbixyKXt2YXIgaSxzPXQ7d2hpbGUocy5jb21wb25lbnRJbnN0YW5jZSlpZihzPXMuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlLG8oaT1zLmRhdGEpJiZvKGk9aS50cmFuc2l0aW9uKSl7Zm9yKGk9MDtpPGEuYWN0aXZhdGUubGVuZ3RoOysraSlhLmFjdGl2YXRlW2ldKCRvLHMpO2UucHVzaChzKTticmVha31nKG4sdC5lbG0scil9ZnVuY3Rpb24gZyh0LGUsbil7byh0KSYmKG8obik/dS5wYXJlbnROb2RlKG4pPT09dCYmdS5pbnNlcnRCZWZvcmUodCxlLG4pOnUuYXBwZW5kQ2hpbGQodCxlKSl9ZnVuY3Rpb24gXyh0LGUsbil7aWYoQXJyYXkuaXNBcnJheShlKSl7MDtmb3IodmFyIHI9MDtyPGUubGVuZ3RoOysrcilkKGVbcl0sbix0LmVsbSxudWxsLCEwLGUscil9ZWxzZSBzKHQudGV4dCkmJnUuYXBwZW5kQ2hpbGQodC5lbG0sdS5jcmVhdGVUZXh0Tm9kZShTdHJpbmcodC50ZXh0KSkpfWZ1bmN0aW9uIGIodCl7d2hpbGUodC5jb21wb25lbnRJbnN0YW5jZSl0PXQuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO3JldHVybiBvKHQudGFnKX1mdW5jdGlvbiB3KHQsbil7Zm9yKHZhciByPTA7cjxhLmNyZWF0ZS5sZW5ndGg7KytyKWEuY3JlYXRlW3JdKCRvLHQpO2U9dC5kYXRhLmhvb2ssbyhlKSYmKG8oZS5jcmVhdGUpJiZlLmNyZWF0ZSgkbyx0KSxvKGUuaW5zZXJ0KSYmbi5wdXNoKHQpKX1mdW5jdGlvbiB4KHQpe3ZhciBlO2lmKG8oZT10LmZuU2NvcGVJZCkpdS5zZXRTdHlsZVNjb3BlKHQuZWxtLGUpO2Vsc2V7dmFyIG49dDt3aGlsZShuKW8oZT1uLmNvbnRleHQpJiZvKGU9ZS4kb3B0aW9ucy5fc2NvcGVJZCkmJnUuc2V0U3R5bGVTY29wZSh0LmVsbSxlKSxuPW4ucGFyZW50fW8oZT1qbikmJmUhPT10LmNvbnRleHQmJmUhPT10LmZuQ29udGV4dCYmbyhlPWUuJG9wdGlvbnMuX3Njb3BlSWQpJiZ1LnNldFN0eWxlU2NvcGUodC5lbG0sZSl9ZnVuY3Rpb24gQyh0LGUsbixyLG8saSl7Zm9yKDtyPD1vOysrcilkKG5bcl0saSx0LGUsITEsbixyKX1mdW5jdGlvbiBBKHQpe3ZhciBlLG4scj10LmRhdGE7aWYobyhyKSlmb3IobyhlPXIuaG9vaykmJm8oZT1lLmRlc3Ryb3kpJiZlKHQpLGU9MDtlPGEuZGVzdHJveS5sZW5ndGg7KytlKWEuZGVzdHJveVtlXSh0KTtpZihvKGU9dC5jaGlsZHJlbikpZm9yKG49MDtuPHQuY2hpbGRyZW4ubGVuZ3RoOysrbilBKHQuY2hpbGRyZW5bbl0pfWZ1bmN0aW9uIE8odCxlLG4scil7Zm9yKDtuPD1yOysrbil7dmFyIGk9ZVtuXTtvKGkpJiYobyhpLnRhZyk/KFMoaSksQShpKSk6cChpLmVsbSkpfX1mdW5jdGlvbiBTKHQsZSl7aWYobyhlKXx8byh0LmRhdGEpKXt2YXIgbixyPWEucmVtb3ZlLmxlbmd0aCsxO2ZvcihvKGUpP2UubGlzdGVuZXJzKz1yOmU9bCh0LmVsbSxyKSxvKG49dC5jb21wb25lbnRJbnN0YW5jZSkmJm8obj1uLl92bm9kZSkmJm8obi5kYXRhKSYmUyhuLGUpLG49MDtuPGEucmVtb3ZlLmxlbmd0aDsrK24pYS5yZW1vdmVbbl0odCxlKTtvKG49dC5kYXRhLmhvb2spJiZvKG49bi5yZW1vdmUpP24odCxlKTplKCl9ZWxzZSBwKHQuZWxtKX1mdW5jdGlvbiAkKHQsZSxuLGksYSl7dmFyIHMsYyxmLGwscD0wLHY9MCxoPWUubGVuZ3RoLTEsbT1lWzBdLHk9ZVtoXSxnPW4ubGVuZ3RoLTEsXz1uWzBdLGI9bltnXSx3PSFhO3doaWxlKHA8PWgmJnY8PWcpcihtKT9tPWVbKytwXTpyKHkpP3k9ZVstLWhdOkVvKG0sXyk/KEUobSxfLGksbix2KSxtPWVbKytwXSxfPW5bKyt2XSk6RW8oeSxiKT8oRSh5LGIsaSxuLGcpLHk9ZVstLWhdLGI9blstLWddKTpFbyhtLGIpPyhFKG0sYixpLG4sZyksdyYmdS5pbnNlcnRCZWZvcmUodCxtLmVsbSx1Lm5leHRTaWJsaW5nKHkuZWxtKSksbT1lWysrcF0sYj1uWy0tZ10pOkVvKHksXyk/KEUoeSxfLGksbix2KSx3JiZ1Lmluc2VydEJlZm9yZSh0LHkuZWxtLG0uZWxtKSx5PWVbLS1oXSxfPW5bKyt2XSk6KHIocykmJihzPVRvKGUscCxoKSksYz1vKF8ua2V5KT9zW18ua2V5XTprKF8sZSxwLGgpLHIoYyk/ZChfLGksdCxtLmVsbSwhMSxuLHYpOihmPWVbY10sRW8oZixfKT8oRShmLF8saSxuLHYpLGVbY109dm9pZCAwLHcmJnUuaW5zZXJ0QmVmb3JlKHQsZi5lbG0sbS5lbG0pKTpkKF8saSx0LG0uZWxtLCExLG4sdikpLF89blsrK3ZdKTtwPmg/KGw9cihuW2crMV0pP251bGw6bltnKzFdLmVsbSxDKHQsbCxuLHYsZyxpKSk6dj5nJiZPKHQsZSxwLGgpfWZ1bmN0aW9uIGsodCxlLG4scil7Zm9yKHZhciBpPW47aTxyO2krKyl7dmFyIGE9ZVtpXTtpZihvKGEpJiZFbyh0LGEpKXJldHVybiBpfX1mdW5jdGlvbiBFKHQsZSxuLHMsYyxmKXtpZih0IT09ZSl7byhlLmVsbSkmJm8ocykmJihlPXNbY109Q3QoZSkpO3ZhciBsPWUuZWxtPXQuZWxtO2lmKGkodC5pc0FzeW5jUGxhY2Vob2xkZXIpKW8oZS5hc3luY0ZhY3RvcnkucmVzb2x2ZWQpP1AodC5lbG0sZSxuKTplLmlzQXN5bmNQbGFjZWhvbGRlcj0hMDtlbHNlIGlmKGkoZS5pc1N0YXRpYykmJmkodC5pc1N0YXRpYykmJmUua2V5PT09dC5rZXkmJihpKGUuaXNDbG9uZWQpfHxpKGUuaXNPbmNlKSkpZS5jb21wb25lbnRJbnN0YW5jZT10LmNvbXBvbmVudEluc3RhbmNlO2Vsc2V7dmFyIHAsZD1lLmRhdGE7byhkKSYmbyhwPWQuaG9vaykmJm8ocD1wLnByZXBhdGNoKSYmcCh0LGUpO3ZhciB2PXQuY2hpbGRyZW4saD1lLmNoaWxkcmVuO2lmKG8oZCkmJmIoZSkpe2ZvcihwPTA7cDxhLnVwZGF0ZS5sZW5ndGg7KytwKWEudXBkYXRlW3BdKHQsZSk7byhwPWQuaG9vaykmJm8ocD1wLnVwZGF0ZSkmJnAodCxlKX1yKGUudGV4dCk/byh2KSYmbyhoKT92IT09aCYmJChsLHYsaCxuLGYpOm8oaCk/KG8odC50ZXh0KSYmdS5zZXRUZXh0Q29udGVudChsLCIiKSxDKGwsbnVsbCxoLDAsaC5sZW5ndGgtMSxuKSk6byh2KT9PKGwsdiwwLHYubGVuZ3RoLTEpOm8odC50ZXh0KSYmdS5zZXRUZXh0Q29udGVudChsLCIiKTp0LnRleHQhPT1lLnRleHQmJnUuc2V0VGV4dENvbnRlbnQobCxlLnRleHQpLG8oZCkmJm8ocD1kLmhvb2spJiZvKHA9cC5wb3N0cGF0Y2gpJiZwKHQsZSl9fX1mdW5jdGlvbiBqKHQsZSxuKXtpZihpKG4pJiZvKHQucGFyZW50KSl0LnBhcmVudC5kYXRhLnBlbmRpbmdJbnNlcnQ9ZTtlbHNlIGZvcih2YXIgcj0wO3I8ZS5sZW5ndGg7KytyKWVbcl0uZGF0YS5ob29rLmluc2VydChlW3JdKX12YXIgVD1tKCJhdHRycyxjbGFzcyxzdGF0aWNDbGFzcyxzdGF0aWNTdHlsZSxrZXkiKTtmdW5jdGlvbiBQKHQsZSxuLHIpe3ZhciBhLHM9ZS50YWcsYz1lLmRhdGEsdT1lLmNoaWxkcmVuO2lmKHI9cnx8YyYmYy5wcmUsZS5lbG09dCxpKGUuaXNDb21tZW50KSYmbyhlLmFzeW5jRmFjdG9yeSkpcmV0dXJuIGUuaXNBc3luY1BsYWNlaG9sZGVyPSEwLCEwO2lmKG8oYykmJihvKGE9Yy5ob29rKSYmbyhhPWEuaW5pdCkmJmEoZSwhMCksbyhhPWUuY29tcG9uZW50SW5zdGFuY2UpKSlyZXR1cm4gaChlLG4pLCEwO2lmKG8ocykpe2lmKG8odSkpaWYodC5oYXNDaGlsZE5vZGVzKCkpaWYobyhhPWMpJiZvKGE9YS5kb21Qcm9wcykmJm8oYT1hLmlubmVySFRNTCkpe2lmKGEhPT10LmlubmVySFRNTClyZXR1cm4hMX1lbHNle2Zvcih2YXIgZj0hMCxsPXQuZmlyc3RDaGlsZCxwPTA7cDx1Lmxlbmd0aDtwKyspe2lmKCFsfHwhUChsLHVbcF0sbixyKSl7Zj0hMTticmVha31sPWwubmV4dFNpYmxpbmd9aWYoIWZ8fGwpcmV0dXJuITF9ZWxzZSBfKGUsdSxuKTtpZihvKGMpKXt2YXIgZD0hMTtmb3IodmFyIHYgaW4gYylpZighVCh2KSl7ZD0hMCx3KGUsbik7YnJlYWt9IWQmJmNbImNsYXNzIl0mJm1lKGNbImNsYXNzIl0pfX1lbHNlIHQuZGF0YSE9PWUudGV4dCYmKHQuZGF0YT1lLnRleHQpO3JldHVybiEwfXJldHVybiBmdW5jdGlvbih0LGUsbixzKXtpZighcihlKSl7dmFyIGM9ITEsbD1bXTtpZihyKHQpKWM9ITAsZChlLGwpO2Vsc2V7dmFyIHA9byh0Lm5vZGVUeXBlKTtpZighcCYmRW8odCxlKSlFKHQsZSxsLG51bGwsbnVsbCxzKTtlbHNle2lmKHApe2lmKDE9PT10Lm5vZGVUeXBlJiZ0Lmhhc0F0dHJpYnV0ZShNKSYmKHQucmVtb3ZlQXR0cmlidXRlKE0pLG49ITApLGkobikmJlAodCxlLGwpKXJldHVybiBqKGUsbCwhMCksdDt0PWYodCl9dmFyIHY9dC5lbG0saD11LnBhcmVudE5vZGUodik7aWYoZChlLGwsdi5fbGVhdmVDYj9udWxsOmgsdS5uZXh0U2libGluZyh2KSksbyhlLnBhcmVudCkpe3ZhciBtPWUucGFyZW50LHk9YihlKTt3aGlsZShtKXtmb3IodmFyIGc9MDtnPGEuZGVzdHJveS5sZW5ndGg7KytnKWEuZGVzdHJveVtnXShtKTtpZihtLmVsbT1lLmVsbSx5KXtmb3IodmFyIF89MDtfPGEuY3JlYXRlLmxlbmd0aDsrK18pYS5jcmVhdGVbX10oJG8sbSk7dmFyIHc9bS5kYXRhLmhvb2suaW5zZXJ0O2lmKHcubWVyZ2VkKWZvcih2YXIgeD0xO3g8dy5mbnMubGVuZ3RoO3grKyl3LmZuc1t4XSgpfWVsc2UgU28obSk7bT1tLnBhcmVudH19byhoKT9PKGgsW3RdLDAsMCk6byh0LnRhZykmJkEodCl9fXJldHVybiBqKGUsbCxjKSxlLmVsbX1vKHQpJiZBKHQpfX12YXIgSW89e2NyZWF0ZTpObyx1cGRhdGU6Tm8sZGVzdHJveTpmdW5jdGlvbih0KXtObyh0LCRvKX19O2Z1bmN0aW9uIE5vKHQsZSl7KHQuZGF0YS5kaXJlY3RpdmVzfHxlLmRhdGEuZGlyZWN0aXZlcykmJlJvKHQsZSl9ZnVuY3Rpb24gUm8odCxlKXt2YXIgbixyLG8saT10PT09JG8sYT1lPT09JG8scz1Mbyh0LmRhdGEuZGlyZWN0aXZlcyx0LmNvbnRleHQpLGM9TG8oZS5kYXRhLmRpcmVjdGl2ZXMsZS5jb250ZXh0KSx1PVtdLGY9W107Zm9yKG4gaW4gYylyPXNbbl0sbz1jW25dLHI/KG8ub2xkVmFsdWU9ci52YWx1ZSxvLm9sZEFyZz1yLmFyZyxNbyhvLCJ1cGRhdGUiLGUsdCksby5kZWYmJm8uZGVmLmNvbXBvbmVudFVwZGF0ZWQmJmYucHVzaChvKSk6KE1vKG8sImJpbmQiLGUsdCksby5kZWYmJm8uZGVmLmluc2VydGVkJiZ1LnB1c2gobykpO2lmKHUubGVuZ3RoKXt2YXIgbD1mdW5jdGlvbigpe2Zvcih2YXIgbj0wO248dS5sZW5ndGg7bisrKU1vKHVbbl0sImluc2VydGVkIixlLHQpfTtpP3dlKGUsImluc2VydCIsbCk6bCgpfWlmKGYubGVuZ3RoJiZ3ZShlLCJwb3N0cGF0Y2giLGZ1bmN0aW9uKCl7Zm9yKHZhciBuPTA7bjxmLmxlbmd0aDtuKyspTW8oZltuXSwiY29tcG9uZW50VXBkYXRlZCIsZSx0KX0pLCFpKWZvcihuIGluIHMpY1tuXXx8TW8oc1tuXSwidW5iaW5kIix0LHQsYSl9dmFyIERvPU9iamVjdC5jcmVhdGUobnVsbCk7ZnVuY3Rpb24gTG8odCxlKXt2YXIgbixyLG89T2JqZWN0LmNyZWF0ZShudWxsKTtpZighdClyZXR1cm4gbztmb3Iobj0wO248dC5sZW5ndGg7bisrKXI9dFtuXSxyLm1vZGlmaWVyc3x8KHIubW9kaWZpZXJzPURvKSxvW0ZvKHIpXT1yLHIuZGVmPUd0KGUuJG9wdGlvbnMsImRpcmVjdGl2ZXMiLHIubmFtZSwhMCk7cmV0dXJuIG99ZnVuY3Rpb24gRm8odCl7cmV0dXJuIHQucmF3TmFtZXx8dC5uYW1lKyIuIitPYmplY3Qua2V5cyh0Lm1vZGlmaWVyc3x8e30pLmpvaW4oIi4iKX1mdW5jdGlvbiBNbyh0LGUsbixyLG8pe3ZhciBpPXQuZGVmJiZ0LmRlZltlXTtpZihpKXRyeXtpKG4uZWxtLHQsbixyLG8pfWNhdGNoKENhKXtlZShDYSxuLmNvbnRleHQsImRpcmVjdGl2ZSAiK3QubmFtZSsiICIrZSsiIGhvb2siKX19dmFyIFVvPVtPbyxJb107ZnVuY3Rpb24gQm8odCxlKXt2YXIgbj1lLmNvbXBvbmVudE9wdGlvbnM7aWYoKCFvKG4pfHwhMSE9PW4uQ3Rvci5vcHRpb25zLmluaGVyaXRBdHRycykmJighcih0LmRhdGEuYXR0cnMpfHwhcihlLmRhdGEuYXR0cnMpKSl7dmFyIGksYSxzLGM9ZS5lbG0sdT10LmRhdGEuYXR0cnN8fHt9LGY9ZS5kYXRhLmF0dHJzfHx7fTtmb3IoaSBpbiBvKGYuX19vYl9fKSYmKGY9ZS5kYXRhLmF0dHJzPVQoe30sZikpLGYpYT1mW2ldLHM9dVtpXSxzIT09YSYmSG8oYyxpLGEpO2ZvcihpIGluKHR0fHxudCkmJmYudmFsdWUhPT11LnZhbHVlJiZIbyhjLCJ2YWx1ZSIsZi52YWx1ZSksdSlyKGZbaV0pJiYoV3IoaSk/Yy5yZW1vdmVBdHRyaWJ1dGVOUyhWcixLcihpKSk6QnIoaSl8fGMucmVtb3ZlQXR0cmlidXRlKGkpKX19ZnVuY3Rpb24gSG8odCxlLG4pe3QudGFnTmFtZS5pbmRleE9mKCItIik+LTE/em8odCxlLG4pOnFyKGUpP1hyKG4pP3QucmVtb3ZlQXR0cmlidXRlKGUpOihuPSJhbGxvd2Z1bGxzY3JlZW4iPT09ZSYmIkVNQkVEIj09PXQudGFnTmFtZT8idHJ1ZSI6ZSx0LnNldEF0dHJpYnV0ZShlLG4pKTpCcihlKT90LnNldEF0dHJpYnV0ZShlLHpyKGUsbikpOldyKGUpP1hyKG4pP3QucmVtb3ZlQXR0cmlidXRlTlMoVnIsS3IoZSkpOnQuc2V0QXR0cmlidXRlTlMoVnIsZSxuKTp6byh0LGUsbil9ZnVuY3Rpb24gem8odCxlLG4pe2lmKFhyKG4pKXQucmVtb3ZlQXR0cmlidXRlKGUpO2Vsc2V7aWYodHQmJiFldCYmIlRFWFRBUkVBIj09PXQudGFnTmFtZSYmInBsYWNlaG9sZGVyIj09PWUmJiIiIT09biYmIXQuX19pZXBoKXt2YXIgcj1mdW5jdGlvbihlKXtlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLHQucmVtb3ZlRXZlbnRMaXN0ZW5lcigiaW5wdXQiLHIpfTt0LmFkZEV2ZW50TGlzdGVuZXIoImlucHV0IixyKSx0Ll9faWVwaD0hMH10LnNldEF0dHJpYnV0ZShlLG4pfX12YXIgcW89e2NyZWF0ZTpCbyx1cGRhdGU6Qm99O2Z1bmN0aW9uIFZvKHQsZSl7dmFyIG49ZS5lbG0saT1lLmRhdGEsYT10LmRhdGE7aWYoIShyKGkuc3RhdGljQ2xhc3MpJiZyKGkuY2xhc3MpJiYocihhKXx8cihhLnN0YXRpY0NsYXNzKSYmcihhLmNsYXNzKSkpKXt2YXIgcz1HcihlKSxjPW4uX3RyYW5zaXRpb25DbGFzc2VzO28oYykmJihzPVFyKHMsWXIoYykpKSxzIT09bi5fcHJldkNsYXNzJiYobi5zZXRBdHRyaWJ1dGUoImNsYXNzIixzKSxuLl9wcmV2Q2xhc3M9cyl9fXZhciBXbyxLbz17Y3JlYXRlOlZvLHVwZGF0ZTpWb30sWG89Il9fciIsR289Il9fYyI7ZnVuY3Rpb24gSm8odCl7aWYobyh0W1hvXSkpe3ZhciBlPXR0PyJjaGFuZ2UiOiJpbnB1dCI7dFtlXT1bXS5jb25jYXQodFtYb10sdFtlXXx8W10pLGRlbGV0ZSB0W1hvXX1vKHRbR29dKSYmKHQuY2hhbmdlPVtdLmNvbmNhdCh0W0dvXSx0LmNoYW5nZXx8W10pLGRlbGV0ZSB0W0dvXSl9ZnVuY3Rpb24gWm8odCxlLG4pe3ZhciByPVdvO3JldHVybiBmdW5jdGlvbiBvKCl7dmFyIGk9ZS5hcHBseShudWxsLGFyZ3VtZW50cyk7bnVsbCE9PWkmJnRpKHQsbyxuLHIpfX12YXIgUW89YWUmJiEob3QmJk51bWJlcihvdFsxXSk8PTUzKTtmdW5jdGlvbiBZbyh0LGUsbixyKXtpZihRbyl7dmFyIG89S24saT1lO2U9aS5fd3JhcHBlcj1mdW5jdGlvbih0KXtpZih0LnRhcmdldD09PXQuY3VycmVudFRhcmdldHx8dC50aW1lU3RhbXA+PW98fHQudGltZVN0YW1wPD0wfHx0LnRhcmdldC5vd25lckRvY3VtZW50IT09ZG9jdW1lbnQpcmV0dXJuIGkuYXBwbHkodGhpcyxhcmd1bWVudHMpfX1Xby5hZGRFdmVudExpc3RlbmVyKHQsZSxhdD97Y2FwdHVyZTpuLHBhc3NpdmU6cn06bil9ZnVuY3Rpb24gdGkodCxlLG4scil7KHJ8fFdvKS5yZW1vdmVFdmVudExpc3RlbmVyKHQsZS5fd3JhcHBlcnx8ZSxuKX1mdW5jdGlvbiBlaSh0LGUpe2lmKCFyKHQuZGF0YS5vbil8fCFyKGUuZGF0YS5vbikpe3ZhciBuPWUuZGF0YS5vbnx8e30sbz10LmRhdGEub258fHt9O1dvPWUuZWxtLEpvKG4pLGJlKG4sbyxZbyx0aSxabyxlLmNvbnRleHQpLFdvPXZvaWQgMH19dmFyIG5pLHJpPXtjcmVhdGU6ZWksdXBkYXRlOmVpfTtmdW5jdGlvbiBvaSh0LGUpe2lmKCFyKHQuZGF0YS5kb21Qcm9wcyl8fCFyKGUuZGF0YS5kb21Qcm9wcykpe3ZhciBuLGksYT1lLmVsbSxzPXQuZGF0YS5kb21Qcm9wc3x8e30sYz1lLmRhdGEuZG9tUHJvcHN8fHt9O2ZvcihuIGluIG8oYy5fX29iX18pJiYoYz1lLmRhdGEuZG9tUHJvcHM9VCh7fSxjKSkscyluIGluIGN8fChhW25dPSIiKTtmb3IobiBpbiBjKXtpZihpPWNbbl0sInRleHRDb250ZW50Ij09PW58fCJpbm5lckhUTUwiPT09bil7aWYoZS5jaGlsZHJlbiYmKGUuY2hpbGRyZW4ubGVuZ3RoPTApLGk9PT1zW25dKWNvbnRpbnVlOzE9PT1hLmNoaWxkTm9kZXMubGVuZ3RoJiZhLnJlbW92ZUNoaWxkKGEuY2hpbGROb2Rlc1swXSl9aWYoInZhbHVlIj09PW4mJiJQUk9HUkVTUyIhPT1hLnRhZ05hbWUpe2EuX3ZhbHVlPWk7dmFyIHU9cihpKT8iIjpTdHJpbmcoaSk7aWkoYSx1KSYmKGEudmFsdWU9dSl9ZWxzZSBpZigiaW5uZXJIVE1MIj09PW4mJm9vKGEudGFnTmFtZSkmJnIoYS5pbm5lckhUTUwpKXtuaT1uaXx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2IiksbmkuaW5uZXJIVE1MPSI8c3ZnPiIraSsiPC9zdmc+Ijt2YXIgZj1uaS5maXJzdENoaWxkO3doaWxlKGEuZmlyc3RDaGlsZClhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7d2hpbGUoZi5maXJzdENoaWxkKWEuYXBwZW5kQ2hpbGQoZi5maXJzdENoaWxkKX1lbHNlIGlmKGkhPT1zW25dKXRyeXthW25dPWl9Y2F0Y2goQ2Epe319fX1mdW5jdGlvbiBpaSh0LGUpe3JldHVybiF0LmNvbXBvc2luZyYmKCJPUFRJT04iPT09dC50YWdOYW1lfHxhaSh0LGUpfHxzaSh0LGUpKX1mdW5jdGlvbiBhaSh0LGUpe3ZhciBuPSEwO3RyeXtuPWRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT10fWNhdGNoKENhKXt9cmV0dXJuIG4mJnQudmFsdWUhPT1lfWZ1bmN0aW9uIHNpKHQsZSl7dmFyIG49dC52YWx1ZSxyPXQuX3ZNb2RpZmllcnM7aWYobyhyKSl7aWYoci5udW1iZXIpcmV0dXJuIGgobikhPT1oKGUpO2lmKHIudHJpbSlyZXR1cm4gbi50cmltKCkhPT1lLnRyaW0oKX1yZXR1cm4gbiE9PWV9dmFyIGNpPXtjcmVhdGU6b2ksdXBkYXRlOm9pfSx1aT13KGZ1bmN0aW9uKHQpe3ZhciBlPXt9LG49LzsoPyFbXihdKlwpKS9nLHI9LzooLispLztyZXR1cm4gdC5zcGxpdChuKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2lmKHQpe3ZhciBuPXQuc3BsaXQocik7bi5sZW5ndGg+MSYmKGVbblswXS50cmltKCldPW5bMV0udHJpbSgpKX19KSxlfSk7ZnVuY3Rpb24gZmkodCl7dmFyIGU9bGkodC5zdHlsZSk7cmV0dXJuIHQuc3RhdGljU3R5bGU/VCh0LnN0YXRpY1N0eWxlLGUpOmV9ZnVuY3Rpb24gbGkodCl7cmV0dXJuIEFycmF5LmlzQXJyYXkodCk/UCh0KToic3RyaW5nIj09PXR5cGVvZiB0P3VpKHQpOnR9ZnVuY3Rpb24gcGkodCxlKXt2YXIgbixyPXt9O2lmKGUpe3ZhciBvPXQ7d2hpbGUoby5jb21wb25lbnRJbnN0YW5jZSlvPW8uY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlLG8mJm8uZGF0YSYmKG49Zmkoby5kYXRhKSkmJlQocixuKX0obj1maSh0LmRhdGEpKSYmVChyLG4pO3ZhciBpPXQ7d2hpbGUoaT1pLnBhcmVudClpLmRhdGEmJihuPWZpKGkuZGF0YSkpJiZUKHIsbik7cmV0dXJuIHJ9dmFyIGRpLHZpPS9eLS0vLGhpPS9ccyohaW1wb3J0YW50JC8sbWk9ZnVuY3Rpb24odCxlLG4pe2lmKHZpLnRlc3QoZSkpdC5zdHlsZS5zZXRQcm9wZXJ0eShlLG4pO2Vsc2UgaWYoaGkudGVzdChuKSl0LnN0eWxlLnNldFByb3BlcnR5KFMoZSksbi5yZXBsYWNlKGhpLCIiKSwiaW1wb3J0YW50Iik7ZWxzZXt2YXIgcj1naShlKTtpZihBcnJheS5pc0FycmF5KG4pKWZvcih2YXIgbz0wLGk9bi5sZW5ndGg7bzxpO28rKyl0LnN0eWxlW3JdPW5bb107ZWxzZSB0LnN0eWxlW3JdPW59fSx5aT1bIldlYmtpdCIsIk1veiIsIm1zIl0sZ2k9dyhmdW5jdGlvbih0KXtpZihkaT1kaXx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iikuc3R5bGUsdD1DKHQpLCJmaWx0ZXIiIT09dCYmdCBpbiBkaSlyZXR1cm4gdDtmb3IodmFyIGU9dC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSt0LnNsaWNlKDEpLG49MDtuPHlpLmxlbmd0aDtuKyspe3ZhciByPXlpW25dK2U7aWYociBpbiBkaSlyZXR1cm4gcn19KTtmdW5jdGlvbiBfaSh0LGUpe3ZhciBuPWUuZGF0YSxpPXQuZGF0YTtpZighKHIobi5zdGF0aWNTdHlsZSkmJnIobi5zdHlsZSkmJnIoaS5zdGF0aWNTdHlsZSkmJnIoaS5zdHlsZSkpKXt2YXIgYSxzLGM9ZS5lbG0sdT1pLnN0YXRpY1N0eWxlLGY9aS5ub3JtYWxpemVkU3R5bGV8fGkuc3R5bGV8fHt9LGw9dXx8ZixwPWxpKGUuZGF0YS5zdHlsZSl8fHt9O2UuZGF0YS5ub3JtYWxpemVkU3R5bGU9byhwLl9fb2JfXyk/VCh7fSxwKTpwO3ZhciBkPXBpKGUsITApO2ZvcihzIGluIGwpcihkW3NdKSYmbWkoYyxzLCIiKTtmb3IocyBpbiBkKWE9ZFtzXSxhIT09bFtzXSYmbWkoYyxzLG51bGw9PWE/IiI6YSl9fXZhciBiaT17Y3JlYXRlOl9pLHVwZGF0ZTpfaX0sd2k9L1xzKy87ZnVuY3Rpb24geGkodCxlKXtpZihlJiYoZT1lLnRyaW0oKSkpaWYodC5jbGFzc0xpc3QpZS5pbmRleE9mKCIgIik+LTE/ZS5zcGxpdCh3aSkuZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gdC5jbGFzc0xpc3QuYWRkKGUpfSk6dC5jbGFzc0xpc3QuYWRkKGUpO2Vsc2V7dmFyIG49IiAiKyh0LmdldEF0dHJpYnV0ZSgiY2xhc3MiKXx8IiIpKyIgIjtuLmluZGV4T2YoIiAiK2UrIiAiKTwwJiZ0LnNldEF0dHJpYnV0ZSgiY2xhc3MiLChuK2UpLnRyaW0oKSl9fWZ1bmN0aW9uIENpKHQsZSl7aWYoZSYmKGU9ZS50cmltKCkpKWlmKHQuY2xhc3NMaXN0KWUuaW5kZXhPZigiICIpPi0xP2Uuc3BsaXQod2kpLmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIHQuY2xhc3NMaXN0LnJlbW92ZShlKX0pOnQuY2xhc3NMaXN0LnJlbW92ZShlKSx0LmNsYXNzTGlzdC5sZW5ndGh8fHQucmVtb3ZlQXR0cmlidXRlKCJjbGFzcyIpO2Vsc2V7dmFyIG49IiAiKyh0LmdldEF0dHJpYnV0ZSgiY2xhc3MiKXx8IiIpKyIgIixyPSIgIitlKyIgIjt3aGlsZShuLmluZGV4T2Yocik+PTApbj1uLnJlcGxhY2UociwiICIpO249bi50cmltKCksbj90LnNldEF0dHJpYnV0ZSgiY2xhc3MiLG4pOnQucmVtb3ZlQXR0cmlidXRlKCJjbGFzcyIpfX1mdW5jdGlvbiBBaSh0KXtpZih0KXtpZigib2JqZWN0Ij09PXR5cGVvZiB0KXt2YXIgZT17fTtyZXR1cm4hMSE9PXQuY3NzJiZUKGUsT2kodC5uYW1lfHwidiIpKSxUKGUsdCksZX1yZXR1cm4ic3RyaW5nIj09PXR5cGVvZiB0P09pKHQpOnZvaWQgMH19dmFyIE9pPXcoZnVuY3Rpb24odCl7cmV0dXJue2VudGVyQ2xhc3M6dCsiLWVudGVyIixlbnRlclRvQ2xhc3M6dCsiLWVudGVyLXRvIixlbnRlckFjdGl2ZUNsYXNzOnQrIi1lbnRlci1hY3RpdmUiLGxlYXZlQ2xhc3M6dCsiLWxlYXZlIixsZWF2ZVRvQ2xhc3M6dCsiLWxlYXZlLXRvIixsZWF2ZUFjdGl2ZUNsYXNzOnQrIi1sZWF2ZS1hY3RpdmUifX0pLFNpPUomJiFldCwkaT0idHJhbnNpdGlvbiIsa2k9ImFuaW1hdGlvbiIsRWk9InRyYW5zaXRpb24iLGppPSJ0cmFuc2l0aW9uZW5kIixUaT0iYW5pbWF0aW9uIixQaT0iYW5pbWF0aW9uZW5kIjtTaSYmKHZvaWQgMD09PXdpbmRvdy5vbnRyYW5zaXRpb25lbmQmJnZvaWQgMCE9PXdpbmRvdy5vbndlYmtpdHRyYW5zaXRpb25lbmQmJihFaT0iV2Via2l0VHJhbnNpdGlvbiIsamk9IndlYmtpdFRyYW5zaXRpb25FbmQiKSx2b2lkIDA9PT13aW5kb3cub25hbmltYXRpb25lbmQmJnZvaWQgMCE9PXdpbmRvdy5vbndlYmtpdGFuaW1hdGlvbmVuZCYmKFRpPSJXZWJraXRBbmltYXRpb24iLFBpPSJ3ZWJraXRBbmltYXRpb25FbmQiKSk7dmFyIElpPUo/d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZT93aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KTpzZXRUaW1lb3V0OmZ1bmN0aW9uKHQpe3JldHVybiB0KCl9O2Z1bmN0aW9uIE5pKHQpe0lpKGZ1bmN0aW9uKCl7SWkodCl9KX1mdW5jdGlvbiBSaSh0LGUpe3ZhciBuPXQuX3RyYW5zaXRpb25DbGFzc2VzfHwodC5fdHJhbnNpdGlvbkNsYXNzZXM9W10pO24uaW5kZXhPZihlKTwwJiYobi5wdXNoKGUpLHhpKHQsZSkpfWZ1bmN0aW9uIERpKHQsZSl7dC5fdHJhbnNpdGlvbkNsYXNzZXMmJmcodC5fdHJhbnNpdGlvbkNsYXNzZXMsZSksQ2kodCxlKX1mdW5jdGlvbiBMaSh0LGUsbil7dmFyIHI9TWkodCxlKSxvPXIudHlwZSxpPXIudGltZW91dCxhPXIucHJvcENvdW50O2lmKCFvKXJldHVybiBuKCk7dmFyIHM9bz09PSRpP2ppOlBpLGM9MCx1PWZ1bmN0aW9uKCl7dC5yZW1vdmVFdmVudExpc3RlbmVyKHMsZiksbigpfSxmPWZ1bmN0aW9uKGUpe2UudGFyZ2V0PT09dCYmKytjPj1hJiZ1KCl9O3NldFRpbWVvdXQoZnVuY3Rpb24oKXtjPGEmJnUoKX0saSsxKSx0LmFkZEV2ZW50TGlzdGVuZXIocyxmKX12YXIgRmk9L1xiKHRyYW5zZm9ybXxhbGwpKCx8JCkvO2Z1bmN0aW9uIE1pKHQsZSl7dmFyIG4scj13aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0KSxvPShyW0VpKyJEZWxheSJdfHwiIikuc3BsaXQoIiwgIiksaT0ocltFaSsiRHVyYXRpb24iXXx8IiIpLnNwbGl0KCIsICIpLGE9VWkobyxpKSxzPShyW1RpKyJEZWxheSJdfHwiIikuc3BsaXQoIiwgIiksYz0ocltUaSsiRHVyYXRpb24iXXx8IiIpLnNwbGl0KCIsICIpLHU9VWkocyxjKSxmPTAsbD0wO2U9PT0kaT9hPjAmJihuPSRpLGY9YSxsPWkubGVuZ3RoKTplPT09a2k/dT4wJiYobj1raSxmPXUsbD1jLmxlbmd0aCk6KGY9TWF0aC5tYXgoYSx1KSxuPWY+MD9hPnU/JGk6a2k6bnVsbCxsPW4/bj09PSRpP2kubGVuZ3RoOmMubGVuZ3RoOjApO3ZhciBwPW49PT0kaSYmRmkudGVzdChyW0VpKyJQcm9wZXJ0eSJdKTtyZXR1cm57dHlwZTpuLHRpbWVvdXQ6Zixwcm9wQ291bnQ6bCxoYXNUcmFuc2Zvcm06cH19ZnVuY3Rpb24gVWkodCxlKXt3aGlsZSh0Lmxlbmd0aDxlLmxlbmd0aCl0PXQuY29uY2F0KHQpO3JldHVybiBNYXRoLm1heC5hcHBseShudWxsLGUubWFwKGZ1bmN0aW9uKGUsbil7cmV0dXJuIEJpKGUpK0JpKHRbbl0pfSkpfWZ1bmN0aW9uIEJpKHQpe3JldHVybiAxZTMqTnVtYmVyKHQuc2xpY2UoMCwtMSkucmVwbGFjZSgiLCIsIi4iKSl9ZnVuY3Rpb24gSGkodCxlKXt2YXIgbj10LmVsbTtvKG4uX2xlYXZlQ2IpJiYobi5fbGVhdmVDYi5jYW5jZWxsZWQ9ITAsbi5fbGVhdmVDYigpKTt2YXIgaT1BaSh0LmRhdGEudHJhbnNpdGlvbik7aWYoIXIoaSkmJiFvKG4uX2VudGVyQ2IpJiYxPT09bi5ub2RlVHlwZSl7dmFyIGE9aS5jc3Mscz1pLnR5cGUsdT1pLmVudGVyQ2xhc3MsZj1pLmVudGVyVG9DbGFzcyxsPWkuZW50ZXJBY3RpdmVDbGFzcyxwPWkuYXBwZWFyQ2xhc3MsZD1pLmFwcGVhclRvQ2xhc3Msdj1pLmFwcGVhckFjdGl2ZUNsYXNzLG09aS5iZWZvcmVFbnRlcix5PWkuZW50ZXIsZz1pLmFmdGVyRW50ZXIsXz1pLmVudGVyQ2FuY2VsbGVkLGI9aS5iZWZvcmVBcHBlYXIsdz1pLmFwcGVhcix4PWkuYWZ0ZXJBcHBlYXIsQz1pLmFwcGVhckNhbmNlbGxlZCxBPWkuZHVyYXRpb24sTz1qbixTPWpuLiR2bm9kZTt3aGlsZShTJiZTLnBhcmVudClPPVMuY29udGV4dCxTPVMucGFyZW50O3ZhciAkPSFPLl9pc01vdW50ZWR8fCF0LmlzUm9vdEluc2VydDtpZighJHx8d3x8IiI9PT13KXt2YXIgaz0kJiZwP3A6dSxFPSQmJnY/djpsLGo9JCYmZD9kOmYsVD0kJiZifHxtLFA9JCYmImZ1bmN0aW9uIj09PXR5cGVvZiB3P3c6eSxJPSQmJnh8fGcsTj0kJiZDfHxfLFI9aChjKEEpP0EuZW50ZXI6QSk7MDt2YXIgRD0hMSE9PWEmJiFldCxMPVZpKFApLE09bi5fZW50ZXJDYj1GKGZ1bmN0aW9uKCl7RCYmKERpKG4saiksRGkobixFKSksTS5jYW5jZWxsZWQ/KEQmJkRpKG4sayksTiYmTihuKSk6SSYmSShuKSxuLl9lbnRlckNiPW51bGx9KTt0LmRhdGEuc2hvd3x8d2UodCwiaW5zZXJ0IixmdW5jdGlvbigpe3ZhciBlPW4ucGFyZW50Tm9kZSxyPWUmJmUuX3BlbmRpbmcmJmUuX3BlbmRpbmdbdC5rZXldO3ImJnIudGFnPT09dC50YWcmJnIuZWxtLl9sZWF2ZUNiJiZyLmVsbS5fbGVhdmVDYigpLFAmJlAobixNKX0pLFQmJlQobiksRCYmKFJpKG4sayksUmkobixFKSxOaShmdW5jdGlvbigpe0RpKG4sayksTS5jYW5jZWxsZWR8fChSaShuLGopLEx8fChxaShSKT9zZXRUaW1lb3V0KE0sUik6TGkobixzLE0pKSl9KSksdC5kYXRhLnNob3cmJihlJiZlKCksUCYmUChuLE0pKSxEfHxMfHxNKCl9fX1mdW5jdGlvbiB6aSh0LGUpe3ZhciBuPXQuZWxtO28obi5fZW50ZXJDYikmJihuLl9lbnRlckNiLmNhbmNlbGxlZD0hMCxuLl9lbnRlckNiKCkpO3ZhciBpPUFpKHQuZGF0YS50cmFuc2l0aW9uKTtpZihyKGkpfHwxIT09bi5ub2RlVHlwZSlyZXR1cm4gZSgpO2lmKCFvKG4uX2xlYXZlQ2IpKXt2YXIgYT1pLmNzcyxzPWkudHlwZSx1PWkubGVhdmVDbGFzcyxmPWkubGVhdmVUb0NsYXNzLGw9aS5sZWF2ZUFjdGl2ZUNsYXNzLHA9aS5iZWZvcmVMZWF2ZSxkPWkubGVhdmUsdj1pLmFmdGVyTGVhdmUsbT1pLmxlYXZlQ2FuY2VsbGVkLHk9aS5kZWxheUxlYXZlLGc9aS5kdXJhdGlvbixfPSExIT09YSYmIWV0LGI9VmkoZCksdz1oKGMoZyk/Zy5sZWF2ZTpnKTswO3ZhciB4PW4uX2xlYXZlQ2I9RihmdW5jdGlvbigpe24ucGFyZW50Tm9kZSYmbi5wYXJlbnROb2RlLl9wZW5kaW5nJiYobi5wYXJlbnROb2RlLl9wZW5kaW5nW3Qua2V5XT1udWxsKSxfJiYoRGkobixmKSxEaShuLGwpKSx4LmNhbmNlbGxlZD8oXyYmRGkobix1KSxtJiZtKG4pKTooZSgpLHYmJnYobikpLG4uX2xlYXZlQ2I9bnVsbH0pO3k/eShDKTpDKCl9ZnVuY3Rpb24gQygpe3guY2FuY2VsbGVkfHwoIXQuZGF0YS5zaG93JiZuLnBhcmVudE5vZGUmJigobi5wYXJlbnROb2RlLl9wZW5kaW5nfHwobi5wYXJlbnROb2RlLl9wZW5kaW5nPXt9KSlbdC5rZXldPXQpLHAmJnAobiksXyYmKFJpKG4sdSksUmkobixsKSxOaShmdW5jdGlvbigpe0RpKG4sdSkseC5jYW5jZWxsZWR8fChSaShuLGYpLGJ8fChxaSh3KT9zZXRUaW1lb3V0KHgsdyk6TGkobixzLHgpKSl9KSksZCYmZChuLHgpLF98fGJ8fHgoKSl9fWZ1bmN0aW9uIHFpKHQpe3JldHVybiJudW1iZXIiPT09dHlwZW9mIHQmJiFpc05hTih0KX1mdW5jdGlvbiBWaSh0KXtpZihyKHQpKXJldHVybiExO3ZhciBlPXQuZm5zO3JldHVybiBvKGUpP1ZpKEFycmF5LmlzQXJyYXkoZSk/ZVswXTplKToodC5fbGVuZ3RofHx0Lmxlbmd0aCk+MX1mdW5jdGlvbiBXaSh0LGUpeyEwIT09ZS5kYXRhLnNob3cmJkhpKGUpfXZhciBLaT1KP3tjcmVhdGU6V2ksYWN0aXZhdGU6V2kscmVtb3ZlOmZ1bmN0aW9uKHQsZSl7ITAhPT10LmRhdGEuc2hvdz96aSh0LGUpOmUoKX19Ont9LFhpPVtxbyxLbyxyaSxjaSxiaSxLaV0sR2k9WGkuY29uY2F0KFVvKSxKaT1Qbyh7bm9kZU9wczpBbyxtb2R1bGVzOkdpfSk7ZXQmJmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoInNlbGVjdGlvbmNoYW5nZSIsZnVuY3Rpb24oKXt2YXIgdD1kb2N1bWVudC5hY3RpdmVFbGVtZW50O3QmJnQudm1vZGVsJiZvYSh0LCJpbnB1dCIpfSk7dmFyIFppPXtpbnNlcnRlZDpmdW5jdGlvbih0LGUsbixyKXsic2VsZWN0Ij09PW4udGFnPyhyLmVsbSYmIXIuZWxtLl92T3B0aW9ucz93ZShuLCJwb3N0cGF0Y2giLGZ1bmN0aW9uKCl7WmkuY29tcG9uZW50VXBkYXRlZCh0LGUsbil9KTpRaSh0LGUsbi5jb250ZXh0KSx0Ll92T3B0aW9ucz1bXS5tYXAuY2FsbCh0Lm9wdGlvbnMsZWEpKTooInRleHRhcmVhIj09PW4udGFnfHx1byh0LnR5cGUpKSYmKHQuX3ZNb2RpZmllcnM9ZS5tb2RpZmllcnMsZS5tb2RpZmllcnMubGF6eXx8KHQuYWRkRXZlbnRMaXN0ZW5lcigiY29tcG9zaXRpb25zdGFydCIsbmEpLHQuYWRkRXZlbnRMaXN0ZW5lcigiY29tcG9zaXRpb25lbmQiLHJhKSx0LmFkZEV2ZW50TGlzdGVuZXIoImNoYW5nZSIscmEpLGV0JiYodC52bW9kZWw9ITApKSl9LGNvbXBvbmVudFVwZGF0ZWQ6ZnVuY3Rpb24odCxlLG4pe2lmKCJzZWxlY3QiPT09bi50YWcpe1FpKHQsZSxuLmNvbnRleHQpO3ZhciByPXQuX3ZPcHRpb25zLG89dC5fdk9wdGlvbnM9W10ubWFwLmNhbGwodC5vcHRpb25zLGVhKTtpZihvLnNvbWUoZnVuY3Rpb24odCxlKXtyZXR1cm4hRCh0LHJbZV0pfSkpe3ZhciBpPXQubXVsdGlwbGU/ZS52YWx1ZS5zb21lKGZ1bmN0aW9uKHQpe3JldHVybiB0YSh0LG8pfSk6ZS52YWx1ZSE9PWUub2xkVmFsdWUmJnRhKGUudmFsdWUsbyk7aSYmb2EodCwiY2hhbmdlIil9fX19O2Z1bmN0aW9uIFFpKHQsZSxuKXtZaSh0LGUsbiksKHR0fHxudCkmJnNldFRpbWVvdXQoZnVuY3Rpb24oKXtZaSh0LGUsbil9LDApfWZ1bmN0aW9uIFlpKHQsZSxuKXt2YXIgcj1lLnZhbHVlLG89dC5tdWx0aXBsZTtpZighb3x8QXJyYXkuaXNBcnJheShyKSl7Zm9yKHZhciBpLGEscz0wLGM9dC5vcHRpb25zLmxlbmd0aDtzPGM7cysrKWlmKGE9dC5vcHRpb25zW3NdLG8paT1MKHIsZWEoYSkpPi0xLGEuc2VsZWN0ZWQhPT1pJiYoYS5zZWxlY3RlZD1pKTtlbHNlIGlmKEQoZWEoYSkscikpcmV0dXJuIHZvaWQodC5zZWxlY3RlZEluZGV4IT09cyYmKHQuc2VsZWN0ZWRJbmRleD1zKSk7b3x8KHQuc2VsZWN0ZWRJbmRleD0tMSl9fWZ1bmN0aW9uIHRhKHQsZSl7cmV0dXJuIGUuZXZlcnkoZnVuY3Rpb24oZSl7cmV0dXJuIUQoZSx0KX0pfWZ1bmN0aW9uIGVhKHQpe3JldHVybiJfdmFsdWUiaW4gdD90Ll92YWx1ZTp0LnZhbHVlfWZ1bmN0aW9uIG5hKHQpe3QudGFyZ2V0LmNvbXBvc2luZz0hMH1mdW5jdGlvbiByYSh0KXt0LnRhcmdldC5jb21wb3NpbmcmJih0LnRhcmdldC5jb21wb3Npbmc9ITEsb2EodC50YXJnZXQsImlucHV0IikpfWZ1bmN0aW9uIG9hKHQsZSl7dmFyIG49ZG9jdW1lbnQuY3JlYXRlRXZlbnQoIkhUTUxFdmVudHMiKTtuLmluaXRFdmVudChlLCEwLCEwKSx0LmRpc3BhdGNoRXZlbnQobil9ZnVuY3Rpb24gaWEodCl7cmV0dXJuIXQuY29tcG9uZW50SW5zdGFuY2V8fHQuZGF0YSYmdC5kYXRhLnRyYW5zaXRpb24/dDppYSh0LmNvbXBvbmVudEluc3RhbmNlLl92bm9kZSl9dmFyIGFhPXtiaW5kOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1lLnZhbHVlO249aWEobik7dmFyIG89bi5kYXRhJiZuLmRhdGEudHJhbnNpdGlvbixpPXQuX192T3JpZ2luYWxEaXNwbGF5PSJub25lIj09PXQuc3R5bGUuZGlzcGxheT8iIjp0LnN0eWxlLmRpc3BsYXk7ciYmbz8obi5kYXRhLnNob3c9ITAsSGkobixmdW5jdGlvbigpe3Quc3R5bGUuZGlzcGxheT1pfSkpOnQuc3R5bGUuZGlzcGxheT1yP2k6Im5vbmUifSx1cGRhdGU6ZnVuY3Rpb24odCxlLG4pe3ZhciByPWUudmFsdWUsbz1lLm9sZFZhbHVlO2lmKCFyIT09IW8pe249aWEobik7dmFyIGk9bi5kYXRhJiZuLmRhdGEudHJhbnNpdGlvbjtpPyhuLmRhdGEuc2hvdz0hMCxyP0hpKG4sZnVuY3Rpb24oKXt0LnN0eWxlLmRpc3BsYXk9dC5fX3ZPcmlnaW5hbERpc3BsYXl9KTp6aShuLGZ1bmN0aW9uKCl7dC5zdHlsZS5kaXNwbGF5PSJub25lIn0pKTp0LnN0eWxlLmRpc3BsYXk9cj90Ll9fdk9yaWdpbmFsRGlzcGxheToibm9uZSJ9fSx1bmJpbmQ6ZnVuY3Rpb24odCxlLG4scixvKXtvfHwodC5zdHlsZS5kaXNwbGF5PXQuX192T3JpZ2luYWxEaXNwbGF5KX19LHNhPXttb2RlbDpaaSxzaG93OmFhfSxjYT17bmFtZTpTdHJpbmcsYXBwZWFyOkJvb2xlYW4sY3NzOkJvb2xlYW4sbW9kZTpTdHJpbmcsdHlwZTpTdHJpbmcsZW50ZXJDbGFzczpTdHJpbmcsbGVhdmVDbGFzczpTdHJpbmcsZW50ZXJUb0NsYXNzOlN0cmluZyxsZWF2ZVRvQ2xhc3M6U3RyaW5nLGVudGVyQWN0aXZlQ2xhc3M6U3RyaW5nLGxlYXZlQWN0aXZlQ2xhc3M6U3RyaW5nLGFwcGVhckNsYXNzOlN0cmluZyxhcHBlYXJBY3RpdmVDbGFzczpTdHJpbmcsYXBwZWFyVG9DbGFzczpTdHJpbmcsZHVyYXRpb246W051bWJlcixTdHJpbmcsT2JqZWN0XX07ZnVuY3Rpb24gdWEodCl7dmFyIGU9dCYmdC5jb21wb25lbnRPcHRpb25zO3JldHVybiBlJiZlLkN0b3Iub3B0aW9ucy5hYnN0cmFjdD91YShDbihlLmNoaWxkcmVuKSk6dH1mdW5jdGlvbiBmYSh0KXt2YXIgZT17fSxuPXQuJG9wdGlvbnM7Zm9yKHZhciByIGluIG4ucHJvcHNEYXRhKWVbcl09dFtyXTt2YXIgbz1uLl9wYXJlbnRMaXN0ZW5lcnM7Zm9yKHZhciBpIGluIG8pZVtDKGkpXT1vW2ldO3JldHVybiBlfWZ1bmN0aW9uIGxhKHQsZSl7aWYoL1xkLWtlZXAtYWxpdmUkLy50ZXN0KGUudGFnKSlyZXR1cm4gdCgia2VlcC1hbGl2ZSIse3Byb3BzOmUuY29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGF9KX1mdW5jdGlvbiBwYSh0KXt3aGlsZSh0PXQucGFyZW50KWlmKHQuZGF0YS50cmFuc2l0aW9uKXJldHVybiEwfWZ1bmN0aW9uIGRhKHQsZSl7cmV0dXJuIGUua2V5PT09dC5rZXkmJmUudGFnPT09dC50YWd9dmFyIHZhPWZ1bmN0aW9uKHQpe3JldHVybiB0LnRhZ3x8eG4odCl9LGhhPWZ1bmN0aW9uKHQpe3JldHVybiJzaG93Ij09PXQubmFtZX0sbWE9e25hbWU6InRyYW5zaXRpb24iLHByb3BzOmNhLGFic3RyYWN0OiEwLHJlbmRlcjpmdW5jdGlvbih0KXt2YXIgZT10aGlzLG49dGhpcy4kc2xvdHMuZGVmYXVsdDtpZihuJiYobj1uLmZpbHRlcih2YSksbi5sZW5ndGgpKXswO3ZhciByPXRoaXMubW9kZTswO3ZhciBvPW5bMF07aWYocGEodGhpcy4kdm5vZGUpKXJldHVybiBvO3ZhciBpPXVhKG8pO2lmKCFpKXJldHVybiBvO2lmKHRoaXMuX2xlYXZpbmcpcmV0dXJuIGxhKHQsbyk7dmFyIGE9Il9fdHJhbnNpdGlvbi0iK3RoaXMuX3VpZCsiLSI7aS5rZXk9bnVsbD09aS5rZXk/aS5pc0NvbW1lbnQ/YSsiY29tbWVudCI6YStpLnRhZzpzKGkua2V5KT8wPT09U3RyaW5nKGkua2V5KS5pbmRleE9mKGEpP2kua2V5OmEraS5rZXk6aS5rZXk7dmFyIGM9KGkuZGF0YXx8KGkuZGF0YT17fSkpLnRyYW5zaXRpb249ZmEodGhpcyksdT10aGlzLl92bm9kZSxmPXVhKHUpO2lmKGkuZGF0YS5kaXJlY3RpdmVzJiZpLmRhdGEuZGlyZWN0aXZlcy5zb21lKGhhKSYmKGkuZGF0YS5zaG93PSEwKSxmJiZmLmRhdGEmJiFkYShpLGYpJiYheG4oZikmJighZi5jb21wb25lbnRJbnN0YW5jZXx8IWYuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlLmlzQ29tbWVudCkpe3ZhciBsPWYuZGF0YS50cmFuc2l0aW9uPVQoe30sYyk7aWYoIm91dC1pbiI9PT1yKXJldHVybiB0aGlzLl9sZWF2aW5nPSEwLHdlKGwsImFmdGVyTGVhdmUiLGZ1bmN0aW9uKCl7ZS5fbGVhdmluZz0hMSxlLiRmb3JjZVVwZGF0ZSgpfSksbGEodCxvKTtpZigiaW4tb3V0Ij09PXIpe2lmKHhuKGkpKXJldHVybiB1O3ZhciBwLGQ9ZnVuY3Rpb24oKXtwKCl9O3dlKGMsImFmdGVyRW50ZXIiLGQpLHdlKGMsImVudGVyQ2FuY2VsbGVkIixkKSx3ZShsLCJkZWxheUxlYXZlIixmdW5jdGlvbih0KXtwPXR9KX19cmV0dXJuIG99fX0seWE9VCh7dGFnOlN0cmluZyxtb3ZlQ2xhc3M6U3RyaW5nfSxjYSk7ZGVsZXRlIHlhLm1vZGU7dmFyIGdhPXtwcm9wczp5YSxiZWZvcmVNb3VudDpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10aGlzLl91cGRhdGU7dGhpcy5fdXBkYXRlPWZ1bmN0aW9uKG4scil7dmFyIG89VG4odCk7dC5fX3BhdGNoX18odC5fdm5vZGUsdC5rZXB0LCExLCEwKSx0Ll92bm9kZT10LmtlcHQsbygpLGUuY2FsbCh0LG4scil9fSxyZW5kZXI6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXRoaXMudGFnfHx0aGlzLiR2bm9kZS5kYXRhLnRhZ3x8InNwYW4iLG49T2JqZWN0LmNyZWF0ZShudWxsKSxyPXRoaXMucHJldkNoaWxkcmVuPXRoaXMuY2hpbGRyZW4sbz10aGlzLiRzbG90cy5kZWZhdWx0fHxbXSxpPXRoaXMuY2hpbGRyZW49W10sYT1mYSh0aGlzKSxzPTA7czxvLmxlbmd0aDtzKyspe3ZhciBjPW9bc107aWYoYy50YWcpaWYobnVsbCE9Yy5rZXkmJjAhPT1TdHJpbmcoYy5rZXkpLmluZGV4T2YoIl9fdmxpc3QiKSlpLnB1c2goYyksbltjLmtleV09YywoYy5kYXRhfHwoYy5kYXRhPXt9KSkudHJhbnNpdGlvbj1hO2Vsc2U7fWlmKHIpe2Zvcih2YXIgdT1bXSxmPVtdLGw9MDtsPHIubGVuZ3RoO2wrKyl7dmFyIHA9cltsXTtwLmRhdGEudHJhbnNpdGlvbj1hLHAuZGF0YS5wb3M9cC5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksbltwLmtleV0/dS5wdXNoKHApOmYucHVzaChwKX10aGlzLmtlcHQ9dChlLG51bGwsdSksdGhpcy5yZW1vdmVkPWZ9cmV0dXJuIHQoZSxudWxsLGkpfSx1cGRhdGVkOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5wcmV2Q2hpbGRyZW4sZT10aGlzLm1vdmVDbGFzc3x8KHRoaXMubmFtZXx8InYiKSsiLW1vdmUiO3QubGVuZ3RoJiZ0aGlzLmhhc01vdmUodFswXS5lbG0sZSkmJih0LmZvckVhY2goX2EpLHQuZm9yRWFjaChiYSksdC5mb3JFYWNoKHdhKSx0aGlzLl9yZWZsb3c9ZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQsdC5mb3JFYWNoKGZ1bmN0aW9uKHQpe2lmKHQuZGF0YS5tb3ZlZCl7dmFyIG49dC5lbG0scj1uLnN0eWxlO1JpKG4sZSksci50cmFuc2Zvcm09ci5XZWJraXRUcmFuc2Zvcm09ci50cmFuc2l0aW9uRHVyYXRpb249IiIsbi5hZGRFdmVudExpc3RlbmVyKGppLG4uX21vdmVDYj1mdW5jdGlvbiB0KHIpe3ImJnIudGFyZ2V0IT09bnx8ciYmIS90cmFuc2Zvcm0kLy50ZXN0KHIucHJvcGVydHlOYW1lKXx8KG4ucmVtb3ZlRXZlbnRMaXN0ZW5lcihqaSx0KSxuLl9tb3ZlQ2I9bnVsbCxEaShuLGUpKX0pfX0pKX0sbWV0aG9kczp7aGFzTW92ZTpmdW5jdGlvbih0LGUpe2lmKCFTaSlyZXR1cm4hMTtpZih0aGlzLl9oYXNNb3ZlKXJldHVybiB0aGlzLl9oYXNNb3ZlO3ZhciBuPXQuY2xvbmVOb2RlKCk7dC5fdHJhbnNpdGlvbkNsYXNzZXMmJnQuX3RyYW5zaXRpb25DbGFzc2VzLmZvckVhY2goZnVuY3Rpb24odCl7Q2kobix0KX0pLHhpKG4sZSksbi5zdHlsZS5kaXNwbGF5PSJub25lIix0aGlzLiRlbC5hcHBlbmRDaGlsZChuKTt2YXIgcj1NaShuKTtyZXR1cm4gdGhpcy4kZWwucmVtb3ZlQ2hpbGQobiksdGhpcy5faGFzTW92ZT1yLmhhc1RyYW5zZm9ybX19fTtmdW5jdGlvbiBfYSh0KXt0LmVsbS5fbW92ZUNiJiZ0LmVsbS5fbW92ZUNiKCksdC5lbG0uX2VudGVyQ2ImJnQuZWxtLl9lbnRlckNiKCl9ZnVuY3Rpb24gYmEodCl7dC5kYXRhLm5ld1Bvcz10LmVsbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKX1mdW5jdGlvbiB3YSh0KXt2YXIgZT10LmRhdGEucG9zLG49dC5kYXRhLm5ld1BvcyxyPWUubGVmdC1uLmxlZnQsbz1lLnRvcC1uLnRvcDtpZihyfHxvKXt0LmRhdGEubW92ZWQ9ITA7dmFyIGk9dC5lbG0uc3R5bGU7aS50cmFuc2Zvcm09aS5XZWJraXRUcmFuc2Zvcm09InRyYW5zbGF0ZSgiK3IrInB4LCIrbysicHgpIixpLnRyYW5zaXRpb25EdXJhdGlvbj0iMHMifX12YXIgeGE9e1RyYW5zaXRpb246bWEsVHJhbnNpdGlvbkdyb3VwOmdhfTtDci5jb25maWcubXVzdFVzZVByb3A9VXIsQ3IuY29uZmlnLmlzUmVzZXJ2ZWRUYWc9aW8sQ3IuY29uZmlnLmlzUmVzZXJ2ZWRBdHRyPUZyLENyLmNvbmZpZy5nZXRUYWdOYW1lc3BhY2U9YW8sQ3IuY29uZmlnLmlzVW5rbm93bkVsZW1lbnQ9Y28sVChDci5vcHRpb25zLmRpcmVjdGl2ZXMsc2EpLFQoQ3Iub3B0aW9ucy5jb21wb25lbnRzLHhhKSxDci5wcm90b3R5cGUuX19wYXRjaF9fPUo/Smk6SSxDci5wcm90b3R5cGUuJG1vdW50PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQ9dCYmSj9mbyh0KTp2b2lkIDAsTm4odGhpcyx0LGUpfSxKJiZzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7SC5kZXZ0b29scyYmdXQmJnV0LmVtaXQoImluaXQiLENyKX0sMCksZVsiYSJdPUNyfSkuY2FsbCh0aGlzLG4oImM4YmEiKSl9LCIyYjRjIjpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiNTUzNyIpKCJ3a3MiKSxvPW4oImNhNWEiKSxpPW4oIjc3MjYiKS5TeW1ib2wsYT0iZnVuY3Rpb24iPT10eXBlb2YgaSxzPXQuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gclt0XXx8KHJbdF09YSYmaVt0XXx8KGE/aTpvKSgiU3ltYm9sLiIrdCkpfTtzLnN0b3JlPXJ9LCIyZDAwIjpmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz0hMX0sIjJkODMiOmZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7dmFyIHI9bigiMzg3ZiIpO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUsbixvLGkpe3ZhciBhPW5ldyBFcnJvcih0KTtyZXR1cm4gcihhLGUsbixvLGkpfX0sIjJkOTUiOmZ1bmN0aW9uKHQsZSl7dmFyIG49e30udG9TdHJpbmc7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiBuLmNhbGwodCkuc2xpY2UoOCwtMSl9fSwiMmU2NyI6ZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0Ijt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuISghdHx8IXQuX19DQU5DRUxfXyl9fSwiMzBiNSI6ZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj1uKCJjNTMyIik7ZnVuY3Rpb24gbyh0KXtyZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHQpLnJlcGxhY2UoLyU0MC9naSwiQCIpLnJlcGxhY2UoLyUzQS9naSwiOiIpLnJlcGxhY2UoLyUyNC9nLCIkIikucmVwbGFjZSgvJTJDL2dpLCIsIikucmVwbGFjZSgvJTIwL2csIisiKS5yZXBsYWNlKC8lNUIvZ2ksIlsiKS5yZXBsYWNlKC8lNUQvZ2ksIl0iKX10LmV4cG9ydHM9ZnVuY3Rpb24odCxlLG4pe2lmKCFlKXJldHVybiB0O3ZhciBpO2lmKG4paT1uKGUpO2Vsc2UgaWYoci5pc1VSTFNlYXJjaFBhcmFtcyhlKSlpPWUudG9TdHJpbmcoKTtlbHNle3ZhciBhPVtdO3IuZm9yRWFjaChlLGZ1bmN0aW9uKHQsZSl7bnVsbCE9PXQmJiJ1bmRlZmluZWQiIT09dHlwZW9mIHQmJihyLmlzQXJyYXkodCk/ZSs9IltdIjp0PVt0XSxyLmZvckVhY2godCxmdW5jdGlvbih0KXtyLmlzRGF0ZSh0KT90PXQudG9JU09TdHJpbmcoKTpyLmlzT2JqZWN0KHQpJiYodD1KU09OLnN0cmluZ2lmeSh0KSksYS5wdXNoKG8oZSkrIj0iK28odCkpfSkpfSksaT1hLmpvaW4oIiYiKX1pZihpKXt2YXIgcz10LmluZGV4T2YoIiMiKTstMSE9PXMmJih0PXQuc2xpY2UoMCxzKSksdCs9KC0xPT09dC5pbmRleE9mKCI/Iik/Ij8iOiImIikraX1yZXR1cm4gdH19LCIzMWY0IjpmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0LGUsbil7dmFyIHI9dm9pZCAwPT09bjtzd2l0Y2goZS5sZW5ndGgpe2Nhc2UgMDpyZXR1cm4gcj90KCk6dC5jYWxsKG4pO2Nhc2UgMTpyZXR1cm4gcj90KGVbMF0pOnQuY2FsbChuLGVbMF0pO2Nhc2UgMjpyZXR1cm4gcj90KGVbMF0sZVsxXSk6dC5jYWxsKG4sZVswXSxlWzFdKTtjYXNlIDM6cmV0dXJuIHI/dChlWzBdLGVbMV0sZVsyXSk6dC5jYWxsKG4sZVswXSxlWzFdLGVbMl0pO2Nhc2UgNDpyZXR1cm4gcj90KGVbMF0sZVsxXSxlWzJdLGVbM10pOnQuY2FsbChuLGVbMF0sZVsxXSxlWzJdLGVbM10pfXJldHVybiB0LmFwcGx5KG4sZSl9fSwiMzJlOSI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjg2Y2MiKSxvPW4oIjQ2MzAiKTt0LmV4cG9ydHM9bigiOWUxZSIpP2Z1bmN0aW9uKHQsZSxuKXtyZXR1cm4gci5mKHQsZSxvKDEsbikpfTpmdW5jdGlvbih0LGUsbil7cmV0dXJuIHRbZV09bix0fX0sIjMzYTQiOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCI4NGYyIiksbz1uKCIyYjRjIikoIml0ZXJhdG9yIiksaT1BcnJheS5wcm90b3R5cGU7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiB2b2lkIDAhPT10JiYoci5BcnJheT09PXR8fGlbb109PT10KX19LCIzODdmIjpmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUsbixyLG8pe3JldHVybiB0LmNvbmZpZz1lLG4mJih0LmNvZGU9biksdC5yZXF1ZXN0PXIsdC5yZXNwb25zZT1vLHQuaXNBeGlvc0Vycm9yPSEwLHQudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJue21lc3NhZ2U6dGhpcy5tZXNzYWdlLG5hbWU6dGhpcy5uYW1lLGRlc2NyaXB0aW9uOnRoaXMuZGVzY3JpcHRpb24sbnVtYmVyOnRoaXMubnVtYmVyLGZpbGVOYW1lOnRoaXMuZmlsZU5hbWUsbGluZU51bWJlcjp0aGlzLmxpbmVOdW1iZXIsY29sdW1uTnVtYmVyOnRoaXMuY29sdW1uTnVtYmVyLHN0YWNrOnRoaXMuc3RhY2ssY29uZmlnOnRoaXMuY29uZmlnLGNvZGU6dGhpcy5jb2RlfX0sdH19LCIzOGZkIjpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiNjlhOCIpLG89bigiNGJmOCIpLGk9bigiNjEzYiIpKCJJRV9QUk9UTyIpLGE9T2JqZWN0LnByb3RvdHlwZTt0LmV4cG9ydHM9T2JqZWN0LmdldFByb3RvdHlwZU9mfHxmdW5jdGlvbih0KXtyZXR1cm4gdD1vKHQpLHIodCxpKT90W2ldOiJmdW5jdGlvbiI9PXR5cGVvZiB0LmNvbnN0cnVjdG9yJiZ0IGluc3RhbmNlb2YgdC5jb25zdHJ1Y3Rvcj90LmNvbnN0cnVjdG9yLnByb3RvdHlwZTp0IGluc3RhbmNlb2YgT2JqZWN0P2E6bnVsbH19LDM5MzQ6ZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj1uKCJjNTMyIik7dC5leHBvcnRzPXIuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKT9mdW5jdGlvbigpe3ZhciB0LGU9Lyhtc2llfHRyaWRlbnQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSxuPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImEiKTtmdW5jdGlvbiBvKHQpe3ZhciByPXQ7cmV0dXJuIGUmJihuLnNldEF0dHJpYnV0ZSgiaHJlZiIscikscj1uLmhyZWYpLG4uc2V0QXR0cmlidXRlKCJocmVmIixyKSx7aHJlZjpuLmhyZWYscHJvdG9jb2w6bi5wcm90b2NvbD9uLnByb3RvY29sLnJlcGxhY2UoLzokLywiIik6IiIsaG9zdDpuLmhvc3Qsc2VhcmNoOm4uc2VhcmNoP24uc2VhcmNoLnJlcGxhY2UoL15cPy8sIiIpOiIiLGhhc2g6bi5oYXNoP24uaGFzaC5yZXBsYWNlKC9eIy8sIiIpOiIiLGhvc3RuYW1lOm4uaG9zdG5hbWUscG9ydDpuLnBvcnQscGF0aG5hbWU6Ii8iPT09bi5wYXRobmFtZS5jaGFyQXQoMCk/bi5wYXRobmFtZToiLyIrbi5wYXRobmFtZX19cmV0dXJuIHQ9byh3aW5kb3cubG9jYXRpb24uaHJlZiksZnVuY3Rpb24oZSl7dmFyIG49ci5pc1N0cmluZyhlKT9vKGUpOmU7cmV0dXJuIG4ucHJvdG9jb2w9PT10LnByb3RvY29sJiZuLmhvc3Q9PT10Lmhvc3R9fSgpOmZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuITB9fSgpfSwiNDFhMCI6ZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj1uKCIyYWViIiksbz1uKCI0NjMwIiksaT1uKCI3ZjIwIiksYT17fTtuKCIzMmU5IikoYSxuKCIyYjRjIikoIml0ZXJhdG9yIiksZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30pLHQuZXhwb3J0cz1mdW5jdGlvbih0LGUsbil7dC5wcm90b3R5cGU9cihhLHtuZXh0Om8oMSxuKX0pLGkodCxlKyIgSXRlcmF0b3IiKX19LDQ1ODg6ZnVuY3Rpb24odCxlKXt2YXIgbj1NYXRoLmNlaWwscj1NYXRoLmZsb29yO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gaXNOYU4odD0rdCk/MDoodD4wP3I6bikodCl9fSw0NjMwOmZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7cmV0dXJue2VudW1lcmFibGU6ISgxJnQpLGNvbmZpZ3VyYWJsZTohKDImdCksd3JpdGFibGU6ISg0JnQpLHZhbHVlOmV9fX0sIjQ2N2YiOmZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7dmFyIHI9bigiMmQ4MyIpO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUsbil7dmFyIG89bi5jb25maWcudmFsaWRhdGVTdGF0dXM7IW98fG8obi5zdGF0dXMpP3Qobik6ZShyKCJSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICIrbi5zdGF0dXMsbi5jb25maWcsbnVsbCxuLnJlcXVlc3QsbikpfX0sIjRhNTkiOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCI5YjQzIiksbz1uKCIxZmE4IiksaT1uKCIzM2E0IiksYT1uKCJjYjdjIikscz1uKCI5ZGVmIiksYz1uKCIyN2VlIiksdT17fSxmPXt9O2U9dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxuLGwscCl7dmFyIGQsdixoLG0seT1wP2Z1bmN0aW9uKCl7cmV0dXJuIHR9OmModCksZz1yKG4sbCxlPzI6MSksXz0wO2lmKCJmdW5jdGlvbiIhPXR5cGVvZiB5KXRocm93IFR5cGVFcnJvcih0KyIgaXMgbm90IGl0ZXJhYmxlISIpO2lmKGkoeSkpe2ZvcihkPXModC5sZW5ndGgpO2Q+XztfKyspaWYobT1lP2coYSh2PXRbX10pWzBdLHZbMV0pOmcodFtfXSksbT09PXV8fG09PT1mKXJldHVybiBtfWVsc2UgZm9yKGg9eS5jYWxsKHQpOyEodj1oLm5leHQoKSkuZG9uZTspaWYobT1vKGgsZyx2LnZhbHVlLGUpLG09PT11fHxtPT09ZilyZXR1cm4gbX07ZS5CUkVBSz11LGUuUkVUVVJOPWZ9LCI0YTdiIjpmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO3ZhciByPW4oImM1MzIiKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtlPWV8fHt9O3ZhciBuPXt9O3JldHVybiByLmZvckVhY2goWyJ1cmwiLCJtZXRob2QiLCJwYXJhbXMiLCJkYXRhIl0sZnVuY3Rpb24odCl7InVuZGVmaW5lZCIhPT10eXBlb2YgZVt0XSYmKG5bdF09ZVt0XSl9KSxyLmZvckVhY2goWyJoZWFkZXJzIiwiYXV0aCIsInByb3h5Il0sZnVuY3Rpb24obyl7ci5pc09iamVjdChlW29dKT9uW29dPXIuZGVlcE1lcmdlKHRbb10sZVtvXSk6InVuZGVmaW5lZCIhPT10eXBlb2YgZVtvXT9uW29dPWVbb106ci5pc09iamVjdCh0W29dKT9uW29dPXIuZGVlcE1lcmdlKHRbb10pOiJ1bmRlZmluZWQiIT09dHlwZW9mIHRbb10mJihuW29dPXRbb10pfSksci5mb3JFYWNoKFsiYmFzZVVSTCIsInRyYW5zZm9ybVJlcXVlc3QiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsInBhcmFtc1NlcmlhbGl6ZXIiLCJ0aW1lb3V0Iiwid2l0aENyZWRlbnRpYWxzIiwiYWRhcHRlciIsInJlc3BvbnNlVHlwZSIsInhzcmZDb29raWVOYW1lIiwieHNyZkhlYWRlck5hbWUiLCJvblVwbG9hZFByb2dyZXNzIiwib25Eb3dubG9hZFByb2dyZXNzIiwibWF4Q29udGVudExlbmd0aCIsInZhbGlkYXRlU3RhdHVzIiwibWF4UmVkaXJlY3RzIiwiaHR0cEFnZW50IiwiaHR0cHNBZ2VudCIsImNhbmNlbFRva2VuIiwic29ja2V0UGF0aCJdLGZ1bmN0aW9uKHIpeyJ1bmRlZmluZWQiIT09dHlwZW9mIGVbcl0/bltyXT1lW3JdOiJ1bmRlZmluZWQiIT09dHlwZW9mIHRbcl0mJihuW3JdPXRbcl0pfSksbn19LCI0YmY4IjpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiYmUxMyIpO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gT2JqZWN0KHIodCkpfX0sIjUyMGEiOmZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7dmFyIHI9bigiMGJmYiIpLG89UmVnRXhwLnByb3RvdHlwZS5leGVjLGk9U3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlLGE9byxzPSJsYXN0SW5kZXgiLGM9ZnVuY3Rpb24oKXt2YXIgdD0vYS8sZT0vYiovZztyZXR1cm4gby5jYWxsKHQsImEiKSxvLmNhbGwoZSwiYSIpLDAhPT10W3NdfHwwIT09ZVtzXX0oKSx1PXZvaWQgMCE9PS8oKT8/Ly5leGVjKCIiKVsxXSxmPWN8fHU7ZiYmKGE9ZnVuY3Rpb24odCl7dmFyIGUsbixhLGYsbD10aGlzO3JldHVybiB1JiYobj1uZXcgUmVnRXhwKCJeIitsLnNvdXJjZSsiJCg/IVxccykiLHIuY2FsbChsKSkpLGMmJihlPWxbc10pLGE9by5jYWxsKGwsdCksYyYmYSYmKGxbc109bC5nbG9iYWw/YS5pbmRleCthWzBdLmxlbmd0aDplKSx1JiZhJiZhLmxlbmd0aD4xJiZpLmNhbGwoYVswXSxuLGZ1bmN0aW9uKCl7Zm9yKGY9MTtmPGFyZ3VtZW50cy5sZW5ndGgtMjtmKyspdm9pZCAwPT09YXJndW1lbnRzW2ZdJiYoYVtmXT12b2lkIDApfSksYX0pLHQuZXhwb3J0cz1hfSw1MjcwOmZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7dmFyIHI9bigiYzUzMiIpLG89bigiYzQwMSIpLGk9bigiMmU2NyIpLGE9bigiMjQ0NCIpLHM9bigiZDkyNSIpLGM9bigiZTY4MyIpO2Z1bmN0aW9uIHUodCl7dC5jYW5jZWxUb2tlbiYmdC5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCl9dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3UodCksdC5iYXNlVVJMJiYhcyh0LnVybCkmJih0LnVybD1jKHQuYmFzZVVSTCx0LnVybCkpLHQuaGVhZGVycz10LmhlYWRlcnN8fHt9LHQuZGF0YT1vKHQuZGF0YSx0LmhlYWRlcnMsdC50cmFuc2Zvcm1SZXF1ZXN0KSx0LmhlYWRlcnM9ci5tZXJnZSh0LmhlYWRlcnMuY29tbW9ufHx7fSx0LmhlYWRlcnNbdC5tZXRob2RdfHx7fSx0LmhlYWRlcnN8fHt9KSxyLmZvckVhY2goWyJkZWxldGUiLCJnZXQiLCJoZWFkIiwicG9zdCIsInB1dCIsInBhdGNoIiwiY29tbW9uIl0sZnVuY3Rpb24oZSl7ZGVsZXRlIHQuaGVhZGVyc1tlXX0pO3ZhciBlPXQuYWRhcHRlcnx8YS5hZGFwdGVyO3JldHVybiBlKHQpLnRoZW4oZnVuY3Rpb24oZSl7cmV0dXJuIHUodCksZS5kYXRhPW8oZS5kYXRhLGUuaGVhZGVycyx0LnRyYW5zZm9ybVJlc3BvbnNlKSxlfSxmdW5jdGlvbihlKXtyZXR1cm4gaShlKXx8KHUodCksZSYmZS5yZXNwb25zZSYmKGUucmVzcG9uc2UuZGF0YT1vKGUucmVzcG9uc2UuZGF0YSxlLnJlc3BvbnNlLmhlYWRlcnMsdC50cmFuc2Zvcm1SZXNwb25zZSkpKSxQcm9taXNlLnJlamVjdChlKX0pfX0sIjUyYTciOmZ1bmN0aW9uKHQsZSl7ZS5mPXt9LnByb3BlcnR5SXNFbnVtZXJhYmxlfSwiNTUxYyI6ZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcixvLGksYSxzPW4oIjJkMDAiKSxjPW4oIjc3MjYiKSx1PW4oIjliNDMiKSxmPW4oIjIzYzYiKSxsPW4oIjVjYTEiKSxwPW4oImQzZjQiKSxkPW4oImQ4ZTgiKSx2PW4oImY2MDUiKSxoPW4oIjRhNTkiKSxtPW4oImViZDYiKSx5PW4oIjE5OTEiKS5zZXQsZz1uKCI4MDc5IikoKSxfPW4oImE1YjgiKSxiPW4oIjljODAiKSx3PW4oImEyNWYiKSx4PW4oImJjYWEiKSxDPSJQcm9taXNlIixBPWMuVHlwZUVycm9yLE89Yy5wcm9jZXNzLFM9TyYmTy52ZXJzaW9ucywkPVMmJlMudjh8fCIiLGs9Y1tDXSxFPSJwcm9jZXNzIj09ZihPKSxqPWZ1bmN0aW9uKCl7fSxUPW89Xy5mLFA9ISFmdW5jdGlvbigpe3RyeXt2YXIgdD1rLnJlc29sdmUoMSksZT0odC5jb25zdHJ1Y3Rvcj17fSlbbigiMmI0YyIpKCJzcGVjaWVzIildPWZ1bmN0aW9uKHQpe3QoaixqKX07cmV0dXJuKEV8fCJmdW5jdGlvbiI9PXR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQpJiZ0LnRoZW4oailpbnN0YW5jZW9mIGUmJjAhPT0kLmluZGV4T2YoIjYuNiIpJiYtMT09PXcuaW5kZXhPZigiQ2hyb21lLzY2Iil9Y2F0Y2gocil7fX0oKSxJPWZ1bmN0aW9uKHQpe3ZhciBlO3JldHVybiEoIXAodCl8fCJmdW5jdGlvbiIhPXR5cGVvZihlPXQudGhlbikpJiZlfSxOPWZ1bmN0aW9uKHQsZSl7aWYoIXQuX24pe3QuX249ITA7dmFyIG49dC5fYztnKGZ1bmN0aW9uKCl7dmFyIHI9dC5fdixvPTE9PXQuX3MsaT0wLGE9ZnVuY3Rpb24oZSl7dmFyIG4saSxhLHM9bz9lLm9rOmUuZmFpbCxjPWUucmVzb2x2ZSx1PWUucmVqZWN0LGY9ZS5kb21haW47dHJ5e3M/KG98fCgyPT10Ll9oJiZMKHQpLHQuX2g9MSksITA9PT1zP249cjooZiYmZi5lbnRlcigpLG49cyhyKSxmJiYoZi5leGl0KCksYT0hMCkpLG49PT1lLnByb21pc2U/dShBKCJQcm9taXNlLWNoYWluIGN5Y2xlIikpOihpPUkobikpP2kuY2FsbChuLGMsdSk6YyhuKSk6dShyKX1jYXRjaChsKXtmJiYhYSYmZi5leGl0KCksdShsKX19O3doaWxlKG4ubGVuZ3RoPmkpYShuW2krK10pO3QuX2M9W10sdC5fbj0hMSxlJiYhdC5faCYmUih0KX0pfX0sUj1mdW5jdGlvbih0KXt5LmNhbGwoYyxmdW5jdGlvbigpe3ZhciBlLG4scixvPXQuX3YsaT1EKHQpO2lmKGkmJihlPWIoZnVuY3Rpb24oKXtFP08uZW1pdCgidW5oYW5kbGVkUmVqZWN0aW9uIixvLHQpOihuPWMub251bmhhbmRsZWRyZWplY3Rpb24pP24oe3Byb21pc2U6dCxyZWFzb246b30pOihyPWMuY29uc29sZSkmJnIuZXJyb3ImJnIuZXJyb3IoIlVuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbiIsbyl9KSx0Ll9oPUV8fEQodCk/MjoxKSx0Ll9hPXZvaWQgMCxpJiZlLmUpdGhyb3cgZS52fSl9LEQ9ZnVuY3Rpb24odCl7cmV0dXJuIDEhPT10Ll9oJiYwPT09KHQuX2F8fHQuX2MpLmxlbmd0aH0sTD1mdW5jdGlvbih0KXt5LmNhbGwoYyxmdW5jdGlvbigpe3ZhciBlO0U/Ty5lbWl0KCJyZWplY3Rpb25IYW5kbGVkIix0KTooZT1jLm9ucmVqZWN0aW9uaGFuZGxlZCkmJmUoe3Byb21pc2U6dCxyZWFzb246dC5fdn0pfSl9LEY9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcztlLl9kfHwoZS5fZD0hMCxlPWUuX3d8fGUsZS5fdj10LGUuX3M9MixlLl9hfHwoZS5fYT1lLl9jLnNsaWNlKCkpLE4oZSwhMCkpfSxNPWZ1bmN0aW9uKHQpe3ZhciBlLG49dGhpcztpZighbi5fZCl7bi5fZD0hMCxuPW4uX3d8fG47dHJ5e2lmKG49PT10KXRocm93IEEoIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmIik7KGU9SSh0KSk/ZyhmdW5jdGlvbigpe3ZhciByPXtfdzpuLF9kOiExfTt0cnl7ZS5jYWxsKHQsdShNLHIsMSksdShGLHIsMSkpfWNhdGNoKG8pe0YuY2FsbChyLG8pfX0pOihuLl92PXQsbi5fcz0xLE4obiwhMSkpfWNhdGNoKHIpe0YuY2FsbCh7X3c6bixfZDohMX0scil9fX07UHx8KGs9ZnVuY3Rpb24odCl7dih0aGlzLGssQywiX2giKSxkKHQpLHIuY2FsbCh0aGlzKTt0cnl7dCh1KE0sdGhpcywxKSx1KEYsdGhpcywxKSl9Y2F0Y2goZSl7Ri5jYWxsKHRoaXMsZSl9fSxyPWZ1bmN0aW9uKHQpe3RoaXMuX2M9W10sdGhpcy5fYT12b2lkIDAsdGhpcy5fcz0wLHRoaXMuX2Q9ITEsdGhpcy5fdj12b2lkIDAsdGhpcy5faD0wLHRoaXMuX249ITF9LHIucHJvdG90eXBlPW4oImRjYmMiKShrLnByb3RvdHlwZSx7dGhlbjpmdW5jdGlvbih0LGUpe3ZhciBuPVQobSh0aGlzLGspKTtyZXR1cm4gbi5vaz0iZnVuY3Rpb24iIT10eXBlb2YgdHx8dCxuLmZhaWw9ImZ1bmN0aW9uIj09dHlwZW9mIGUmJmUsbi5kb21haW49RT9PLmRvbWFpbjp2b2lkIDAsdGhpcy5fYy5wdXNoKG4pLHRoaXMuX2EmJnRoaXMuX2EucHVzaChuKSx0aGlzLl9zJiZOKHRoaXMsITEpLG4ucHJvbWlzZX0sY2F0Y2g6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhlbih2b2lkIDAsdCl9fSksaT1mdW5jdGlvbigpe3ZhciB0PW5ldyByO3RoaXMucHJvbWlzZT10LHRoaXMucmVzb2x2ZT11KE0sdCwxKSx0aGlzLnJlamVjdD11KEYsdCwxKX0sXy5mPVQ9ZnVuY3Rpb24odCl7cmV0dXJuIHQ9PT1rfHx0PT09YT9uZXcgaSh0KTpvKHQpfSksbChsLkcrbC5XK2wuRiohUCx7UHJvbWlzZTprfSksbigiN2YyMCIpKGssQyksbigiN2E1NiIpKEMpLGE9bigiODM3OCIpW0NdLGwobC5TK2wuRiohUCxDLHtyZWplY3Q6ZnVuY3Rpb24odCl7dmFyIGU9VCh0aGlzKSxuPWUucmVqZWN0O3JldHVybiBuKHQpLGUucHJvbWlzZX19KSxsKGwuUytsLkYqKHN8fCFQKSxDLHtyZXNvbHZlOmZ1bmN0aW9uKHQpe3JldHVybiB4KHMmJnRoaXM9PT1hP2s6dGhpcyx0KX19KSxsKGwuUytsLkYqIShQJiZuKCI1Y2M1IikoZnVuY3Rpb24odCl7ay5hbGwodClbImNhdGNoIl0oail9KSksQyx7YWxsOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsbj1UKGUpLHI9bi5yZXNvbHZlLG89bi5yZWplY3QsaT1iKGZ1bmN0aW9uKCl7dmFyIG49W10saT0wLGE9MTtoKHQsITEsZnVuY3Rpb24odCl7dmFyIHM9aSsrLGM9ITE7bi5wdXNoKHZvaWQgMCksYSsrLGUucmVzb2x2ZSh0KS50aGVuKGZ1bmN0aW9uKHQpe2N8fChjPSEwLG5bc109dCwtLWF8fHIobikpfSxvKX0pLC0tYXx8cihuKX0pO3JldHVybiBpLmUmJm8oaS52KSxuLnByb21pc2V9LHJhY2U6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxuPVQoZSkscj1uLnJlamVjdCxvPWIoZnVuY3Rpb24oKXtoKHQsITEsZnVuY3Rpb24odCl7ZS5yZXNvbHZlKHQpLnRoZW4obi5yZXNvbHZlLHIpfSl9KTtyZXR1cm4gby5lJiZyKG8udiksbi5wcm9taXNlfX0pfSw1NTM3OmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCI4Mzc4Iiksbz1uKCI3NzI2IiksaT0iX19jb3JlLWpzX3NoYXJlZF9fIixhPW9baV18fChvW2ldPXt9KTsodC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGFbdF18fChhW3RdPXZvaWQgMCE9PWU/ZTp7fSl9KSgidmVyc2lvbnMiLFtdKS5wdXNoKHt2ZXJzaW9uOnIudmVyc2lvbixtb2RlOm4oIjJkMDAiKT8icHVyZSI6Imdsb2JhbCIsY29weXJpZ2h0OiLCqSAyMDE5IERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpIn0pfSwiNWNhMSI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjc3MjYiKSxvPW4oIjgzNzgiKSxpPW4oIjMyZTkiKSxhPW4oIjJhYmEiKSxzPW4oIjliNDMiKSxjPSJwcm90b3R5cGUiLHU9ZnVuY3Rpb24odCxlLG4pe3ZhciBmLGwscCxkLHY9dCZ1LkYsaD10JnUuRyxtPXQmdS5TLHk9dCZ1LlAsZz10JnUuQixfPWg/cjptP3JbZV18fChyW2VdPXt9KToocltlXXx8e30pW2NdLGI9aD9vOm9bZV18fChvW2VdPXt9KSx3PWJbY118fChiW2NdPXt9KTtmb3IoZiBpbiBoJiYobj1lKSxuKWw9IXYmJl8mJnZvaWQgMCE9PV9bZl0scD0obD9fOm4pW2ZdLGQ9ZyYmbD9zKHAscik6eSYmImZ1bmN0aW9uIj09dHlwZW9mIHA/cyhGdW5jdGlvbi5jYWxsLHApOnAsXyYmYShfLGYscCx0JnUuVSksYltmXSE9cCYmaShiLGYsZCkseSYmd1tmXSE9cCYmKHdbZl09cCl9O3IuY29yZT1vLHUuRj0xLHUuRz0yLHUuUz00LHUuUD04LHUuQj0xNix1Llc9MzIsdS5VPTY0LHUuUj0xMjgsdC5leHBvcnRzPXV9LCI1Y2M1IjpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiMmI0YyIpKCJpdGVyYXRvciIpLG89ITE7dHJ5e3ZhciBpPVs3XVtyXSgpO2lbInJldHVybiJdPWZ1bmN0aW9uKCl7bz0hMH0sQXJyYXkuZnJvbShpLGZ1bmN0aW9uKCl7dGhyb3cgMn0pfWNhdGNoKGEpe310LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtpZighZSYmIW8pcmV0dXJuITE7dmFyIG49ITE7dHJ5e3ZhciBpPVs3XSxzPWlbcl0oKTtzLm5leHQ9ZnVuY3Rpb24oKXtyZXR1cm57ZG9uZTpuPSEwfX0saVtyXT1mdW5jdGlvbigpe3JldHVybiBzfSx0KGkpfWNhdGNoKGEpe31yZXR1cm4gbn19LCI1ZjFiIjpmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO3ZhciByPW4oIjIzYzYiKSxvPVJlZ0V4cC5wcm90b3R5cGUuZXhlYzt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXt2YXIgbj10LmV4ZWM7aWYoImZ1bmN0aW9uIj09PXR5cGVvZiBuKXt2YXIgaT1uLmNhbGwodCxlKTtpZigib2JqZWN0IiE9PXR5cGVvZiBpKXRocm93IG5ldyBUeXBlRXJyb3IoIlJlZ0V4cCBleGVjIG1ldGhvZCByZXR1cm5lZCBzb21ldGhpbmcgb3RoZXIgdGhhbiBhbiBPYmplY3Qgb3IgbnVsbCIpO3JldHVybiBpfWlmKCJSZWdFeHAiIT09cih0KSl0aHJvdyBuZXcgVHlwZUVycm9yKCJSZWdFeHAjZXhlYyBjYWxsZWQgb24gaW5jb21wYXRpYmxlIHJlY2VpdmVyIik7cmV0dXJuIG8uY2FsbCh0LGUpfX0sIjYxM2IiOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCI1NTM3IikoImtleXMiKSxvPW4oImNhNWEiKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuIHJbdF18fChyW3RdPW8odCkpfX0sIjYyNmEiOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCIyZDk1Iik7dC5leHBvcnRzPU9iamVjdCgieiIpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApP09iamVjdDpmdW5jdGlvbih0KXtyZXR1cm4iU3RyaW5nIj09cih0KT90LnNwbGl0KCIiKTpPYmplY3QodCl9fSw2ODIxOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCI2MjZhIiksbz1uKCJiZTEzIik7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiByKG8odCkpfX0sIjY5YTgiOmZ1bmN0aW9uKHQsZSl7dmFyIG49e30uaGFzT3duUHJvcGVydHk7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIG4uY2FsbCh0LGUpfX0sIjZhOTkiOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCJkM2Y0Iik7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7aWYoIXIodCkpcmV0dXJuIHQ7dmFyIG4sbztpZihlJiYiZnVuY3Rpb24iPT10eXBlb2Yobj10LnRvU3RyaW5nKSYmIXIobz1uLmNhbGwodCkpKXJldHVybiBvO2lmKCJmdW5jdGlvbiI9PXR5cGVvZihuPXQudmFsdWVPZikmJiFyKG89bi5jYWxsKHQpKSlyZXR1cm4gbztpZighZSYmImZ1bmN0aW9uIj09dHlwZW9mKG49dC50b1N0cmluZykmJiFyKG89bi5jYWxsKHQpKSlyZXR1cm4gbzt0aHJvdyBUeXBlRXJyb3IoIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZSIpfX0sNzMzMzpmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO3ZhciByPW4oIjllMWUiKSxvPW4oIjBkNTgiKSxpPW4oIjI2MjEiKSxhPW4oIjUyYTciKSxzPW4oIjRiZjgiKSxjPW4oIjYyNmEiKSx1PU9iamVjdC5hc3NpZ247dC5leHBvcnRzPSF1fHxuKCI3OWU1IikoZnVuY3Rpb24oKXt2YXIgdD17fSxlPXt9LG49U3ltYm9sKCkscj0iYWJjZGVmZ2hpamtsbW5vcHFyc3QiO3JldHVybiB0W25dPTcsci5zcGxpdCgiIikuZm9yRWFjaChmdW5jdGlvbih0KXtlW3RdPXR9KSw3IT11KHt9LHQpW25dfHxPYmplY3Qua2V5cyh1KHt9LGUpKS5qb2luKCIiKSE9cn0pP2Z1bmN0aW9uKHQsZSl7dmFyIG49cyh0KSx1PWFyZ3VtZW50cy5sZW5ndGgsZj0xLGw9aS5mLHA9YS5mO3doaWxlKHU+Zil7dmFyIGQsdj1jKGFyZ3VtZW50c1tmKytdKSxoPWw/byh2KS5jb25jYXQobCh2KSk6byh2KSxtPWgubGVuZ3RoLHk9MDt3aGlsZShtPnkpZD1oW3krK10sciYmIXAuY2FsbCh2LGQpfHwobltkXT12W2RdKX1yZXR1cm4gbn06dX0sNzcyNjpmdW5jdGlvbih0LGUpe3ZhciBuPXQuZXhwb3J0cz0idW5kZWZpbmVkIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93Lk1hdGg9PU1hdGg/d2luZG93OiJ1bmRlZmluZWQiIT10eXBlb2Ygc2VsZiYmc2VsZi5NYXRoPT1NYXRoP3NlbGY6RnVuY3Rpb24oInJldHVybiB0aGlzIikoKTsibnVtYmVyIj09dHlwZW9mIF9fZyYmKF9fZz1uKX0sIjc3ZjEiOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCI0NTg4Iiksbz1NYXRoLm1heCxpPU1hdGgubWluO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe3JldHVybiB0PXIodCksdDwwP28odCtlLDApOmkodCxlKX19LCI3OWU1IjpmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0KXt0cnl7cmV0dXJuISF0KCl9Y2F0Y2goZSl7cmV0dXJuITB9fX0sIjdhNTYiOmZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7dmFyIHI9bigiNzcyNiIpLG89bigiODZjYyIpLGk9bigiOWUxZSIpLGE9bigiMmI0YyIpKCJzcGVjaWVzIik7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3ZhciBlPXJbdF07aSYmZSYmIWVbYV0mJm8uZihlLGEse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc319KX19LCI3YTc3IjpmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIodCl7dGhpcy5tZXNzYWdlPXR9ci5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4iQ2FuY2VsIisodGhpcy5tZXNzYWdlPyI6ICIrdGhpcy5tZXNzYWdlOiIiKX0sci5wcm90b3R5cGUuX19DQU5DRUxfXz0hMCx0LmV4cG9ydHM9cn0sIjdhYWMiOmZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7dmFyIHI9bigiYzUzMiIpO3QuZXhwb3J0cz1yLmlzU3RhbmRhcmRCcm93c2VyRW52KCk/ZnVuY3Rpb24oKXtyZXR1cm57d3JpdGU6ZnVuY3Rpb24odCxlLG4sbyxpLGEpe3ZhciBzPVtdO3MucHVzaCh0KyI9IitlbmNvZGVVUklDb21wb25lbnQoZSkpLHIuaXNOdW1iZXIobikmJnMucHVzaCgiZXhwaXJlcz0iK25ldyBEYXRlKG4pLnRvR01UU3RyaW5nKCkpLHIuaXNTdHJpbmcobykmJnMucHVzaCgicGF0aD0iK28pLHIuaXNTdHJpbmcoaSkmJnMucHVzaCgiZG9tYWluPSIraSksITA9PT1hJiZzLnB1c2goInNlY3VyZSIpLGRvY3VtZW50LmNvb2tpZT1zLmpvaW4oIjsgIil9LHJlYWQ6ZnVuY3Rpb24odCl7dmFyIGU9ZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoIihefDtcXHMqKSgiK3QrIik9KFteO10qKSIpKTtyZXR1cm4gZT9kZWNvZGVVUklDb21wb25lbnQoZVszXSk6bnVsbH0scmVtb3ZlOmZ1bmN0aW9uKHQpe3RoaXMud3JpdGUodCwiIixEYXRlLm5vdygpLTg2NGU1KX19fSgpOmZ1bmN0aW9uKCl7cmV0dXJue3dyaXRlOmZ1bmN0aW9uKCl7fSxyZWFkOmZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LHJlbW92ZTpmdW5jdGlvbigpe319fSgpfSwiN2YyMCI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjg2Y2MiKS5mLG89bigiNjlhOCIpLGk9bigiMmI0YyIpKCJ0b1N0cmluZ1RhZyIpO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUsbil7dCYmIW8odD1uP3Q6dC5wcm90b3R5cGUsaSkmJnIodCxpLHtjb25maWd1cmFibGU6ITAsdmFsdWU6ZX0pfX0sODA3OTpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiNzcyNiIpLG89bigiMTk5MSIpLnNldCxpPXIuTXV0YXRpb25PYnNlcnZlcnx8ci5XZWJLaXRNdXRhdGlvbk9ic2VydmVyLGE9ci5wcm9jZXNzLHM9ci5Qcm9taXNlLGM9InByb2Nlc3MiPT1uKCIyZDk1IikoYSk7dC5leHBvcnRzPWZ1bmN0aW9uKCl7dmFyIHQsZSxuLHU9ZnVuY3Rpb24oKXt2YXIgcixvO2MmJihyPWEuZG9tYWluKSYmci5leGl0KCk7d2hpbGUodCl7bz10LmZuLHQ9dC5uZXh0O3RyeXtvKCl9Y2F0Y2goaSl7dGhyb3cgdD9uKCk6ZT12b2lkIDAsaX19ZT12b2lkIDAsciYmci5lbnRlcigpfTtpZihjKW49ZnVuY3Rpb24oKXthLm5leHRUaWNrKHUpfTtlbHNlIGlmKCFpfHxyLm5hdmlnYXRvciYmci5uYXZpZ2F0b3Iuc3RhbmRhbG9uZSlpZihzJiZzLnJlc29sdmUpe3ZhciBmPXMucmVzb2x2ZSh2b2lkIDApO249ZnVuY3Rpb24oKXtmLnRoZW4odSl9fWVsc2Ugbj1mdW5jdGlvbigpe28uY2FsbChyLHUpfTtlbHNle3ZhciBsPSEwLHA9ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoIiIpO25ldyBpKHUpLm9ic2VydmUocCx7Y2hhcmFjdGVyRGF0YTohMH0pLG49ZnVuY3Rpb24oKXtwLmRhdGE9bD0hbH19cmV0dXJuIGZ1bmN0aW9uKHIpe3ZhciBvPXtmbjpyLG5leHQ6dm9pZCAwfTtlJiYoZS5uZXh0PW8pLHR8fCh0PW8sbigpKSxlPW99fX0sODM3ODpmdW5jdGlvbih0LGUpe3ZhciBuPXQuZXhwb3J0cz17dmVyc2lvbjoiMi42LjkifTsibnVtYmVyIj09dHlwZW9mIF9fZSYmKF9fZT1uKX0sIjg0ZjIiOmZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXt9fSwiODZjYyI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oImNiN2MiKSxvPW4oImM2OWEiKSxpPW4oIjZhOTkiKSxhPU9iamVjdC5kZWZpbmVQcm9wZXJ0eTtlLmY9bigiOWUxZSIpP09iamVjdC5kZWZpbmVQcm9wZXJ0eTpmdW5jdGlvbih0LGUsbil7aWYocih0KSxlPWkoZSwhMCkscihuKSxvKXRyeXtyZXR1cm4gYSh0LGUsbil9Y2F0Y2gocyl7fWlmKCJnZXQiaW4gbnx8InNldCJpbiBuKXRocm93IFR5cGVFcnJvcigiQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhIik7cmV0dXJuInZhbHVlImluIG4mJih0W2VdPW4udmFsdWUpLHR9fSwiOGRmNCI6ZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj1uKCI3YTc3Iik7ZnVuY3Rpb24gbyh0KXtpZigiZnVuY3Rpb24iIT09dHlwZW9mIHQpdGhyb3cgbmV3IFR5cGVFcnJvcigiZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLiIpO3ZhciBlO3RoaXMucHJvbWlzZT1uZXcgUHJvbWlzZShmdW5jdGlvbih0KXtlPXR9KTt2YXIgbj10aGlzO3QoZnVuY3Rpb24odCl7bi5yZWFzb258fChuLnJlYXNvbj1uZXcgcih0KSxlKG4ucmVhc29uKSl9KX1vLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkPWZ1bmN0aW9uKCl7aWYodGhpcy5yZWFzb24pdGhyb3cgdGhpcy5yZWFzb259LG8uc291cmNlPWZ1bmN0aW9uKCl7dmFyIHQsZT1uZXcgbyhmdW5jdGlvbihlKXt0PWV9KTtyZXR1cm57dG9rZW46ZSxjYW5jZWw6dH19LHQuZXhwb3J0cz1vfSwiOWI0MyI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oImQ4ZTgiKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlLG4pe2lmKHIodCksdm9pZCAwPT09ZSlyZXR1cm4gdDtzd2l0Y2gobil7Y2FzZSAxOnJldHVybiBmdW5jdGlvbihuKXtyZXR1cm4gdC5jYWxsKGUsbil9O2Nhc2UgMjpyZXR1cm4gZnVuY3Rpb24obixyKXtyZXR1cm4gdC5jYWxsKGUsbixyKX07Y2FzZSAzOnJldHVybiBmdW5jdGlvbihuLHIsbyl7cmV0dXJuIHQuY2FsbChlLG4scixvKX19cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQuYXBwbHkoZSxhcmd1bWVudHMpfX19LCI5YzZjIjpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiMmI0YyIpKCJ1bnNjb3BhYmxlcyIpLG89QXJyYXkucHJvdG90eXBlO3ZvaWQgMD09b1tyXSYmbigiMzJlOSIpKG8scix7fSksdC5leHBvcnRzPWZ1bmN0aW9uKHQpe29bcl1bdF09ITB9fSwiOWM4MCI6ZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7dHJ5e3JldHVybntlOiExLHY6dCgpfX1jYXRjaChlKXtyZXR1cm57ZTohMCx2OmV9fX19LCI5ZGVmIjpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiNDU4OCIpLG89TWF0aC5taW47dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiB0PjA/byhyKHQpLDkwMDcxOTkyNTQ3NDA5OTEpOjB9fSwiOWUxZSI6ZnVuY3Rpb24odCxlLG4pe3QuZXhwb3J0cz0hbigiNzllNSIpKGZ1bmN0aW9uKCl7cmV0dXJuIDchPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwiYSIse2dldDpmdW5jdGlvbigpe3JldHVybiA3fX0pLmF9KX0sYTI1ZjpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiNzcyNiIpLG89ci5uYXZpZ2F0b3I7dC5leHBvcnRzPW8mJm8udXNlckFnZW50fHwiIn0sYTViODpmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO3ZhciByPW4oImQ4ZTgiKTtmdW5jdGlvbiBvKHQpe3ZhciBlLG47dGhpcy5wcm9taXNlPW5ldyB0KGZ1bmN0aW9uKHQscil7aWYodm9pZCAwIT09ZXx8dm9pZCAwIT09bil0aHJvdyBUeXBlRXJyb3IoIkJhZCBQcm9taXNlIGNvbnN0cnVjdG9yIik7ZT10LG49cn0pLHRoaXMucmVzb2x2ZT1yKGUpLHRoaXMucmVqZWN0PXIobil9dC5leHBvcnRzLmY9ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBvKHQpfX0sYWFlMzpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiZDNmNCIpLG89bigiMmQ5NSIpLGk9bigiMmI0YyIpKCJtYXRjaCIpO3QuZXhwb3J0cz1mdW5jdGlvbih0KXt2YXIgZTtyZXR1cm4gcih0KSYmKHZvaWQgMCE9PShlPXRbaV0pPyEhZToiUmVnRXhwIj09byh0KSl9fSxiMGM1OmZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7dmFyIHI9bigiNTIwYSIpO24oIjVjYTEiKSh7dGFyZ2V0OiJSZWdFeHAiLHByb3RvOiEwLGZvcmNlZDpyIT09Ly4vLmV4ZWN9LHtleGVjOnJ9KX0sYjUwZDpmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO3ZhciByPW4oImM1MzIiKSxvPW4oIjQ2N2YiKSxpPW4oIjMwYjUiKSxhPW4oImMzNDUiKSxzPW4oIjM5MzQiKSxjPW4oIjJkODMiKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGUsdSl7dmFyIGY9dC5kYXRhLGw9dC5oZWFkZXJzO3IuaXNGb3JtRGF0YShmKSYmZGVsZXRlIGxbIkNvbnRlbnQtVHlwZSJdO3ZhciBwPW5ldyBYTUxIdHRwUmVxdWVzdDtpZih0LmF1dGgpe3ZhciBkPXQuYXV0aC51c2VybmFtZXx8IiIsdj10LmF1dGgucGFzc3dvcmR8fCIiO2wuQXV0aG9yaXphdGlvbj0iQmFzaWMgIitidG9hKGQrIjoiK3YpfWlmKHAub3Blbih0Lm1ldGhvZC50b1VwcGVyQ2FzZSgpLGkodC51cmwsdC5wYXJhbXMsdC5wYXJhbXNTZXJpYWxpemVyKSwhMCkscC50aW1lb3V0PXQudGltZW91dCxwLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpe2lmKHAmJjQ9PT1wLnJlYWR5U3RhdGUmJigwIT09cC5zdGF0dXN8fHAucmVzcG9uc2VVUkwmJjA9PT1wLnJlc3BvbnNlVVJMLmluZGV4T2YoImZpbGU6IikpKXt2YXIgbj0iZ2V0QWxsUmVzcG9uc2VIZWFkZXJzImluIHA/YShwLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKTpudWxsLHI9dC5yZXNwb25zZVR5cGUmJiJ0ZXh0IiE9PXQucmVzcG9uc2VUeXBlP3AucmVzcG9uc2U6cC5yZXNwb25zZVRleHQsaT17ZGF0YTpyLHN0YXR1czpwLnN0YXR1cyxzdGF0dXNUZXh0OnAuc3RhdHVzVGV4dCxoZWFkZXJzOm4sY29uZmlnOnQscmVxdWVzdDpwfTtvKGUsdSxpKSxwPW51bGx9fSxwLm9uYWJvcnQ9ZnVuY3Rpb24oKXtwJiYodShjKCJSZXF1ZXN0IGFib3J0ZWQiLHQsIkVDT05OQUJPUlRFRCIscCkpLHA9bnVsbCl9LHAub25lcnJvcj1mdW5jdGlvbigpe3UoYygiTmV0d29yayBFcnJvciIsdCxudWxsLHApKSxwPW51bGx9LHAub250aW1lb3V0PWZ1bmN0aW9uKCl7dShjKCJ0aW1lb3V0IG9mICIrdC50aW1lb3V0KyJtcyBleGNlZWRlZCIsdCwiRUNPTk5BQk9SVEVEIixwKSkscD1udWxsfSxyLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpe3ZhciBoPW4oIjdhYWMiKSxtPSh0LndpdGhDcmVkZW50aWFsc3x8cyh0LnVybCkpJiZ0LnhzcmZDb29raWVOYW1lP2gucmVhZCh0LnhzcmZDb29raWVOYW1lKTp2b2lkIDA7bSYmKGxbdC54c3JmSGVhZGVyTmFtZV09bSl9aWYoInNldFJlcXVlc3RIZWFkZXIiaW4gcCYmci5mb3JFYWNoKGwsZnVuY3Rpb24odCxlKXsidW5kZWZpbmVkIj09PXR5cGVvZiBmJiYiY29udGVudC10eXBlIj09PWUudG9Mb3dlckNhc2UoKT9kZWxldGUgbFtlXTpwLnNldFJlcXVlc3RIZWFkZXIoZSx0KX0pLHQud2l0aENyZWRlbnRpYWxzJiYocC53aXRoQ3JlZGVudGlhbHM9ITApLHQucmVzcG9uc2VUeXBlKXRyeXtwLnJlc3BvbnNlVHlwZT10LnJlc3BvbnNlVHlwZX1jYXRjaCh5KXtpZigianNvbiIhPT10LnJlc3BvbnNlVHlwZSl0aHJvdyB5fSJmdW5jdGlvbiI9PT10eXBlb2YgdC5vbkRvd25sb2FkUHJvZ3Jlc3MmJnAuYWRkRXZlbnRMaXN0ZW5lcigicHJvZ3Jlc3MiLHQub25Eb3dubG9hZFByb2dyZXNzKSwiZnVuY3Rpb24iPT09dHlwZW9mIHQub25VcGxvYWRQcm9ncmVzcyYmcC51cGxvYWQmJnAudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoInByb2dyZXNzIix0Lm9uVXBsb2FkUHJvZ3Jlc3MpLHQuY2FuY2VsVG9rZW4mJnQuY2FuY2VsVG9rZW4ucHJvbWlzZS50aGVuKGZ1bmN0aW9uKHQpe3AmJihwLmFib3J0KCksdSh0KSxwPW51bGwpfSksdm9pZCAwPT09ZiYmKGY9bnVsbCkscC5zZW5kKGYpfSl9fSxiYzNhOmZ1bmN0aW9uKHQsZSxuKXt0LmV4cG9ydHM9bigiY2VlNCIpfSxiY2FhOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCJjYjdjIiksbz1uKCJkM2Y0IiksaT1uKCJhNWI4Iik7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7aWYocih0KSxvKGUpJiZlLmNvbnN0cnVjdG9yPT09dClyZXR1cm4gZTt2YXIgbj1pLmYodCksYT1uLnJlc29sdmU7cmV0dXJuIGEoZSksbi5wcm9taXNlfX0sYmUxMzpmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0KXtpZih2b2lkIDA9PXQpdGhyb3cgVHlwZUVycm9yKCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgIit0KTtyZXR1cm4gdH19LGMzNDU6ZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj1uKCJjNTMyIiksbz1bImFnZSIsImF1dGhvcml6YXRpb24iLCJjb250ZW50LWxlbmd0aCIsImNvbnRlbnQtdHlwZSIsImV0YWciLCJleHBpcmVzIiwiZnJvbSIsImhvc3QiLCJpZi1tb2RpZmllZC1zaW5jZSIsImlmLXVubW9kaWZpZWQtc2luY2UiLCJsYXN0LW1vZGlmaWVkIiwibG9jYXRpb24iLCJtYXgtZm9yd2FyZHMiLCJwcm94eS1hdXRob3JpemF0aW9uIiwicmVmZXJlciIsInJldHJ5LWFmdGVyIiwidXNlci1hZ2VudCJdO3QuZXhwb3J0cz1mdW5jdGlvbih0KXt2YXIgZSxuLGksYT17fTtyZXR1cm4gdD8oci5mb3JFYWNoKHQuc3BsaXQoIlxuIiksZnVuY3Rpb24odCl7aWYoaT10LmluZGV4T2YoIjoiKSxlPXIudHJpbSh0LnN1YnN0cigwLGkpKS50b0xvd2VyQ2FzZSgpLG49ci50cmltKHQuc3Vic3RyKGkrMSkpLGUpe2lmKGFbZV0mJm8uaW5kZXhPZihlKT49MClyZXR1cm47YVtlXT0ic2V0LWNvb2tpZSI9PT1lPyhhW2VdP2FbZV06W10pLmNvbmNhdChbbl0pOmFbZV0/YVtlXSsiLCAiK246bn19KSxhKTphfX0sYzM2NjpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiNjgyMSIpLG89bigiOWRlZiIpLGk9bigiNzdmMSIpO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oZSxuLGEpe3ZhciBzLGM9cihlKSx1PW8oYy5sZW5ndGgpLGY9aShhLHUpO2lmKHQmJm4hPW4pe3doaWxlKHU+ZilpZihzPWNbZisrXSxzIT1zKXJldHVybiEwfWVsc2UgZm9yKDt1PmY7ZisrKWlmKCh0fHxmIGluIGMpJiZjW2ZdPT09bilyZXR1cm4gdHx8Znx8MDtyZXR1cm4hdCYmLTF9fX0sYzQwMTpmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO3ZhciByPW4oImM1MzIiKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlLG4pe3JldHVybiByLmZvckVhY2gobixmdW5jdGlvbihuKXt0PW4odCxlKX0pLHR9fSxjNTMyOmZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7dmFyIHI9bigiMWQyYiIpLG89bigiYzdjZSIpLGk9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztmdW5jdGlvbiBhKHQpe3JldHVybiJbb2JqZWN0IEFycmF5XSI9PT1pLmNhbGwodCl9ZnVuY3Rpb24gcyh0KXtyZXR1cm4iW29iamVjdCBBcnJheUJ1ZmZlcl0iPT09aS5jYWxsKHQpfWZ1bmN0aW9uIGModCl7cmV0dXJuInVuZGVmaW5lZCIhPT10eXBlb2YgRm9ybURhdGEmJnQgaW5zdGFuY2VvZiBGb3JtRGF0YX1mdW5jdGlvbiB1KHQpe3ZhciBlO3JldHVybiBlPSJ1bmRlZmluZWQiIT09dHlwZW9mIEFycmF5QnVmZmVyJiZBcnJheUJ1ZmZlci5pc1ZpZXc/QXJyYXlCdWZmZXIuaXNWaWV3KHQpOnQmJnQuYnVmZmVyJiZ0LmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyLGV9ZnVuY3Rpb24gZih0KXtyZXR1cm4ic3RyaW5nIj09PXR5cGVvZiB0fWZ1bmN0aW9uIGwodCl7cmV0dXJuIm51bWJlciI9PT10eXBlb2YgdH1mdW5jdGlvbiBwKHQpe3JldHVybiJ1bmRlZmluZWQiPT09dHlwZW9mIHR9ZnVuY3Rpb24gZCh0KXtyZXR1cm4gbnVsbCE9PXQmJiJvYmplY3QiPT09dHlwZW9mIHR9ZnVuY3Rpb24gdih0KXtyZXR1cm4iW29iamVjdCBEYXRlXSI9PT1pLmNhbGwodCl9ZnVuY3Rpb24gaCh0KXtyZXR1cm4iW29iamVjdCBGaWxlXSI9PT1pLmNhbGwodCl9ZnVuY3Rpb24gbSh0KXtyZXR1cm4iW29iamVjdCBCbG9iXSI9PT1pLmNhbGwodCl9ZnVuY3Rpb24geSh0KXtyZXR1cm4iW29iamVjdCBGdW5jdGlvbl0iPT09aS5jYWxsKHQpfWZ1bmN0aW9uIGcodCl7cmV0dXJuIGQodCkmJnkodC5waXBlKX1mdW5jdGlvbiBfKHQpe3JldHVybiJ1bmRlZmluZWQiIT09dHlwZW9mIFVSTFNlYXJjaFBhcmFtcyYmdCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtc31mdW5jdGlvbiBiKHQpe3JldHVybiB0LnJlcGxhY2UoL15ccyovLCIiKS5yZXBsYWNlKC9ccyokLywiIil9ZnVuY3Rpb24gdygpe3JldHVybigidW5kZWZpbmVkIj09PXR5cGVvZiBuYXZpZ2F0b3J8fCJSZWFjdE5hdGl2ZSIhPT1uYXZpZ2F0b3IucHJvZHVjdCYmIk5hdGl2ZVNjcmlwdCIhPT1uYXZpZ2F0b3IucHJvZHVjdCYmIk5TIiE9PW5hdmlnYXRvci5wcm9kdWN0KSYmKCJ1bmRlZmluZWQiIT09dHlwZW9mIHdpbmRvdyYmInVuZGVmaW5lZCIhPT10eXBlb2YgZG9jdW1lbnQpfWZ1bmN0aW9uIHgodCxlKXtpZihudWxsIT09dCYmInVuZGVmaW5lZCIhPT10eXBlb2YgdClpZigib2JqZWN0IiE9PXR5cGVvZiB0JiYodD1bdF0pLGEodCkpZm9yKHZhciBuPTAscj10Lmxlbmd0aDtuPHI7bisrKWUuY2FsbChudWxsLHRbbl0sbix0KTtlbHNlIGZvcih2YXIgbyBpbiB0KU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LG8pJiZlLmNhbGwobnVsbCx0W29dLG8sdCl9ZnVuY3Rpb24gQygpe3ZhciB0PXt9O2Z1bmN0aW9uIGUoZSxuKXsib2JqZWN0Ij09PXR5cGVvZiB0W25dJiYib2JqZWN0Ij09PXR5cGVvZiBlP3Rbbl09Qyh0W25dLGUpOnRbbl09ZX1mb3IodmFyIG49MCxyPWFyZ3VtZW50cy5sZW5ndGg7bjxyO24rKyl4KGFyZ3VtZW50c1tuXSxlKTtyZXR1cm4gdH1mdW5jdGlvbiBBKCl7dmFyIHQ9e307ZnVuY3Rpb24gZShlLG4peyJvYmplY3QiPT09dHlwZW9mIHRbbl0mJiJvYmplY3QiPT09dHlwZW9mIGU/dFtuXT1BKHRbbl0sZSk6dFtuXT0ib2JqZWN0Ij09PXR5cGVvZiBlP0Eoe30sZSk6ZX1mb3IodmFyIG49MCxyPWFyZ3VtZW50cy5sZW5ndGg7bjxyO24rKyl4KGFyZ3VtZW50c1tuXSxlKTtyZXR1cm4gdH1mdW5jdGlvbiBPKHQsZSxuKXtyZXR1cm4geChlLGZ1bmN0aW9uKGUsbyl7dFtvXT1uJiYiZnVuY3Rpb24iPT09dHlwZW9mIGU/cihlLG4pOmV9KSx0fXQuZXhwb3J0cz17aXNBcnJheTphLGlzQXJyYXlCdWZmZXI6cyxpc0J1ZmZlcjpvLGlzRm9ybURhdGE6Yyxpc0FycmF5QnVmZmVyVmlldzp1LGlzU3RyaW5nOmYsaXNOdW1iZXI6bCxpc09iamVjdDpkLGlzVW5kZWZpbmVkOnAsaXNEYXRlOnYsaXNGaWxlOmgsaXNCbG9iOm0saXNGdW5jdGlvbjp5LGlzU3RyZWFtOmcsaXNVUkxTZWFyY2hQYXJhbXM6Xyxpc1N0YW5kYXJkQnJvd3NlckVudjp3LGZvckVhY2g6eCxtZXJnZTpDLGRlZXBNZXJnZTpBLGV4dGVuZDpPLHRyaW06Yn19LGM2OWE6ZnVuY3Rpb24odCxlLG4pe3QuZXhwb3J0cz0hbigiOWUxZSIpJiYhbigiNzllNSIpKGZ1bmN0aW9uKCl7cmV0dXJuIDchPU9iamVjdC5kZWZpbmVQcm9wZXJ0eShuKCIyMzBlIikoImRpdiIpLCJhIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIDd9fSkuYX0pfSxjN2NlOmZ1bmN0aW9uKHQsZSl7Ci8qIQogKiBEZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgQnVmZmVyCiAqCiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmc+CiAqIEBsaWNlbnNlICBNSVQKICovCnQuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gbnVsbCE9dCYmbnVsbCE9dC5jb25zdHJ1Y3RvciYmImZ1bmN0aW9uIj09PXR5cGVvZiB0LmNvbnN0cnVjdG9yLmlzQnVmZmVyJiZ0LmNvbnN0cnVjdG9yLmlzQnVmZmVyKHQpfX0sYzhhZjpmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO3ZhciByPW4oImM1MzIiKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtyLmZvckVhY2godCxmdW5jdGlvbihuLHIpe3IhPT1lJiZyLnRvVXBwZXJDYXNlKCk9PT1lLnRvVXBwZXJDYXNlKCkmJih0W2VdPW4sZGVsZXRlIHRbcl0pfSl9fSxjOGJhOmZ1bmN0aW9uKHQsZSl7dmFyIG47bj1mdW5jdGlvbigpe3JldHVybiB0aGlzfSgpO3RyeXtuPW58fG5ldyBGdW5jdGlvbigicmV0dXJuIHRoaXMiKSgpfWNhdGNoKHIpeyJvYmplY3QiPT09dHlwZW9mIHdpbmRvdyYmKG49d2luZG93KX10LmV4cG9ydHM9bn0sY2E1YTpmdW5jdGlvbih0LGUpe3ZhciBuPTAscj1NYXRoLnJhbmRvbSgpO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4iU3ltYm9sKCIuY29uY2F0KHZvaWQgMD09PXQ/IiI6dCwiKV8iLCgrK24rcikudG9TdHJpbmcoMzYpKX19LGNhZGY6ZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj1uKCI5YzZjIiksbz1uKCJkNTNiIiksaT1uKCI4NGYyIiksYT1uKCI2ODIxIik7dC5leHBvcnRzPW4oIjAxZjkiKShBcnJheSwiQXJyYXkiLGZ1bmN0aW9uKHQsZSl7dGhpcy5fdD1hKHQpLHRoaXMuX2k9MCx0aGlzLl9rPWV9LGZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fdCxlPXRoaXMuX2ssbj10aGlzLl9pKys7cmV0dXJuIXR8fG4+PXQubGVuZ3RoPyh0aGlzLl90PXZvaWQgMCxvKDEpKTpvKDAsImtleXMiPT1lP246InZhbHVlcyI9PWU/dFtuXTpbbix0W25dXSl9LCJ2YWx1ZXMiKSxpLkFyZ3VtZW50cz1pLkFycmF5LHIoImtleXMiKSxyKCJ2YWx1ZXMiKSxyKCJlbnRyaWVzIil9LGNiN2M6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oImQzZjQiKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7aWYoIXIodCkpdGhyb3cgVHlwZUVycm9yKHQrIiBpcyBub3QgYW4gb2JqZWN0ISIpO3JldHVybiB0fX0sY2UxMDpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiNjlhOCIpLG89bigiNjgyMSIpLGk9bigiYzM2NiIpKCExKSxhPW4oIjYxM2IiKSgiSUVfUFJPVE8iKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXt2YXIgbixzPW8odCksYz0wLHU9W107Zm9yKG4gaW4gcyluIT1hJiZyKHMsbikmJnUucHVzaChuKTt3aGlsZShlLmxlbmd0aD5jKXIocyxuPWVbYysrXSkmJih+aSh1LG4pfHx1LnB1c2gobikpO3JldHVybiB1fX0sY2VlNDpmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO3ZhciByPW4oImM1MzIiKSxvPW4oIjFkMmIiKSxpPW4oIjBhMDYiKSxhPW4oIjRhN2IiKSxzPW4oIjI0NDQiKTtmdW5jdGlvbiBjKHQpe3ZhciBlPW5ldyBpKHQpLG49byhpLnByb3RvdHlwZS5yZXF1ZXN0LGUpO3JldHVybiByLmV4dGVuZChuLGkucHJvdG90eXBlLGUpLHIuZXh0ZW5kKG4sZSksbn12YXIgdT1jKHMpO3UuQXhpb3M9aSx1LmNyZWF0ZT1mdW5jdGlvbih0KXtyZXR1cm4gYyhhKHUuZGVmYXVsdHMsdCkpfSx1LkNhbmNlbD1uKCI3YTc3IiksdS5DYW5jZWxUb2tlbj1uKCI4ZGY0IiksdS5pc0NhbmNlbD1uKCIyZTY3IiksdS5hbGw9ZnVuY3Rpb24odCl7cmV0dXJuIFByb21pc2UuYWxsKHQpfSx1LnNwcmVhZD1uKCIwZGY2IiksdC5leHBvcnRzPXUsdC5leHBvcnRzLmRlZmF1bHQ9dX0sZDNmNDpmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4ib2JqZWN0Ij09PXR5cGVvZiB0P251bGwhPT10OiJmdW5jdGlvbiI9PT10eXBlb2YgdH19LGQ1M2I6ZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtyZXR1cm57dmFsdWU6ZSxkb25lOiEhdH19fSxkOGU4OmZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe2lmKCJmdW5jdGlvbiIhPXR5cGVvZiB0KXRocm93IFR5cGVFcnJvcih0KyIgaXMgbm90IGEgZnVuY3Rpb24hIik7cmV0dXJuIHR9fSxkOTI1OmZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybi9eKFthLXpdW2EtelxkXCtcLVwuXSo6KT9cL1wvL2kudGVzdCh0KX19LGRjYmM6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjJhYmEiKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlLG4pe2Zvcih2YXIgbyBpbiBlKXIodCxvLGVbb10sbik7cmV0dXJuIHR9fSxlMTFlOmZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPSJjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YiLnNwbGl0KCIsIil9LGU2ODM6ZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0Ijt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZT90LnJlcGxhY2UoL1wvKyQvLCIiKSsiLyIrZS5yZXBsYWNlKC9eXC8rLywiIik6dH19LGViZDY6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oImNiN2MiKSxvPW4oImQ4ZTgiKSxpPW4oIjJiNGMiKSgic3BlY2llcyIpO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe3ZhciBuLGE9cih0KS5jb25zdHJ1Y3RvcjtyZXR1cm4gdm9pZCAwPT09YXx8dm9pZCAwPT0obj1yKGEpW2ldKT9lOm8obil9fSxmMjhjOmZ1bmN0aW9uKHQsZSl7dmFyIG4scixvPXQuZXhwb3J0cz17fTtmdW5jdGlvbiBpKCl7dGhyb3cgbmV3IEVycm9yKCJzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkIil9ZnVuY3Rpb24gYSgpe3Rocm93IG5ldyBFcnJvcigiY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkIil9ZnVuY3Rpb24gcyh0KXtpZihuPT09c2V0VGltZW91dClyZXR1cm4gc2V0VGltZW91dCh0LDApO2lmKChuPT09aXx8IW4pJiZzZXRUaW1lb3V0KXJldHVybiBuPXNldFRpbWVvdXQsc2V0VGltZW91dCh0LDApO3RyeXtyZXR1cm4gbih0LDApfWNhdGNoKGUpe3RyeXtyZXR1cm4gbi5jYWxsKG51bGwsdCwwKX1jYXRjaChlKXtyZXR1cm4gbi5jYWxsKHRoaXMsdCwwKX19fWZ1bmN0aW9uIGModCl7aWYocj09PWNsZWFyVGltZW91dClyZXR1cm4gY2xlYXJUaW1lb3V0KHQpO2lmKChyPT09YXx8IXIpJiZjbGVhclRpbWVvdXQpcmV0dXJuIHI9Y2xlYXJUaW1lb3V0LGNsZWFyVGltZW91dCh0KTt0cnl7cmV0dXJuIHIodCl9Y2F0Y2goZSl7dHJ5e3JldHVybiByLmNhbGwobnVsbCx0KX1jYXRjaChlKXtyZXR1cm4gci5jYWxsKHRoaXMsdCl9fX0oZnVuY3Rpb24oKXt0cnl7bj0iZnVuY3Rpb24iPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDppfWNhdGNoKHQpe249aX10cnl7cj0iZnVuY3Rpb24iPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6YX1jYXRjaCh0KXtyPWF9fSkoKTt2YXIgdSxmPVtdLGw9ITEscD0tMTtmdW5jdGlvbiBkKCl7bCYmdSYmKGw9ITEsdS5sZW5ndGg/Zj11LmNvbmNhdChmKTpwPS0xLGYubGVuZ3RoJiZ2KCkpfWZ1bmN0aW9uIHYoKXtpZighbCl7dmFyIHQ9cyhkKTtsPSEwO3ZhciBlPWYubGVuZ3RoO3doaWxlKGUpe3U9ZixmPVtdO3doaWxlKCsrcDxlKXUmJnVbcF0ucnVuKCk7cD0tMSxlPWYubGVuZ3RofXU9bnVsbCxsPSExLGModCl9fWZ1bmN0aW9uIGgodCxlKXt0aGlzLmZ1bj10LHRoaXMuYXJyYXk9ZX1mdW5jdGlvbiBtKCl7fW8ubmV4dFRpY2s9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgtMSk7aWYoYXJndW1lbnRzLmxlbmd0aD4xKWZvcih2YXIgbj0xO248YXJndW1lbnRzLmxlbmd0aDtuKyspZVtuLTFdPWFyZ3VtZW50c1tuXTtmLnB1c2gobmV3IGgodCxlKSksMSE9PWYubGVuZ3RofHxsfHxzKHYpfSxoLnByb3RvdHlwZS5ydW49ZnVuY3Rpb24oKXt0aGlzLmZ1bi5hcHBseShudWxsLHRoaXMuYXJyYXkpfSxvLnRpdGxlPSJicm93c2VyIixvLmJyb3dzZXI9ITAsby5lbnY9e30sby5hcmd2PVtdLG8udmVyc2lvbj0iIixvLnZlcnNpb25zPXt9LG8ub249bSxvLmFkZExpc3RlbmVyPW0sby5vbmNlPW0sby5vZmY9bSxvLnJlbW92ZUxpc3RlbmVyPW0sby5yZW1vdmVBbGxMaXN0ZW5lcnM9bSxvLmVtaXQ9bSxvLnByZXBlbmRMaXN0ZW5lcj1tLG8ucHJlcGVuZE9uY2VMaXN0ZW5lcj1tLG8ubGlzdGVuZXJzPWZ1bmN0aW9uKHQpe3JldHVybltdfSxvLmJpbmRpbmc9ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKCJwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCIpfSxvLmN3ZD1mdW5jdGlvbigpe3JldHVybiIvIn0sby5jaGRpcj1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoInByb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCIpfSxvLnVtYXNrPWZ1bmN0aW9uKCl7cmV0dXJuIDB9fSxmNjA1OmZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxuLHIpe2lmKCEodCBpbnN0YW5jZW9mIGUpfHx2b2lkIDAhPT1yJiZyIGluIHQpdGhyb3cgVHlwZUVycm9yKG4rIjogaW5jb3JyZWN0IGludm9jYXRpb24hIik7cmV0dXJuIHR9fSxmNmI0OmZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7dmFyIHI9bigiYzUzMiIpO2Z1bmN0aW9uIG8oKXt0aGlzLmhhbmRsZXJzPVtdfW8ucHJvdG90eXBlLnVzZT1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmhhbmRsZXJzLnB1c2goe2Z1bGZpbGxlZDp0LHJlamVjdGVkOmV9KSx0aGlzLmhhbmRsZXJzLmxlbmd0aC0xfSxvLnByb3RvdHlwZS5lamVjdD1mdW5jdGlvbih0KXt0aGlzLmhhbmRsZXJzW3RdJiYodGhpcy5oYW5kbGVyc1t0XT1udWxsKX0sby5wcm90b3R5cGUuZm9yRWFjaD1mdW5jdGlvbih0KXtyLmZvckVhY2godGhpcy5oYW5kbGVycyxmdW5jdGlvbihlKXtudWxsIT09ZSYmdChlKX0pfSx0LmV4cG9ydHM9b30sZjc1MTpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiNWNhMSIpO3Ioci5TK3IuRiwiT2JqZWN0Iix7YXNzaWduOm4oIjczMzMiKX0pfSxmYTViOmZ1bmN0aW9uKHQsZSxuKXt0LmV4cG9ydHM9bigiNTUzNyIpKCJuYXRpdmUtZnVuY3Rpb24tdG8tc3RyaW5nIixGdW5jdGlvbi50b1N0cmluZyl9LGZhYjI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjc3MjYiKS5kb2N1bWVudDt0LmV4cG9ydHM9ciYmci5kb2N1bWVudEVsZW1lbnR9fV0pOwovLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay12ZW5kb3JzLmE2YzRlNjFiLmpzLm1hcA==")
var _assetjschunkvendorsa6c4e61bjsmap, _ = base64.StdEncoding.DecodeString("")
var fileMap = map[string][]byte{
	"/css/app.2bb65642.css":             _assetcssapp2bb65642css,
	"/index.html":                       _assetindexhtml,
	"/js/app.9c3c9b4a.js":               _assetjsapp9c3c9b4ajs,
	"/js/app.9c3c9b4a.js.map":           _assetjsapp9c3c9b4ajsmap,
	"/js/chunk-vendors.a6c4e61b.js":     _assetjschunkvendorsa6c4e61bjs,
	"/js/chunk-vendors.a6c4e61b.js.map": _assetjschunkvendorsa6c4e61bjsmap,
}
